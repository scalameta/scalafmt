indentYieldKeyword = false
<<< no curly brace
for (x <- Nil)
  yield 2
>>>
for (x <- Nil)
yield 2
<<< left curly brace
for {
  parent <- sym.info.parents
}
yield {
  genClassName(psym)
}
>>>
for {
  parent <- sym.info.parents
} yield {
  genClassName(psym)
}
<<< right curly brace
for (parent <- sym.info.parents)
  yield {
  genClassName(psym)
}
>>>
for (parent <- sym.info.parents)
yield {
  genClassName(psym)
}
<<< both curly brace
for {parent <- sym.info.parents}
  yield {
  genClassName(psym)
}
>>>
for { parent <- sym.info.parents } yield {
  genClassName(psym)
}
<<< break before `for`
val sizes = for (row <- table)
yield
  (for (cell <- row)
  yield
    if (cell == null) 0
    else cell.toString.length)
>>>
val sizes =
  for (row <- table)
  yield
    (for (cell <- row)
     yield
       if (cell == null) 0
       else cell.toString.length)
<<< normal way #592
val sizes = for (row <- table) yield {
    for (cell <- row)
    yield
      if (cell == null) 0
      else cell.toString.length
  }
>>>
val sizes = for (row <- table) yield {
  for (cell <- row)
  yield
    if (cell == null) 0
    else cell.toString.length
}
<<< normal way column limit 1 #592
val sizes = for (row <- tableaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaas) yield {
    body
    // ...
  }
>>>
val sizes =
  for (row <- tableaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaas) yield {
    body
    // ...
  }
<<< normal way column limit 2 #592
val sizes = for (row <- tableaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasaaaaaaaaaaa) yield {
    body
    // ...
  }
>>>
val sizes =
  for (row <- tableaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasaaaaaaaaaaa)
  yield {
    body
    // ...
  }
<<< single line
for (x <- Nil) yield { 1 }
>>>
for (x <- Nil) yield { 1 }
