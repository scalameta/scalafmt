verticalMultilineAtDefinitionSite = true
maxColumn = 80
continuationIndent.extendSite = 2
<<< curried function over maxColumn
def format_![T <: Tree](code: String, foo: Int)(f: A => B, k: D)(implicit ev: Parse[T], ev2: EC): String
>>>
def format_![T <: Tree](
    code: String,
    foo: Int
  )(f: A => B,
    k: D
  )(implicit ev: Parse[T],
    ev2: EC
  ): String

<<< curried function under maxColumn
def format_![T <: Tree](code: String)(f: A => B)(implicit ev: Parse[T]): String
>>>
def format_![T <: Tree](code: String)(f: A => B)(implicit ev: Parse[T]): String

<<< small multi-line functions should fit in one line
def format_![T <: Tree](
    code: String)(
    f: A => B)
    (implicit ev: Parse[T]): String
>>>
def format_![T <: Tree](code: String)(f: A => B)(implicit ev: Parse[T]): String

<<< curried function mixed style 1
def format_![T <: Tree](
    code: String,
    code2: String
  )(implicit ev: Parse[T], ex: D): String = 1
>>>
def format_![T <: Tree](
    code: String,
    code2: String
  )(implicit ev: Parse[T],
    ex: D
  ): String = 1

<<< curried function mixed style 2
def format_![T <: Tree](code: String, foo: Int)(
  f: A => B
  )(implicit ev: Parse[T],
  ev2: EC)
  : String
>>>
def format_![T <: Tree](
    code: String,
    foo: Int
  )(f: A => B
  )(implicit ev: Parse[T],
    ev2: EC
  ): String

<<< should work with comments
def format_![
  T <: Tree // Some type comment
  ](
    code: String, // The code!
    code2: String
  )(implicit ev: Parse[T], // The Parser!!! Some very long comment that goes over limit
  ex: D): String = 1
>>>
def format_![
    T <: Tree // Some type comment
  ](code: String, // The code!
    code2: String
  )(implicit ev: Parse[T], // The Parser!!! Some very long comment that goes over limit
    ex: D
  ): String = 1

<<< should not modify into single line if it has comments
def format_!(
    code: String, // The code!
    code2: String
  ): String = 1
>>>
def format_!(
    code: String, // The code!
    code2: String
  ): String = 1

<<< should work with defaulted method
def format_![T <: Tree](
  name: Name,
  code: String = Defaults.code, updatedAt: Instant = Instant.now(),
  user: User = new User { def someFunc(): RT = () },
  createdAt: Instant = Default.getInstant(a)(b))
  (implicit ev: Parse[T],
  ev2: EC)
  : String
>>>
def format_![T <: Tree](
    name: Name,
    code: String = Defaults.code,
    updatedAt: Instant = Instant.now(),
    user: User = new User { def someFunc(): RT = () },
    createdAt: Instant = Default.getInstant(a)(b)
  )(implicit ev: Parse[T],
    ev2: EC
  ): String

<<< should affect classes
final class UserProfile(name: String, age: Int, address: Address, profession: Profesion, school: School)(
  implicit ctx: Context, ec: Executor)
  extends Profile with UserSettings with SomethingElse
>>>
final class UserProfile(
    name: String,
    age: Int,
    address: Address,
    profession: Profesion,
    school: School
  )(implicit ctx: Context,
    ec: Executor)
  extends Profile
  with UserSettings
  with SomethingElse

<<< should work with an empty first param group
override def load()(implicit taskCtx: Context,
      ec: ExecutionContext
    ): Future[Seq[A] Or B]
>>>
override def load(
  )(implicit taskCtx: Context,
    ec: ExecutionContext
  ): Future[Seq[A] Or B]

<<< should work with an empty non-first param group
override def load(code: String)()(implicit taskCtx: Context,
      ec: ExecutionContext
    ): Future[Seq[A] Or B]
>>>
override def load(
    code: String
  )(
  )(implicit taskCtx: Context,
    ec: ExecutionContext
  ): Future[Seq[A] Or B]

<<< should work with very long type params
final case class SomeCaseClass[N <: Node, R <: SomeLongUpperBound: Ordering: Parser](
  projectOrdering: N => R, someOtherString: String)(implicit ex: Context)
>>>
final case class SomeCaseClass[
    N <: Node,
    R <: SomeLongUpperBound: Ordering: Parser
  ](projectOrdering: N => R,
    someOtherString: String
  )(implicit ex: Context)

<<< should work with very long type params in Defs
override protected def SomeDefinition[N <: Node, R <: SomeLongUpperBound: Ordering: Parser](
  projectOrdering: N => R, someOtherString: String)(implicit ex: Context)
>>>
override protected def SomeDefinition[
    N <: Node,
    R <: SomeLongUpperBound: Ordering: Parser
  ](projectOrdering: N => R,
    someOtherString: String
  )(implicit ex: Context
  )

<<< defs: if the type params fit in one line, make it so (single type param)
override protected def SomeDefinition[N](projectOrdering: N => R, someOtherString: String)(implicit ex: Context)
>>>
override protected def SomeDefinition[N](
    projectOrdering: N => R,
    someOtherString: String
  )(implicit ex: Context
  )
<<< defs: if the type params fit in one line, make it so (multiple type params)
override protected def SomeDefinition[N, TC[_], T <: SomeBoundUnderLimit: TC](projectOrdering: N => R, someOtherString: String)(implicit ex: Context)
>>>
override protected def SomeDefinition[N, TC[_], T <: SomeBoundUnderLimit: TC](
    projectOrdering: N => R,
    someOtherString: String
  )(implicit ex: Context
  )

<<< class: if the type params fit in one line, make it so (single type param)
final case class SomeCaseClass[N](projectOrdering: N => R, someOtherString: String)(implicit ex: Context)
>>>
final case class SomeCaseClass[N](
    projectOrdering: N => R,
    someOtherString: String
  )(implicit ex: Context)

<<< class: if the type params fit in one line, make it so (multiple type param)
final case class SomeCaseClass[N <: NodeUpperBound, TC[_], T <: SomeBoundUnderLimit: TC](projectOrdering: N => R, someOtherString: String)(implicit ex: Context)
>>>
final case class SomeCaseClass[
    N <: NodeUpperBound,
    TC[_],
    T <: SomeBoundUnderLimit: TC
  ](projectOrdering: N => R,
    someOtherString: String
  )(implicit ex: Context)

<<< trait: if the type params fit in one line, make it so (single type param)
private sealed trait SomeTrait[N]
>>>
private sealed trait SomeTrait[N]
<<< trait: if the type params fit in one line, make it so (multiple type param)
private sealed trait SomeTrait[N, TC[_], T <: SomeBoundUnderLimit]
>>>
private sealed trait SomeTrait[N, TC[_], T <: SomeBoundUnderLimit]

<<< trait: multi-line for a single type param
private sealed trait SomeTrait[ThisIsSomeVeryLongTypeParam <: SomeLongUpperBound] extends Something
>>>
private sealed trait SomeTrait[
    ThisIsSomeVeryLongTypeParam <: SomeLongUpperBound]
  extends Something

<<< trait: multi-line for multiple params
private sealed trait SomeTrait[ThisIsSomeVeryLongTypeParam <: SomeLongUpperBound, AndAnother] extends Something
>>>
private sealed trait SomeTrait[
    ThisIsSomeVeryLongTypeParam <: SomeLongUpperBound,
    AndAnother]
  extends Something

<<< Work with modifiers for the constructor
final case class TypedId[A] private (value: Long)
>>>
final case class TypedId[A] private (value: Long)

<<< Work with modifiers for the constructor (single line types)
final case class SomeVeryLongName[SomeLongTypeName <: UpperBounds] private (value: Long, name: String)(implicit ex: Executor)
>>>
final case class SomeVeryLongName[SomeLongTypeName <: UpperBounds] private (
    value: Long,
    name: String
  )(implicit ex: Executor)

<<< Work with modifiers (private[this]) for the constructor (full multi-line)
final case class SomeVeryLongName[SomeLongTypeName <: UpperBounds, SomeOtherTypeName] private[this](value: Long, name: String)(implicit ex: Executor)
>>>
final case class SomeVeryLongName[
    SomeLongTypeName <: UpperBounds,
    SomeOtherTypeName
  ] private[this] (
    value: Long,
    name: String
  )(implicit ex: Executor)

<<< Work with modifiers (protected) for the constructor (full multi-line)
final case class SomeVeryLongName[SomeLongTypeName <: UpperBounds, SomeOtherTypeName] protected(value: Long, name: String)(implicit ex: Executor)
>>>
final case class SomeVeryLongName[
    SomeLongTypeName <: UpperBounds,
    SomeOtherTypeName
  ] protected (
    value: Long,
    name: String
  )(implicit ex: Executor)

<<< Work with long type params and no parens in class
class SomeVeryLongName[SomeLongTypeName <: UpperBounds, SomeOtherTypeName, YetAnotherType] extends Something
>>>
class SomeVeryLongName[
    SomeLongTypeName <: UpperBounds,
    SomeOtherTypeName,
    YetAnotherType]
  extends Something
