80 columns                                                                     |
<<< Long line
class Formatter(style: ScalaStyle, tree: Tree, toks: Array[FormatToken], statementStarts: Set[Token], owners: Map[Token, Tree])
>>>
class Formatter(style: ScalaStyle, tree: Tree, toks: Array[FormatToken],
    statementStarts: Set[Token], owners: Map[Token, Tree])
<<< Really really long.
case class State(
    cost: Int,
    policy: Decision => Decision,
    splits: Vector[Split],
    indentation: Int,
    indents: Vector[Push],
    column: Int) extends Ordered[State] with ScalaFmtLogger
>>>
case class State(cost: Int, policy: Decision => Decision,
    splits: Vector[Split], indentation: Int, indents: Vector[Push],
    column: Int)
    extends Ordered[State] with ScalaFmtLogger
<<< curried defn.class
class Fmt[T <: Tree](code: String, a: Int, bbbbbbbbbbbbbbbbbbbbbbbbbbb: Int)(implicit ev: Parse[T])
>>>
class Fmt[T <: Tree](code: String, a: Int, bbbbbbbbbbbbbbbbbbbbbbbbbbb: Int)(
    implicit ev: Parse[T])
<<< no newline before eof
case  class Decision(formatToken: FormatToken, splits: Seq[Split])
>>>
case class Decision(formatToken: FormatToken, splits: Seq[Split])
<<< Extends indent, #157
@js.native
class Response(content: BodyInit = null, init: ResponseInit = null)
        extends Body {
  val x = 1
}
>>>
@js.native
class Response(content: BodyInit = null, init: ResponseInit = null)
    extends Body {
  val x = 1
}
<<< never break #259
class Promise[+A](
    executor: js.Function2[js.Function1[A | Thenable[A], _], js.Function1[scala.Any, _], _])
>>>
class Promise[+A](
    executor: js.Function2[
        js.Function1[A | Thenable[A], _], js.Function1[scala.Any, _], _])
<<< #270
object a {
private class Encoder extends CharsetEncoder(
    UTF_16_Common.this, 2.0f, 2.0f,
    // Character 0xfffd
    if (endianness == LittleEndian) Array(-3, -1) else Array(-1, -3))
    }
>>>
object a {
  private class Encoder
      extends CharsetEncoder(UTF_16_Common.this, 2.0f, 2.0f,
          // Character 0xfffd
          if (endianness == LittleEndian) Array(-3, -1) else Array(-1, -3))
}
