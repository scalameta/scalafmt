80 columns                                                                     |
<<< keep blank lines
{

  def cancel(reason: Any): js.Promise[Any] = js.native // comment

  /**
   */
  def read(): js.Promise[Chunk[T]] = js.native
  }
>>>
{

  def cancel(reason: Any): js.Promise[Any] = js.native // comment

  /**
    */
  def read(): js.Promise[Chunk[T]] = js.native
}
<<< keep blank lines 2 #99
object KeyValue {

  // ================================
  // 6.3.1 Special Key Values


  /** This key value */
    final val Unidentified = "Unidentified"
}
>>>
object KeyValue {

  // ================================
  // 6.3.1 Special Key Values

  /** This key value */
  final val Unidentified = "Unidentified"
}
<<< two comments attached to def
object KeyValue {

  // comment
  /** This key value */
    final val Unidentified = "Unidentified"
}
>>>
object KeyValue {

  // comment
  /** This key value */
  final val Unidentified = "Unidentified"
}
<<< /* */ attach like // #107
object a {
  final val BLEND_EQUATION = 0x8009
  final val BLEND_EQUATION_RGB = 0x8009   /* same as BLEND_EQUATION */
  final val BLEND_EQUATION_ALPHA = 0x883D
 }
>>>
object a {
  final val BLEND_EQUATION = 0x8009
  final val BLEND_EQUATION_RGB = 0x8009 /* same as BLEND_EQUATION */
  final val BLEND_EQUATION_ALPHA = 0x883D
}
<<< Definitions
object D {

  private val decompressedPrefixes: Seq[(String, String)] =
    compressedPrefixes map { case (a, b) => (b, a) }

  /**
    */
  def decodeMethodName = 2
  }
>>>
object D {

  private val decompressedPrefixes: Seq[(String, String)] =
    compressedPrefixes map { case (a, b) => (b, a) }

  /**
    */
  def decodeMethodName = 2
}
<<< multiline comments
object Primes {

   // prime sieve; use instead of the test or stream when you know the
   // upper bound of the primes you will need.
   // en.wikipedia.org/wiki/Sieve_of_Eratosthenes
   // this is the genuine sieve algorithm; see www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf
   // for a discussion of impostors
     def primesBelow(limit: Int): List[Int]
}
>>>
object Primes {

  // prime sieve; use instead of the test or stream when you know the
  // upper bound of the primes you will need.
  // en.wikipedia.org/wiki/Sieve_of_Eratosthenes
  // this is the genuine sieve algorithm; see www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf
  // for a discussion of impostors
  def primesBelow(limit: Int): List[Int]
}
<<< #384 header comment
/*                                                                      *\
** Squants                                                              **
**                                                                      **
** Scala Quantities and Units of Measure Library and DSL                **
** (c) 2013-2015, Gary Keorkunian                                       **
**                                                                      **
\*                                                                      */
  trait A
>>>
/*                                                                      *\
** Squants                                                              **
**                                                                      **
** Scala Quantities and Units of Measure Library and DSL                **
** (c) 2013-2015, Gary Keorkunian                                       **
**                                                                      **
\*                                                                      */
trait A
