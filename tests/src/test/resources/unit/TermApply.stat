40 columns                              |
<<< one arg chained (state explosion)
a(b).c(d).e(f).g(h).i(j).k { aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa }
>>>
a(b).c(d).e(f).g(h).i(j).k {
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
}
<<< avoid dead ends
function(
    firstCall(a, b, c, d, e, f, g, h),
    secondCall("very long argument string"));
>>>
function(
    firstCall(a, b, c, d, e, f, g, h),
    secondCall(
        "very long argument string"));
<<< Prune redundant branches
new Compiler(
    primitives.opti___________ons.has("primitives"),
    minify.options.has("minify"),
    preserve.options.has("preserve"),
    liveAnalysis.check(options.has("live"), options.has("analysis")),
    multi.options.has("multi"),
    sourceMap.options.hasNot("source-map"));
>>>
new Compiler(
    primitives.opti___________ons.has(
        "primitives"),
    minify.options.has("minify"),
    preserve.options.has("preserve"),
    liveAnalysis.check(
        options.has("live"),
        options.has("analysis")),
    multi.options.has("multi"),
    sourceMap.options.hasNot(
        "source-map"));
<<< comment after (
var list = List( // comment
  function(a: A, b: B, c: C)
)
>>>
var list = List( // comment
    function(a: A, b: B, c: C))
<<< long
var list = List(
  function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C), function(a: A, b: B, c: C) );
>>>
var list = List(
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C),
    function(a: A, b: B, c: C));
<<< Single line with block {}
function(a, b, c, {
    case Foo("a", 1) => Foo("b", 2)
  })
>>>
function(a, b, c, {
  case Foo("a", 1) => Foo("b", 2)
})
<<< MUST NOT use automatic formatting 1 alexandru/scala-best-practices
val dp = new DispatchPlan(Set(filteredAssets), start =
  startDate, end = endDate, product, scheduleMap, availabilityMap,
  Set(activationIntervals), contractRepository, priceRepository)
>>>
val dp = new DispatchPlan(
    Set(filteredAssets),
    start = startDate,
    end = endDate,
    product,
    scheduleMap,
    availabilityMap,
    Set(activationIntervals),
    contractRepository,
    priceRepository)
<<< MUST NOT use automatic formatting 2 alexandru/scala-best-practices
val result = service.something(param1, param2, param3, param4).map(transform)
>>>
val result = service
  .something(param1,
             param2,
             param3,
             param4)
  .map(transform)
<<< config style
Seq(
  Split(Space, 0),
  Split(Newline, 1)
)
>>>
Seq(
    Split(Space, 0),
    Split(Newline, 1)
)
<<< config style with inline comment
Seq(
  Split(Space, 0), // End files with trailing newline
  Split(Newline, 1)
)
>>>
Seq(
    Split(Space, 0), // End files with trailing newline
    Split(Newline, 1)
)
<<< seq to var arg, #178
 FilesUtil.getFile(path:_*)
>>>
FilesUtil.getFile(path: _*)
<<< tuple superfluous
((1111111, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa))
>>>
((1111111,
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa))
