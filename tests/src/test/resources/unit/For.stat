40 columns                              |
<<< newline for each clause
for { f0 <- Option(a)
  filename <- f0
} yield filename
>>>
for {
  f0 <- Option(a)
  filename <- f0
} yield filename
<<< unit
for (
(msg, parseErrors) <- xs) {
  println(header(msg))
}
>>>
for ((msg, parseErrors) <- xs) {
  println(header(msg))
}
<<< crazy one-liner
val sizes = for (
row <- table) yield ( for (
cell <- row) yield if (cell == null) 0
else cell.toString.length)
>>>
val sizes = for (row <- table)
  yield
    (for (cell <- row)
      yield
        if (cell == null) 0
        else cell.toString.length)
<<< if singleline
val k = for {
    _ <- Future(1) if !onlyOne
  _ <- Future(2)
} yield ()
>>>
val k = for {
  _ <- Future(1) if !onlyOne
  _ <- Future(2)
} yield ()
<<< if multiline
val k = for {
    _ <- Future(aaaaaaaaaaaaaa) if !onlyOne
  _ <- Future(2)
} yield ()
>>>
val k = for {
  _ <- Future(aaaaaaaaaaaaaa)
  if !onlyOne
  _ <- Future(2)
} yield ()
<<< if multiline, split before If?
val k = for {
    _ <- Future(aaaaaa, bbbbbbbbbbbb, cccccccc) if one
  _ <- Future(2)
} yield ()
>>>
val k = for {
  _ <- Future(aaaaaa,
              bbbbbbbbbbbb,
              cccccccc) if one
  _ <- Future(2)
} yield ()
<<< enumerator val
for {
          srcDir <- sourceDirectories
          normSrcDir = normPath(srcDir)
          src <- (srcDir ** "*.scala").get
        } Unit
>>>
for {
  srcDir <- sourceDirectories
  normSrcDir = normPath(srcDir)
  src <- (srcDir ** "*.scala").get
} Unit
<<< If gets a line #176
   for {
  parent <- sym.info.parents
   psym = parent.typeS
  if psym.isInt
  foo <- barOpt
  if foo.isBar
} yield {
  genClassName(psym)
}
>>>
for {
  parent <- sym.info.parents
  psym = parent.typeS
  if psym.isInt
  foo <- barOpt
  if foo.isBar
} yield {
  genClassName(psym)
}
<<< align by ( #233
for (result <- results.sortBy(-_.x)
                               if result != "W") yield x
>>>
for (result <- results.sortBy(-_.x)
     if result != "W") yield x
<<< align by ( #233, no yield
for (result <- results.sortBy(-_.x)
                               if result != "W") {
                               println(1)
                               }
>>>
for (result <- results.sortBy(-_.x)
     if result != "W") {
  println(1)
}
<<< scala.js codingstyle 1
  for (i <- 0 until n)
  doStuff(i)
>>>
for (i <- 0 until n)
  doStuff(i)
<<< scala.js codingstyle 2
 for {
  i <- 0 until n
  j <- 0 until i
} {
  doStuff(i, j)
}
>>>
for {
  i <- 0 until n
  j <- 0 until i
} {
  doStuff(i, j)
}
<<< scala.js codingstyle 3
for (x <- xs) yield {
    x * 2
}
>>>
for (x <- xs) yield {
  x * 2
}
<<< scala.js codingstyle 4
  for (x <- xs)
  yield x * 2
>>>
for (x <- xs)
  yield x * 2
<<< scala.js codingstyle 5
  for {
  i <- 0 until n
  j <- 0 until i
} yield {
  thing(i, j)
}
>>>
for {
  i <- 0 until n
  j <- 0 until i
} yield {
  thing(i, j)
}
<<< alignByArrowEnumeratorGenerator
for {
  x <- new Integer {
  def value = 2
  }
  y <- Int(2)
} yield x + y
>>>
for {
  x <- new Integer {
    def value = 2
  }
  y <- Int(2)
} yield x + y
<<< normal way #592
val sizes =
  for (row <- table) yield {
    for (cell <- row)
    yield
      if (cell == null) 0
      else cell.toString.length
  }
>>>
val sizes =
  for (row <- table) yield {
    for (cell <- row)
      yield
        if (cell == null) 0
        else cell.toString.length
  }
