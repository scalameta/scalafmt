40 columns                              |
<<< single line
def log(split: Split): String = "aasplit"
>>>
def log(split: Split): String =
  "aasplit"
<<< def gets 2x newline
{val x = 1

def log(split: Split): String = "aasplit"
}
>>>
{
  val x = 1

  def log(split: Split): String =
    "aasplit"
}
<<< override def gets 2x newline
object a {val x = 1

override def log(a: Split): String = "aasplit"
}
>>>
object a {
  val x = 1

  override def log(a: Split): String =
    "aasplit"
}
<<< with type
def identity[T](t: T): T =   t
>>>
def identity[T](t: T): T = t
<<< def kill?
      def hasExplicitJSEncoding =
        sym.hasAnnotation(JSNameAnnotation) ||
        sym.hasAnnotation(JSBracketAccessAnnotation) ||
        sym.hasAnnotation(JSBracketCallAnnotation)
>>>
def hasExplicitJSEncoding =
  sym
    .hasAnnotation(JSNameAnnotation) ||
    sym.hasAnnotation(
        JSBracketAccessAnnotation) ||
    sym.hasAnnotation(
        JSBracketCallAnnotation)
<<< curried functions
def format_![T <: Tree](code: String)(implicit ev: Parse[T]): String
>>>
def format_![T <: Tree](code: String)(
    implicit ev: Parse[T]): String
<<< curried functions defn.def
def format_![T <: Tree](code: String)(implicit ev: Parse[T]): String = 1
>>>
def format_![T <: Tree](code: String)(
    implicit ev: Parse[T]): String = 1
<<< procedure syntax
def main(args: Array[String]) {
parser.foreach(run)
}
>>>
def main(args: Array[String]) {
  parser.foreach(run)
}
<<< var args tuple #103
def fill(points: (Double, Double)*) = {
      ctx.fill()
    }
>>>
def fill(points: (Double, Double)*) = {
  ctx.fill()
}
<<< var args
def fill(points: Double*) = {
      ctx.fill()
    }
>>>
def fill(points: Double*) = {
  ctx.fill()
}
<<< single line, exclude {} blocks
def fill(points: Double) = x match {
case ctx => 1
}
>>>
def fill(points: Double) = x match {
  case ctx => 1
}
<<< single line excluding last {} block
    def compare(): Int =
      if (startA == endA) {
        if (startB == endB) 0
        else -1
      } else if (startB == endB) 1
      else {
        x
      }
>>>
def compare(): Int =
  if (startA == endA) {
    if (startB == endB) 0
    else -1
  } else if (startB == endB) 1
  else {
    x
  }
<<< don't move body if it was on new line, #182
def a =
 b
>>>
def a =
  b
<<< #283
def heyImCool = {
    val c = b.foobar

}
>>>
def heyImCool = {
  val c = b.foobar

}
