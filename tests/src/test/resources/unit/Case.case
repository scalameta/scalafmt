40 columns                              |
<<< Match tuple
case (x, y) =>   x -> y
>>>
case (x, y) => x -> y
<<< Match extract
case Class(x, y) =>   x -> y
>>>
case Class(x, y) => x -> y
<<< Without body
case x =>
>>>
case x =>
<<< Too long body
case x => function(aaaaaaaaaaaaaaaaaaa,
                   bbbbbbbbbbbbbbbbbbb)
>>>
case x =>
  function(aaaaaaaaaaaaaaaaaaa,
           bbbbbbbbbbbbbbbbbbb)
<<< with condition
case x if x > 2 =>   danger()
>>>
case x if x > 2 => danger()
<<< with @ bind
case x@Foooooooooooooooo(1111,1111) if true =>
  danger()
>>>
case x @ Foooooooooooooooo(1111, 1111)
    if true =>
  danger()
<<< with long condition
case SuperDuperCool if banana > orange =>
  danger()
>>>
case SuperDuperCool
    if banana > orange =>
  danger()
<<< break first on if
case SuperDuperCool(aaaaaaa, bbbbbbb) if banana > orange =>
  danger()
>>>
case SuperDuperCool(aaaaaaa, bbbbbbb)
    if banana > orange =>
  danger()
<<< newline if Pat is not single line
case SuperDuperCool(aaaaaaa, bbbbbbb, _) =>
  danger()
>>>
case SuperDuperCool(aaaaaaa,
                    bbbbbbb,
                    _) =>
  danger()
<<< with |
case _: Defn.Def | _: Pkg.Object | _: Defn.Class | _: Defn.Trait => true
>>>
case _: Defn.Def | _: Pkg.Object |
    _: Defn.Class | _: Defn.Trait =>
  true
<<< bind @ with symbols
case f@ \/-(a) => f
>>>
case f @ \/-(a) => f
<<< Pat.Type #207
case x:Foo [_] => 1
>>>
case x: Foo[_] => 1
<<< #506
case Foooooooooooooooo(aaaaaaaaaaaaaaaa, bbbbbbbbbbbb) =>
>>>
case Foooooooooooooooo(
    aaaaaaaaaaaaaaaa,
    bbbbbbbbbbbb) =>
<<< #512
case q"""...${ stats: Seq[Stat] } """ =>
  s"${foo}"
>>>
case q"""...${stats: Seq[Stat]} """ =>
  s"${foo}"
