40 columns                              |
<<< keep x to {
lst.map { x =>
      println(x)
  x + 1
}
>>>
lst.map { x =>
  println(x)
  x + 1
}
<<< long argument to lambda {
lst.map { xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =>
      println(x)
  x + 1
}
>>>
lst.map {
  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =>
    println(x)
    x + 1
}
<<< long argument singleline
lst.map { (xxxxxxxxxxxx, yyyyyyyyyyy) =>
      println(x)
  x + 1
}
>>>
lst.map {
  (xxxxxxxxxxxx, yyyyyyyyyyy) =>
    println(x)
    x + 1
}
<<< curried
Thing() { implicit ctx => j =>
      ???
}
>>>
Thing() { implicit ctx => j =>
  ???
}
<<< curried break before first
Thing() { implicit ctx => j => kkkkkkkkkk =>
      ???
}
>>>
Thing() {
  implicit ctx => j => kkkkkkkkkk =>
    ???
}
<<< curried insanity, fit as much on line as possible
Thing() { implicit ctx => j => kkkkkkkkkkkkkkkkkkk => llllllllllll => mmmmmmmmmmmmmmmmmmm =>
      ???
}
>>>
Thing() {
  implicit ctx => j =>
    kkkkkkkkkkkkkkkkkkk =>
      llllllllllll =>
        mmmmmmmmmmmmmmmmmmm =>
          ???
}
<<< curried with ()
Thing(implicit ctx => j =>
      ???
)
>>>
Thing(implicit ctx => j => ???)
<<< long curried with ()
Thing(implicit ctx => j => k => aaaaaaaaaaaaa(bbbbbbbbbbbbbbbbbbb, cccccccccc, ddddddddddddddddddddj)) // coooooooooooooooomment
>>>
Thing(
    implicit ctx =>
      j =>
        k =>
          aaaaaaaaaaaaa(
              bbbbbbbbbbbbbbbbbbb,
              cccccccccc,
              ddddddddddddddddddddj)) // coooooooooooooooomment
<<< single line uncurried
Thing() { implicit ctx =>
      ???
}
>>>
Thing() { implicit ctx =>
  ???
}
<<< ( arg =>
val groupedData = Array(topic1, topic2).flatMap(
        topic =>
          partitionDataFetchResponseMap.map(foobar))
>>>
val groupedData =
  Array(topic1, topic2).flatMap(
      topic =>
        partitionDataFetchResponseMap
          .map(foobar))
