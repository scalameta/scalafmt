@import Main._

@import org.scalafmt.readme.Readme._
@import org.scalafmt.config.ScalafmtConfig

@sect{0.2.12}
  @ul
    @li
      New @code{--spaceBeforeContextBoundColon} flag.
      @hl.scala
        // false (default)
        def f[T: Numeric](t: T) = ???
        // true
        def f[T : Numeric](t: T) = ???

@sect{0.2.11}
  @ul
    @li
      Add 2 indentation for non-boolean infix operators in "top-level"
      statements. For example,

      @hl.scala
        // 0.2.10
        {
          buf +=
          sh"${foo} aa"
        }
        // 0.2.11
        {
          buf +=
            sh"${foo} aa"
        }


@sect{0.2.10}
  @ul
    @li
      Ignore if you don't use @code{--danglingParentheses true}
      Fixes single issue reported in @issue(325).

      @hl.scala
        // 0.2.9
        Props(
            new Actor {
          context.stop(self)
          override def receive = Actor.emptyBehavior
        }
        )
        // 0.2.10
        Props(new Actor {
          context.stop(self)
          def receive = Actor.emptyBehavior
        })
@sect{0.2.9}
  @ul
    @li
      Decrease non-idempotent cases in test suite from 15 to 11.
      I observed that non-idempotent formatting happens far less often on
      code that is already formatted with scalafmt. In a sample of 3.2
      million lines of code (~27.000 source files), only a single source
      file rotates between two formatting layouts with every run of scalafmt.
      All other files reach a fixpoint after one pass of scalafmt.
    @li
      New flag: @code{--reformatDocstrings false} to disable docstring
      reformatting (on by default).
    @li
      New flag: @code{--bestEffortInDeeplyNestedCode} (off by default) to
      reenable best-effort formatting as was default prior to 0.2.6.
      If you get a lot of "Search state exploded" errors in IntelliJ,
      you might want to try this out.
      The setting was disabled in 0.2.6 because it sometimes produces bad
      output.
    @li
      Small improvements to @code{--danglingParentheses}. I imagine we
      will soon officially support a style with these settings

      @hl.scala
        --continuationIndentCallSite 2
        --danglingParentheses true
        --alignByOpenParenCallSite false
        --maxColumn 100


      Give it a try see if you like it.
      It's somewhat inspired by IntelliJ's default formatting settings.
      I don't know yet what to call the style.
      Thanks @user{lihaoyi} for helping out.
    @li
      Fixed bug in try/catch without curly braces, @issue(350).
    @li
      Fixed bug in function applications with lambda arguments.
    @li
      Improved multiline strings in function calls with many arguments.

@sect{0.2.8}
  @ul
    @li
      Decrease non-idempotent cases in test suite from 56 to 15.
@sect{0.2.7}
  Skipping, messed up Sonatype release.
@sect{0.2.6}
  @ul
    @li
      @lnk("43 issues closed on Github.", "https://github.com/scalameta/scalafmt/issues?q=milestone%3A0.2.6+is%3Aclosed")
    @li
      @lnk("See diff between 0.2.5 and 0.2.6 on three million lines of code.",
           "https://github.com/olafurpg/scala-repos/pull/2/files#diff-a308e735c41c50c4f716593ee29625d0R25")
      Getting unicorn? That patch is roughly 26mb uncompressed, download it
      compressed @lnk("here", "https://github.com/olafurpg/scala-repos/pull/2/files#diff-a308e735c41c50c4f716593ee29625d0R25").
      I recommend you reformat your whole project before upgrading.
    @li
      @note. See @issue(339). My previous claims that scalafmt is
      idempotent were false.
      Still, 0.2.6 fixes a bunch of idempotency issues so I definitely
      recommend you upgrade. However, I don't recommend
      you enforce that all files are formatted with scalafmt in your CI build.
    @li
      Line breaks around infix operators like @code{+ - / += >>= ^^ || &&}
      are preserved from the original input, even if that means the output
      breaks the @code{--maxColumn} limit. Why? Because infix operators are
      heavily used in DSLs, which often use special formatting layouts to
      express ideas. Instead of ruining the hard-earned formatting layout
      in the original source, I prefer to keep it until scalafmt becomes smarter.
      In future releases, I would like to add support to format at least the most
      common operators like @code{+ && || -}.
    @li
      Scalafmt will no longer make a best-effort to format files with
      deeply nested function applications that cause search state explosions.
      Instead, scalafmt will fail to format those files. Only 56 out of
      ~9.350 files (from Akka, Spark, IntelliJ Scala plugin and a few other
      projects) are affected by this change.
      Hopefully, we can lower that count to 0 with future releases.
    @li
      The Scala.js style got numerous improvements. It was even used to merge a
      @lnk("PR to scala-js-dom with a 1.800 LOC diff",
           "https://github.com/scala-js/scala-js-dom/pull/233").
      However, the Scala.js style is still experimental and needs further
      improvements to fully capture the extensive Scala.js coding style.
    @li
      This formatting layout
      @hl.scala
        function(
            argument1, argument2)

      has been removed in favor of either of these

      @hl.scala
        function(argument1,
                 argument2)
        // OR
        function(
            argument1,
            argument2)
    @li
      New flag: @code{--alignByOpenParenCallSite false} to disable the following
      formatting layout for argument lists.
      @hl.scala
        function(argument1,
                 argument2)

      Tuples will still be aligned by the opening parenthesis.
    @li
      New flag: @code{--danglingParentheses true} for users who want dangling
      parentheses. This comes at the price of not being able to
      force "config-style" arguments. I highly recommend you set
      @code{--alignByOpenParenCallSite false} in combination with this flag.
      Note that this flag is quite different from the Scalariform dangling
      parenthesis option.
    @li
      New flag: @code{--rewriteTokens from1;to1,from2;to2,...} to rewrite
      arbitrary tokens into other tokens. For example,
      @code{rewrite.tokens = ["⇒;=>,←;<-} will rewrite unicode arrows to their
      ascii equivalents. Flip the tokens to get the opposite behavior.
    @li
      New flag: @flag{spaces.afterTripleEquals = false} to get spaces after
      triple equals in cases like this
      @hl.scala
        x should === (y)
    @li
      We merged PRs from 5 contributors:
      @users(
          "i-am-the-slime",
          "williamho",
          "anna-zzz",
          "djspiewak",
          "maximn"
      ).
      We received issues from 12 contributors:
      @users(
          "TimothyKlim",
          "anna-zzz",
          "dabd",
          "densh",
          "djspiewak",
          "easel",
          "jvican",
          "mtomko",
          "nicolasstucki",
          "reactormonk",
          "sjrd",
          "windfansy"
      ).
      Thank you everyone!
    @li
      I will be traveling and mostly away from the internet in July
      so I don't expect 0.2.7 will be released until sometime in August.
      If you are interested in becoming a scalafmt maintainer, contact me
      and I will be happy to help you get setup before I leave in July.
    @li
      Last but not least, I handed in my Master's thesis.
      The 55 page report is
      @lnk("here",
           "https://geirsson.com/assets/olafur.geirsson-scalafmt-thesis.pdf"),
      if you are interested in reading all about code formatting and how scalafmt works.
      I will continue to work on scalafmt.
      However, I expect the development of will slow down considerably since
      the project will no longer be my full-time job.

@sect{0.2.5}
  @ul
    @li
      SBT plugin now formats files in parallel like the CLI.
      If you don't use the SBT plugin, you don't need to upgrade to 0.2.5.
    @li
      IntelliJ plugin now picks up configuration from @code("$HOME/.scalafmt")
      if there is no @code(".scalafmt") in a project's root directory.
      See @issue(239).

@sect{0.2.4}
  @ul
    @li
      @lnk("17 issues closed on Github.", "https://github.com/scalameta/scalafmt/issues?utf8=%E2%9C%93&q=is%3Aissue+milestone%3A0.2.4")
    @li
      @lnk("See diff between 0.2.3 and 0.2.4 on three million lines of code.",
           "https://github.com/olafurpg/scala-repos/pull/1/files#diff-34de65dbb43d071baaf87f34e40e123cL44")
      There are many new changes.
      I recommend you reformat your whole project before upgrading.
      The plan from now on is to release a diff like this for each new release.
    @li
      CLI now formats files in parallel. Formatting a large repo is around 6x
      faster on my machine with 8 virtual cores.
    @li
      Line breaking is now preserved in infix applications. Your pretty DSLs
      should not be ruined by scalafmt anymore.
    @li
      By default, scalafmt now puts a newline before every @code("with") if a class/trait/object
      definition doesn't fit in a single line. Set @code("--binPackParentConstructors true")
      to get the old behavior where scalafmt would fit as many parent constructors
      on a line as possible.
    @li
      For comprehensions, anonymous functions, tuples, var re-assignment,
      default parameter values and named arguments received a lot of
      attention and should look nicer now.
    @li
      Thanks to @user("fthomas"),
      the SBT plugin now uses @code("unmanagedSourceDirectories") instead of
      @code("scalaSource") to decide which files to format.
      This should improve your experience in Scala.js and cross-built projects.
@sect{0.2.3}
  @p
  @ul
    @li
      @lnk("5 issues closed on Github.", "https://github.com/scalameta/scalafmt/issues?utf8=%E2%9C%93&q=is%3Aissue+milestone%3A0.2.3")
    @li
      Fixes 3 issues that caused non-idempotent formatting.
      The tests now format 1.244.070 LOC @b("twice") to ensure that
      scalafmt is idempotent.
    @li
      @sect.ref{assumeStandardLibraryStripMargin} is now disabled by default for two
      reasons: 1. it may cause non-idempotent formatting in very rare cases
      and 2. it makes the false assumption that
      @code("stripMargin") comes from the standard library (discussion here @issues(170)).
      Refer to @sect.ref{assumeStandardLibraryStripMargin} to enable it at your own risk.
    @li
      IntelliJ plugin does not require restart when @code(".scalafmt") changes.
      Instead, new changes are picked up automatically and a green info bubble
      pops up.
@sect{0.2.2}

  @p
    @note. This release contains a bug, see @issue(192).
    Please hold off from upgrading.

  @p
    This release changes the formatting rules for many small cases.
    I recommend you reformat your whole project in one commit.

  @ul
    @li
      Issues closed: @issues(171, 177, 175, 183, 178, 116, 186,
      168, 165, 164, 163, 162, 161, 160, 159, 158, 157, 169, 114).
      Thank you everyone who reported bugs via Github and Gitter.
    @li
      New @code("--spacesInImportCurlyBraces") flag.

@sect{0.2.1}
  @ul
    @li
      @code("defaultWithAlign") will not jump scope @issue(152).
    @li
      @code("defaultWithAlign") now includes a lot more alignment rules,
      see the @lnk("diff against 0.2.0", "https://github.com/scalameta/scalafmt/commit/9b14be99510f4763b8ea59be91b99af4ea4f8ad7").
      and @lnk("updated test suite", "https://github.com/scalameta/scalafmt/blob/555e87cabb3caf313a5915ac6506f9a79a84457c/core/src/test/resources/align/AlignTokens.stat").
    @li
      If you had troubles with @code("--alignTokens") please try again,
      it may have been caused by @issue(151).
    @li
      @code(".scalafmt") now supports comments starting with @code("#").
    @li
      Other closed issues: @issues(148, 147, 149, 155, 153).
      Thanks for everyone who contributed bug reports via Github, Gitter
      and Reddit.

@sect{0.2.0}

  @ul
    @li
      Custom style configuration, see @sect.ref{Configuration}
    @li
      Token alignment, see @sect.ref{align.tokens}
    @li
      Closed issues: @issues( 144, 143, 138, 131, 120, 114).
    @li
      @code("ScalaFmt") was renamed to @code("Scalafmt").
    @li
      The @code("scalafmtFormat") sbt task is now @code("scalafmt").
    @li
      @code("ScalaStyle") is now @code("ScalafmtConfig").
    @li
      @code("ScalaFmt.format") and
      @code("ScalaFmt.format_!") have been replaced by a single
      @code("Scalafmt.format"). The new methods supports more flexibility
      via the @lnk("ScalafmtRunner", "https://github.com/scalameta/scalafmt/blob/555e87cabb3caf313a5915ac6506f9a79a84457c/core/src/main/scala/org/scalafmt/ScalafmtRunner.scala")
      argument.
