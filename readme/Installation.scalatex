@import Main._
@import org.scalafmt.readme.Readme._
@import org.scalafmt.config.ScalafmtConfig

@sect{Installation}

  @sect{IntelliJ}
    @lnk("Here is the plugin", "https://plugins.jetbrains.com/plugin/8236?pr=").
    You can install it directly from within IntelliJ,
    @ul
      @li
        open @code("Settings > Plugins")
      @li
        open @code("Browse repositories")
      @li
        search for @code("scalafmt")
      @li
        restart IntelliJ.

    @p
      The default shortcut is @code("Ctrl + Shift + L").
      Undo works, but not redo.

    @p
      The plugin determines which style to use in this order:
      @ol
        @li
          @code(".scalafmt.conf") in the project's root directory, if it exists
        @li
          @code("$HOME/.scalafmt.conf"), if it exists
        @li
          Otherwise, uses @code("default") style.
      For details on how @code(".scalafmt.conf") should look like, see
      @sect.ref{Configuration}.

      The scalafmt IntelliJ plugin has a "Format on save" setting.
      @ul
        @li
          To enable for current project: Settings > Tools > Scalafmt
        @li
          To enable for all future project: File > Other settings > Default settings > Scalafmt

    @p
      @note. You may need to enable balloons to get error message:
      Settings > Appearance & Behavior > Notifications > Scalafmt > Popup "Balloon".
      You need to first check "Display Balloon Notifications".

  @sect{CLI}
    There are several ways to install the CLI.

    @sect{Coursier}
      Create a tiny (~12kb) bootstrap script with coursier like this:

      @hl.xml
        coursier bootstrap com.geirsson:scalafmt-cli_2.11:@org.scalafmt.Versions.stable --main org.scalafmt.cli.Cli -o scalafmt
        ./scalafmt --version # should be @org.scalafmt.Versions.stable

      To install coursier, see @lnk("here", "https://github.com/alexarchambault/coursier#command-line").
      For more details on coursier bootstrap launchers, see @lnk("here", "https://github.com/alexarchambault/coursier#generating-bootstrap-launchers").

      @p
        @b{Recommended in CI}. Put the bootstrap script in your code repository
        to make sure everyone on your team use the same scalafmt version.
        To configure which files to format, see @sect.ref{project}.

    @sect{Linux/OSX}

      @p
        To install the CLI in Linux or OSX, run:

      @hl.xml
        sudo curl -L -o /usr/local/bin/scalafmt https://raw.githubusercontent.com/scalameta/scalafmt/master/bin/scalafmt_auto && sudo chmod +x /usr/local/bin/scalafmt && scalafmt --upgrade --help

      @sect{Arch Linux}
        @p
          Install the @code{scalafmt} package from the Arch User Repository. Voting on the package will also increase the likelyhood that the package will be merged into the community repo.

      @p
        To upgrade to the latest release, run @code{scalafmt --upgrade --help}.
        All downloaded artifacts will go to @code{$HOME/.scalafmt-bin}.

      @p
        For instructions on how to use the bash script, run @code{scalafmt --h}.
        Once installed, see @sect.ref{--help}.

      @sect{Nailgun}
        @p
          For experimental nailgun support (requires @code{ng} client on @code{$PATH}), run instead:

        @hl.xml
          sudo curl -L -o /usr/local/bin/scalafmt https://raw.githubusercontent.com/scalameta/scalafmt/master/bin/scalafmt_ng && chmod +x /usr/local/bin/scalafmt && scalafmt --upgrade --help

        @p
          Nailgun keeps scalafmt running on a local server to avoid the JVM startup penalty
          and also so scalafmt can benefit from JIT.
          This makes scalafmt up to 10x faster when formatting a single file from the CLI.
          The downside to Nailgun is that the setup is complicated and the long-running server
          needs to be restarted once in awhile.
        @p
          @b{Help wanted!}.
          For 0.5.0, I would like to migrate @code{scalafmt_ng} to python using
          @lnk("this", "https://github.com/martylamb/nailgun/blob/master/pynailgun/ng.py")
          python script as a baseline.

    @sect{Build from source}
      For the greatest performance and prettiest output.

      @ul
        @li
          @code{git clone @gitRepo}.
        @li
          @code{sbt cli/assembly}
        @li
          @code{java -jar cli/target/scala-2.11/scalafmt.jar --version}
        @li
          follow instructions in @sect.ref{scalafmt.jar}.


    @sect{scalafmt.jar}

      You can download a pre-compiled jar from the
      @lnk("releases page", repo + "/releases").

      Next, create a script named @code("scalafmt") somewhere in your
      @code("PATH") with the command:

      @hl.scala
        java -jar PATH_TO/scalafmt.jar $@@

      or, in case of Windows, a script @code("scalafmt.bat") with the command:
      @hl.scala
        java -jar PATH_TO/scalafmt.jar %*

    @sect{Homebrew/Mac OSX}
      @hl.scala
        brew install olafurpg/scalafmt/scalafmt
        scalafmt --version // should be @org.scalafmt.Versions.stable

    @sect{Windows}

      Help wanted!

    @sect{--help}

      @note. This help page is generated from the @code{master} branch and
      may include flags that have not been published yet.
      @hl.scala()

      @hl.scala(
        org.scalafmt.cli.CliArgParser.buildInfo + "\n" +
        org.scalafmt.cli.CliArgParser.scoptParser.usage)

  @sect{sbt}
    @p
      The sbt plugin is a tiny wrapper around the command line interface.

    @hl.scala
      // NOTE. If you use sbt-coursier, make sure you're on version @org.scalafmt.Versions.coursier.
      addSbtPlugin("com.geirsson" % "sbt-scalafmt" % "@org.scalafmt.Versions.stable")

    @ul
      @li
        Run @code{sbt scalafmt} to format all files in the project.
        Configure @sect.ref{project} in @code{.scalafmt.conf} to
        define which files to format.
        You can add pass any command line flags to @code{scalafmt}.
        See @sect.ref{--help} for more details.
        Example,
        @hl.scala
          sbt "scalafmt --help"
          scalafmt x.y.z
          Usage: ...
      @li
        There are three handy aliases for the @code{scalafmt} command.
        @ul
          @li
            @code{scalafmtTest -> scalafmt --test}
          @li
            @code{scalafmtDiff -> scalafmt --diff}
          @li
            @code{scalafmtDiffTest -> scalafmt --diff --test}
      @li
        The plugin will automatically pick up your @sect.ref{Configuration} in
        @code{.scalafmt.conf}.
        @p
          The configuration must be defined in .scalafmt.conf in the root directory
          of your project. Why? Because integrations like IntelliJ rely on the
          file existing there.
        @p
          If you want to define the configuration somehow differently, you can
          use some trick like this in @code{build.sbt} or from within an
          sbt plugin settings

          @hl.scala
            // define setting key to write configuration to .scalafmt.conf
            SettingKey[Unit]("scalafmtGenerateConfig") :=
              IO.write( // writes to file once when build is loaded
                file(".scalafmt.conf"),
                """style = IntelliJ
                  |# Your configuration here
                  """.stripMargin.getBytes("UTF-8")
              )
      @li
        @p
          The sbt plugin does not provide reformat on compile settings.
          @lnk("This gist", "https://gist.github.com/olafurpg/e045ef9d8a4273bae3e2ccf610636d66")
          shows a DIY plugin to enable reformat on compile.
          YMMV.
        @p
          Why isn't that gist included in the sbt plugin? See @issue(597).

  @sect{Gradle}
    It is possible to use scalafmt in gradle with the following externally maintained plugins:

    @ul
      @li
        @lnk("Spotless", "https://github.com/diffplug/spotless/tree/master/plugin-gradle#applying-scalafmt-to-scala-files")
      @li
        @lnk("gradle-scalafmt", "https://github.com/alenkacz/gradle-scalafmt")

  @sect{Maven}
    It is possible to use scalafmt in Maven with the following externally maintained plugin:
    @ul
      @li
        @lnk("mvn_scalafmt", "https://github.com/pianista215/mvn_scalafmt")

  @sect{Vim}
    @ul
      @li
        Make sure you have the @sect.ref{CLI} installed and working.
      @li
        install @lnk("vim-autoformat", "https://github.com/Chiel92/vim-autoformat")
      @li
        add to your @code(".vimrc")
        @hl.scala
          noremap <F5> :Autoformat<CR>
          let g:formatdef_scalafmt = "'scalafmt --stdin'"
          let g:formatters_scala = ['scalafmt']

    @note. You pay the JVM startup penalty on every format unless you're using
    @sect.ref{Nailgun}.

  @sect{Standalone library}
    Add to your dependencies
    @hl.scala
      libraryDependencies += "com.geirsson" %% "scalafmt-core" % "@org.scalafmt.Versions.stable"
    @p
      Use the API like this

    @repl
      org.scalafmt.Scalafmt.format("""
      object FormatMe { List(Split(Space, 0).withPolicy(SingleLineBlock(close)), Split(Newline, 1).withPolicy{ case Decision(t@@FormatToken(_, `close`, _), s) => Decision(t, List(Split(Newline, 0)))}.withIndent(2, close, Right)) }
       """).get

  @sect{Help wanted!}

    @ul
      @li
        Ensime
      @li
        Scala IDE (@lnk("help wanted!", "https://github.com/scalameta/scalafmt/issues/125"))
      @li
        Your favorite editor? Join the gitter channel.
