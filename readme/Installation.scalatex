@import Main._
@import org.scalafmt.readme.Readme._
@import org.scalafmt.config.ScalafmtConfig

@sect{Installation}

  @sect{IntelliJ}
    @lnk("Here is the plugin", "https://plugins.jetbrains.com/plugin/8236?pr=").
    You can install it directly from within IntelliJ,
    @ul
      @li
        open @code("Settings > Plugins")
      @li
        open @code("Browse repositories")
      @li
        search for @code("scalafmt")
      @li
        restart IntelliJ.

    @p
      The default shortcut is @code("Ctrl + Shift + L").
      Undo works, but not redo.

    @p
      The plugin determines which style to use in this order:
      @ol
        @li
          @code(".scalafmt.conf") in the project's root directory, if it exists
        @li
          @code("$HOME/.scalafmt.conf"), if it exists
        @li
          Otherwise, uses @code("default") style.
      For details on how @code(".scalafmt.conf") should look like, see
      @sect.ref{Configuration}.

      The scalafmt IntelliJ plugin has a "Format on save" setting.
      @ul
        @li
          To enable for current project: Settings > Tools > Scalafmt
        @li
          To enable for all future project: File > Other settings > Default settings > Scalafmt

    @p
      @note. You may need to enable balloons to get error message:
      Settings > Appearance & Behavior > Notifications > Scalafmt > Popup "Balloon".
      You need to first check "Display Balloon Notifications".

  @sect{CLI}
    There are several ways to install the CLI.

    @sect{Coursier}
      Create a tiny (~12kb) bootstrap script with coursier like this:

      @hl.xml
        coursier bootstrap com.geirsson:scalafmt-cli_2.11:@org.scalafmt.Versions.stable --main org.scalafmt.cli.Cli -o scalafmt
        ./scalafmt --version # should be @org.scalafmt.Versions.stable

      To install coursier, see @lnk("here", "https://github.com/alexarchambault/coursier#command-line").
      For more details on coursier bootstrap launchers, see @lnk("here", "https://github.com/alexarchambault/coursier#generating-bootstrap-launchers").

      @p
        @b{Recommended in CI}. Put the bootstrap script in your code repository
        to make sure everyone on your team use the same scalafmt version.
        To configure which files to format, see @sect.ref{project}.

    @sect{Linux/OSX}

      @p
        To install the CLI in Linux or OSX, run:

      @hl.xml
        sudo curl -L -o /usr/local/bin/scalafmt https://raw.githubusercontent.com/olafurpg/scalafmt/master/bin/scalafmt_auto && chmod +x /usr/local/bin/scalafmt && scalafmt --upgrade --help

      @sect{Arch Linux}
        @p
          Install the @code{scalafmt} package from the Arch User Repository. Voting on the package will also increase the likelyhood that the package will be merged into the community repo.

      @p
        To upgrade to the latest release, run @code{scalafmt --upgrade --help}.
        All downloaded artifacts will go to @code{$HOME/.scalafmt-bin}.

      @p
        For instructions on how to use the bash script, run @code{scalafmt --h}.
        Once installed, see @sect.ref{--help}.

      @sect{Nailgun}
        @p
          For experimental nailgun support (requires @code{ng} client on @code{$PATH}), run instead:

        @hl.xml
          sudo curl -L -o /usr/local/bin/scalafmt https://raw.githubusercontent.com/olafurpg/scalafmt/master/bin/scalafmt_ng && chmod +x /usr/local/bin/scalafmt && scalafmt --upgrade --help

        @p
          Nailgun keeps scalafmt running on a local server to avoid the JVM startup penalty
          and also so scalafmt can benefit from JIT.
          This makes scalafmt up to 10x faster when formatting a single file from the CLI.
          The downside to Nailgun is that the setup is complicated and the long-running server
          needs to be restarted once in awhile.
        @p
          @b{Help wanted!}.
          For 0.5.0, I would like to migrate @code{scalafmt_ng} to python using
          @lnk("this", "https://github.com/martylamb/nailgun/blob/master/pynailgun/ng.py")
          python script as a baseline.

    @sect{Build from source}
      For the greatest performance and prettiest output.

      @ul
        @li
          Clone the @lnk("repo", repo).
        @li
          Run @code("sbt cli/assembly"), master branch should pass tests.
          @note. @code{sbt assembly} (note, no cli/ prefix) will run an insane
          amounts of tests.
        @li
          @code("cli/target/scala-2.11/scalafmt.jar") should exist.
        @li
          follow instructions in @sect.ref{scalafmt.jar}.


    @sect{scalafmt.jar}

      You can also download a pre-compiled jar from the
      @lnk("releases page", repo + "/releases").

      Next, create a script named @code("scalafmt") somewhere in your
      @code("PATH") with the command:

      @hl.scala
        java -jar PATH_TO/scalafmt.jar $@@

      (experimental) You might be interested in the user contributed
      @lnk("scalafmt_auto", "https://github.com/olafurpg/scalafmt/blob/master/bin/scalafmt_auto")
      script that automatically figures out @code{PATH_TO/scalafmt.jar}
      as long as the script is placed in the @code{bin/} directory from the
      release tar ball.


    @sect{Homebrew/Mac OSX}
      @hl.scala
        brew install olafurpg/scalafmt/scalafmt
        scalafmt --version // should be @org.scalafmt.Versions.stable

    @sect{Linux/Windows/...}

      Help wanted!

    @sect{--help}

      @note. This help page is generated from the @code{master} branch and
      may include flags that have not been published yet.
      @hl.scala()

      @hl.scala(
        org.scalafmt.cli.CliArgParser.buildInfo + "\n" +
        org.scalafmt.cli.CliArgParser.scoptParser.usage)

  @sect{SBT}
    @p
      @note. I maintain the SBT plugin on a best-effort basis, so I may not respond
      to all SBT plugin related issues. If you rely on the SBT plugin,
      please consider becoming a maintainer!

    @p
      @note. The recommended way to enforce scalafmt in CI is to use @sect.ref{Coursier},
      not the SBT plugin.
    @p
      @note. The SBT plugin does not work with SBT 0.13.12 or 0.13.13 because of
      @lnk("sbt#2786", "https://github.com/sbt/sbt/issues/2786"). Please upvote that
      bug to help prioritize it.

    @hl.scala
      addSbtPlugin("com.geirsson" % "sbt-scalafmt" % "@org.scalafmt.Versions.stable")

    @ul
      @li
        @lnk("Here is an example repository using sbt plugin.",
             "https://github.com/olafurpg/sbt-scalafmt-example")
      @li
        Run @code("sbt scalafmt") to format all files in the project.
      @li
        Run @code("sbt scalafmtTest") to test whether all files are are
        properly formatted. An exception is thrown in case of failure, no
        files are formatted.
      @li
        Set @code("scalafmtConfig in ThisBuild := Some(file(\".scalafmt\"))")
        to let the plugin pick up custom style configurations from
        @code(".scalafmt") in the root directory of your project.
        For details, see @sect.ref{Configuration}.
      @li
        If you use @code("*.scala") build rules you may need to import
        @code("org.scalafmt.sbt.ScalaFmtPlugin.autoImport._").
      @li
        Add @code("reformatOnCompileSettings") to you build settings to
        enable automatically formatting files on compile.
        @b("WARNING"). This setting is very intrusive on text editors and IDEs.
        I encourage you to find a better way to incorporate scalafmt into your
        workflow.
      @li
        In case of any trouble, try to run @code("reload") and @code("clean").
      @li
        If you have a multi-project build and the custom @code(".scalafmt") configuration is
        not picked up, make sure that @code("scalafmtConfig") is defined for
        all of your projects, not only the root project.
        Use @code("show scalafmtConfig") to verify that
        @code("scalafmtConfig := Some(file(.scalafmt))")
        in all of your projects.


  @sect{Vim}
    @ul
      @li
        Make sure you have the @sect.ref{CLI} installed and working.
      @li
        install @lnk("vim-autoformat", "https://github.com/Chiel92/vim-autoformat")
      @li
        add to your @code(".vimrc")
        @hl.scala
          noremap <F5> :Autoformat<CR>
          let g:formatdef_scalafmt = "'scalafmt'"
          let g:formatters_scala = ['scalafmt']

    @note. You pay the JVM startup penalty on every format.

  @sect{Standalone library}
    Add to your dependencies
    @hl.scala
      libraryDependencies += "com.geirsson" %% "scalafmt" % "@org.scalafmt.Versions.stable"
    @p
      Use the API like this

    @repl
      org.scalafmt.Scalafmt.format("""
      object FormatMe { List(Split(Space, 0).withPolicy(SingleLineBlock(close)), Split(Newline, 1).withPolicy{ case Decision(t@@FormatToken(_, `close`, _), s) => Decision(t, List(Split(Newline, 0)))}.withIndent(2, close, Right)) }
       """).get

  @sect{Coming soon...}

    @ul
      @li
        Ensime
      @li
        Scala IDE (@lnk("help wanted!", "https://github.com/olafurpg/scalafmt/issues/125"))
      @li
        Your favorite editor? Join the gitter channel.
