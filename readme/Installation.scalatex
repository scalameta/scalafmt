@import Main._
@import org.scalafmt.readme.Readme._
@import org.scalafmt.config.ScalafmtConfig
@import org.scalafmt.{Versions => V}

@sect{Installation}

  @sect{CLI}
    The recommended way to install the @code{scalafmt} command line tool is with
    @sect.ref{Coursier}.

    @sect{Coursier}
      @ul
        @li
          To install coursier see @lnk("here", "https://github.com/coursier/coursier#command-line")
        @li
          Create a standalone executable in @code{/usr/local/bin/scalafmt}
          @hl.scala
            sudo coursier bootstrap --standalone com.geirsson:scalafmt-cli_2.12:@V.stable -o /usr/local/bin/scalafmt -f --main org.scalafmt.cli.Cli
            ./scalafmt --version # should be @org.scalafmt.Versions.stable
        @li
          Create a slim 16kb bootstrap script with
          @hl.xml
            coursier bootstrap com.geirsson:scalafmt-cli_2.11:@V.stable --main org.scalafmt.cli.Cli -o scalafmt
            ./scalafmt --version # should be @org.scalafmt.Versions.stable

        @p
          @b{Recommended in CI/Continuous Integration Server}. Put the bootstrap
          script in your code repository to make sure everyone on your team use
          the same scalafmt version. To configure which files to format,
          see @sect.ref{project}.

    @sect{Nailgun}

      Nailgun is recommended if you want to integrate @code{scalafmt} with a
      text editor like vim/Emacs/Atom/Sublime/VS Code.
      @ul
        @li
          Make sure you have a nailgun client installed. For example with @code{brew install nailgun}.
        @li
          Create a standalone executable in @code{/usr/local/bin/scalafmt_ng}
          @hl.xml
            sudo coursier bootstrap --standalone com.geirsson:scalafmt-cli_2.12:@V.stable -o /usr/local/bin/scalafmt_ng -f --main com.martiansoftware.nailgun.NGServer
            scalafmt_ng & // start nailgun in background
            ng ng-alias scalafmt org.scalafmt.cli.Cli
            ng scalafmt --version # should be @org.scalafmt.Versions.stable

      @p
        Nailgun keeps scalafmt running on a local server to avoid the JVM startup penalty
        and also so scalafmt can benefit from JIT.
        This makes scalafmt up to 10x faster when formatting a single file from the CLI.
        The downside to Nailgun is that the setup is complicated and the long-running server
        needs to be restarted once in awhile.

    @sect{--help}

      @note. This help page is generated from the @code{master} branch and
      may include flags that have not been published yet.
      @hl.scala()

      @hl.scala(
        org.scalafmt.cli.CliArgParser.buildInfo + "\n" +
        org.scalafmt.cli.CliArgParser.scoptParser.usage)

  @sect{IntelliJ}
    @lnk("Here is the plugin", "https://plugins.jetbrains.com/plugin/8236?pr=").
    You can install it directly from within IntelliJ,
    @ul
      @li
        open @code("Settings > Plugins")
      @li
        open @code("Browse repositories")
      @li
        search for @code("scalafmt")
      @li
        restart IntelliJ.

    @p
      The default shortcut is @code("Ctrl + Shift + L").
      Undo works, but not redo.

    @p
      The plugin determines which style to use in this order:
      @ol
        @li
          @code(".scalafmt.conf") in the project's root directory, if it exists
        @li
          @code("$HOME/.scalafmt.conf"), if it exists
        @li
          Otherwise, uses @code("default") style.
      For details on how @code(".scalafmt.conf") should look like, see
      @sect.ref{Configuration}.

      The scalafmt IntelliJ plugin has a "Format on save" setting.
      @ul
        @li
          To enable for current project: Settings > Tools > Scalafmt
        @li
          To enable for all future project: File > Other settings > Default settings > Scalafmt

    @p
      @note. You may need to enable balloons to get error message:
      Settings > Appearance & Behavior > Notifications > Scalafmt > Popup "Balloon".
      You need to first check "Display Balloon Notifications".

  @sect{sbt}
    @p
      NOTE. Only sbt 1.0 is supported. See @sect.ref{sbt 0.13} on how to use
      the latest scalafmt version with sbt 0.13.
    @p
      The sbt plugin is a tiny wrapper around the command line interface.

    @hl.scala
      // NOTE. If you use sbt-coursier, make sure you're on version @org.scalafmt.Versions.coursier.
      addSbtPlugin("com.geirsson" % "sbt-scalafmt" % "@org.scalafmt.Versions.stable")

    @ul
      @li
        Run @code{sbt scalafmt} to format all files in the project.
        Configure @sect.ref{project} in @code{.scalafmt.conf} to
        define which files to format.
        You can add pass any command line flags to @code{scalafmt}.
        See @sect.ref{--help} for more details.
        Example,
        @hl.scala
          sbt "scalafmt --help"
          scalafmt x.y.z
          Usage: ...
      @li
        There are three handy aliases for the @code{scalafmt} command.
        @ul
          @li
            @code{scalafmtTest -> scalafmt --test}
          @li
            @code{scalafmtDiff -> scalafmt --diff}
          @li
            @code{scalafmtDiffTest -> scalafmt --diff --test}
      @li
        The plugin will automatically pick up your @sect.ref{Configuration} in
        @code{.scalafmt.conf}.
        @p
          The configuration must be defined in .scalafmt.conf in the root directory
          of your project. Why? Because integrations like IntelliJ rely on the
          file existing there.
        @p
          If you want to define the configuration somehow differently, you can
          use some trick like this in @code{build.sbt} or from within an
          sbt plugin settings

          @hl.scala
            // define setting key to write configuration to .scalafmt.conf
            SettingKey[Unit]("scalafmtGenerateConfig") :=
              IO.write( // writes to file once when build is loaded
                file(".scalafmt.conf"),
                """style = IntelliJ
                  |# Your configuration here
                  """.stripMargin.getBytes("UTF-8")
              )
      @li
        @p
          The sbt plugin does not provide reformat on compile settings.
          @lnk("This gist", "https://gist.github.com/olafurpg/e045ef9d8a4273bae3e2ccf610636d66")
          shows a DIY plugin to enable reformat on compile.
          YMMV.
        @p
          Why isn't that gist included in the sbt plugin? See @issue(597).

  @sect{sbt 0.13}
    I recommend you try to upgrade to sbt 1.0 as soon as possible.
    However, if you are stuck on sbt 0.13, you can still the latest versions
    of scalafmt with this workaround (thanks to coursier!).

    @hl.scala
      // project/plugins.sbt
      libraryDependencies += "com.geirsson" % "scalafmt-bootstrap" % "0.6.6"
      // build.sbt
      def latestScalafmt = "@V.stable"
      commands += Command.args("scalafmt", "Run scalafmt cli.") {
        case (state, args) =>
          val Right(scalafmt) =
            org.scalafmt.bootstrap.ScalafmtBootstrap.fromVersion(latestScalafmt)
          scalafmt.main("--non-interactive" +: args.toArray)
          state
      }
      // run: sbt scalafmt

    Here is an example repo that uses this workaround:
    @lnk("https://github.com/olafurpg/sbt-scalafmt-0.13/blob/master/build.sbt")

  @sect{Gradle}
    It is possible to use scalafmt in gradle with the following externally maintained plugins:

    @ul
      @li
        @lnk("Spotless", "https://github.com/diffplug/spotless/tree/master/plugin-gradle#applying-scalafmt-to-scala-files")
      @li
        @lnk("gradle-scalafmt", "https://github.com/alenkacz/gradle-scalafmt")

  @sect{Maven}
    It is possible to use scalafmt in Maven with the following externally maintained plugin:
    @ul
      @li
        @lnk("mvn_scalafmt", "https://github.com/pianista215/mvn_scalafmt")

  @sect{Vim}
    @ul
      @li
        Make sure you have the @sect.ref{CLI} installed and working.
      @li
        install @lnk("vim-autoformat", "https://github.com/Chiel92/vim-autoformat")
      @li
        add to your @code(".vimrc")
        @hl.scala
          noremap <F5> :Autoformat<CR>
          let g:formatdef_scalafmt = "'scalafmt --stdin'"
          let g:formatters_scala = ['scalafmt']

    @note. You pay the JVM startup penalty on every format unless you're using
    @sect.ref{Nailgun}.

  @sect{Standalone library}
    Add to your dependencies
    @hl.scala
      libraryDependencies += "com.geirsson" %% "scalafmt-core" % "@org.scalafmt.Versions.stable"
      // Scala.js
      libraryDependencies += "com.geirsson" %%% "scalafmt-core" % "@org.scalafmt.Versions.stable"
    @p
      Use the API like this

    @repl
      org.scalafmt.Scalafmt.format("""
      object FormatMe { List(Split(Space, 0).withPolicy(SingleLineBlock(close)), Split(Newline, 1).withPolicy{ case Decision(t@@FormatToken(_, `close`, _), s) => Decision(t, List(Split(Newline, 0)))}.withIndent(2, close, Right)) }
       """).get

  @sect{Help wanted!}

    @ul
      @li
        Ensime
      @li
        Scala IDE (@lnk("help wanted!", "https://github.com/scalameta/scalafmt/issues/125"))
      @li
        Your favorite editor? Join the gitter channel.
