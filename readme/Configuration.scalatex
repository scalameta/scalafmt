@import Main._
@import org.scalafmt.readme.Readme._
@import org.scalafmt.config.ScalafmtConfig
@import org.scalafmt.config.ScalafmtConfig.default
@import org.scalafmt.rewrite._

@sect{Configuration}

  @p
    Configuration for scalafmt is defined in a
    plain text file @code{.scalafmt.conf} using
    @lnk("HOCON", "https://github.com/typesafehub/config") syntax.
    To reuse your configuration with IntelliJ,
    @code(".scalafmt.conf") must be placed in the root directory of your project.

  @p
    Here is an example @code(".scalafmt.conf").

    @cliFlags
      style = defaultWithAlign # For pretty alignment.
      maxColumn = 100          # For my wide 30" display.

  @p
    A note of warning. I personally use the default style, which means that the
    default style is by far the most tested and supported style.
    Most of the configuration flags are quite innocent, while some of them work
    very differently (esp. Scala.js).
    It is very difficult to guarantee that all configurations options play nicely
    together so I recommend you try not to go too crazy on this part.

  @p
    The following sections describe the most common configuration options.

  @p
    @note. If you are using scalafmt as a @sect.ref{Standalone library}, you can
    pass in a @code{ScalafmtConfig} instance, which is set to @code{ScalafmtStyle.default}
    by default.


  @sect{style}
    Option 1: @b{default}
    @fmt(ScalafmtConfig.default.copy(maxColumn = 40))
      // Column 40                           |
      // non bin packed parent constructors
      object DefaultStyle extends Parent with SecondParent with ThirdParent {
        // non bin packed arguments
        function(argument1, argument2(argument3, argument4))
        // No vertical alignment
        x match {
          case 1 => 1
          case 11 => 1
        }
      }

    Option 2: @b{defaultWithAlign}
    @fmt(ScalafmtConfig.defaultWithAlign.copy(maxColumn = 40))
      // Column 40                           |
      object DefaultWithAlignStyle extends Parent with SecondParent with ThirdParent {
        // vertical alignment
        x match {
          case 1 => 1 // align me
          case 11 => 11 // align me too

          case x => // blank line breaks alignment
        }
        for {
          x <- List(1)
          xx <- List(1, 2)
        } yield x * xx
        // A whole bunch of other
        // alignment goodies.
        // ...
      }

    Option 3: @b{IntelliJ}
    @fmt(ScalafmtConfig.intellij.copy(maxColumn = 40))
      // Column 40                           |
      // non bin packed parent constructors
      object IntelliJStyle extends Parent with SecondParent with ThirdParent {

        function(argument1, argument2)

        // continuationIndent = 2  # for call + defn site
        // align.openParenCallSite = false
        // danglingParentheses = true
        function(argument1, argument2, argument3, argument4)

        // openParenCallSite = true
        def foobar(argument1: Type1, argument2: Type2): Int = argument1 + argument2

      }

    @note. There is a Scala.js style that is super experimental and does not
    work for complicated code.

  @sect{maxColumn}
    Default: @b(default.maxColumn)

    @ul
      @li
        Keep in mind that 80 characters fit perfectly on a split laptop screen
        with regular resolution.
      @li
        Github mobile view only shows 80 characters and sometimes you might
        review code on your phone.
      @li
        Consider refactoring your code before of choosing a value above 100.

  @sect{continuationIndent.callSite}
    Default: @b(default.continuationIndent.callSite)

    @p
      Example:
      @hl.scala
        function(
          argument1 // indented by 2
        )

  @sect{continuationIndent.defnSite}
    Default: @b(default.continuationIndent.defnSite)

    @p
      Same as @code{continuationIndent.callSite} except for definition site.
      Example:
      @hl.scala
        def function(
            argument1: Type1): ReturnType // Indented by 4

  @sect{align.tokens}
    Default: @b{off}

    @p
      The style @code("defaultWithAlign") has pre-configured a variety of
      tokens that align together nicely.

      @exampleAlign
        // 40 columns                          |
        object TokenAlignment {
          x match {
            // Align by => and -> and //
            case 1 => 1 -> 2 // first
            case 11 => 11 -> 22 // second

            // A blank line separates alignment blocks.
            case `ignoreMe` => 111 -> 222
          }

          // Align assignments of similar type.
          def name = column[String]("name")
          def status = column[Int]("status")
          val x = 1
          val xx = 22

          // Align sbt module IDs.
          libraryDependencies ++= Seq(
            "org.scala-lang" % "scala-compiler" % scalaVersion.value,
          "com.lihaoyi" %% "sourcecode" % "0.1.1"
          )
        }

  @sect{// format: off}
    Disable formatting for specific regions of code by wrapping them in
    @code("// format: OFF") blocks:

    @example(org.scalafmt.util.FileOps.readFile("readme/Matrix.example"))

    To disable formatting for a whole file, put the comment at the top of
    the file.

    @ul
      @li
        the comment string is case insensitive, you can also write
        @code("// format: OFF").
      @li
        The comments @code("// @formatter:off") and @code("// @formatter:off")
        will also work, for compatibility with the IntelliJ formatter.
      @li
        Scalafmt will do it's best to resume formatting at the correct
        indentation level. It's best to enable formatting at the same level as
        when it was disabled.

  @sect{assumeStandardLibraryStripMargin}
    Default: @b(default.assumeStandardLibraryStripMargin)

    @p
      If @b{true}, the margin character @code("|") is aligned with the opening triple
      quote @code("\"\"\"") in interpolated and raw string literals.

      @example(org.scalafmt.util.FileOps.readFile("readme/stripMargin.example"),
               stripMarginStyle)

      @note. May cause non-idempotent formatting in rare cases, see @issue(192).

  @sect{docstrings}
    Default: @b(default.docstrings.toString)

    @hl.scala
      // docstrings = ScalaDoc
      /** Align by second asterisk.
        *
        */

      // docstrings = JavaDoc
      /** Align by first asterisk.
       *
       */

  @sect{newlines.alwaysBeforeTopLevelStatements}
    Default: default.newlines.alwaysBeforeTopLevelStatements

    @hl.scala
        // newlines.alwaysBeforeTopLevelStatements = false
        import org.scalafmt
        package P {
          object O {
            val x1 = 1
            val x2 = 2
            def A = "A"
            def B = "B"
          }
        }

        // newlines.alwaysBeforeTopLevelStatements = true
        import org.scalafmt

        package P {

          object O {
            val x1 = 1
            val x2 = 2

            def A = "A"

            def B = "B"
          }
        }

  @sect{newlines.sometimesBeforeColonInMethodReturnType}
    Default: @default.newlines.sometimesBeforeColonInMethodReturnType

    @hl.scala
      // Column limit                                                     |
      // newlines.sometimesBeforeColonInMethodReturnType = true
      implicit def validatedInstances[E](implicit E: Semigroup[E])
        : Traverse[Validated[E, ?]] with ApplicativeError[Validated[E, ?], E] = 2

      // newlines.sometimesBeforeColonInMethodReturnType = false
      implicit def validatedInstances[E](implicit E: Semigroup[E]): Traverse[
          Validated[E, ?]] with ApplicativeError[Validated[E, ?], E] = 2

  @sect{align.arrowEnumeratorGenerator}
    Default: @default.align.arrowEnumeratorGenerator

    @hl.scala
      // align.arrowEnumeratorGenerator = false
      for {
        x <- new Integer {
          def value = 2
        }
      } yield x

      // align.arrowEnumeratorGenerator = true
      for {
        x <- new Integer {
              def value = 2
            }
      } yield x

  @sect{binPackParentConstructors}
    Default: @default.binPack.parentConstructors

    @hl.scala
      // column limit                        |
      // binPackParentConstructors = false
      object DefaultStyle
          extends Parent
          with SecondParent
          with ThirdParent {
        // body ...
      }

      // column limit                        |
      // binPackParentConstructors = true
      object DefaultStyle
          extends Parent with SecondParent
          with ThirdParent {
        // body ...
      }

  @sect{align.openParenCallSite}
    Default: @default.align.openParenCallSite

    @hl.scala
      // Column limit |
      // align.openParenCallSite = true
      foo(arg1, arg2)

      function(arg1, // align by (
               arg2,
               arg3)
      function(
        argument1,
        argument2)

      // align.openParenCallSite = false
      foo(arg1, arg2)
      function(
        arg1, // no align by (
        arg2,
        arg3)
      function(
        argument1,
        argument2)

  @sect{lineEndings}
    Default: @b(default.lineEndings.toString)

    @ul
      @li
        @code{preserve} output will include endings included in original file (windows if there was at least one windows
        line ending, unix if there was zero occurrences of windows line endings)
      @li
        @code{unix} output will include only unix line endings
      @li
        @code{windows} output will include only windows line endings

  @sect{includeCurlyBraceInSelectChains}
    Default: @default.includeCurlyBraceInSelectChains

    @hl.scala
      // includeCurlyBraceInSelectChains = true
      List(1)
        .map { x =>
          x + 2
        }
        .filter(_ > 2)

      // includeCurlyBraceInSelectChains = false
      List(1).map { x =>
          x + 2
      }.filter(_ > 2)

    For more details, see
    @lnk("this comment", "https://github.com/olafurpg/scalafmt/issues/444#issuecomment-255215698").

  @sect{optIn.breakChainOnFirstMethodDot}
    Default: @default.optIn.breakChainOnFirstMethodDot

    @p
      If true, forces a select chain (pipeline) to break if there is a newline
      at the start of the chain.

    @hl.scala
      // original
      foo
        .map(_ + 1)
        .filter( > 2)

      // optIn.breakChainOnFirstMethodDot = true
      foo
        .map(_ + 1)
        .filter( > 2)

      // optIn.breakChainOnFirstMethodDot = false
      foo.map(_ + 1).filter( > 2)
      // note. chain starts at .foo() in a.b.foo()

    @p
      See
      @lnk("this comment", "https://github.com/olafurpg/scalafmt/issues/444#issuecomment-255215698")
      for further motivation.

  @sect{newlines.penalizeSingleSelectMultiArgList}
    Default: @default.newlines.penalizeSingleSelectMultiArgList

    @hl.scala
      // newlines.penalizeSingleSelectMultiArgList = true
      logger.elem(a,
                  b,
                  c)

      // newlines.penalizeSingleSelectMultiArgList = false
      logger
        .elem(a, b, c)

    @p
      See
      @lnk("this comment", "https://github.com/olafurpg/scalafmt/pull/611#issue-196230948")
      for further motivation.

  @sect{binPack.literalArgumentLists}
    Default: @default.binPack.literalArgumentLists

    @hl.scala
      // binPack.literalArgumentLists = true
      val secret: List[Bit] = List(0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1,
        0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1,
        0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1)

      // binPack.literalArgumentLists = false
      val secret: List[Bit] = List(
        0,
        0,
        1,
        1,
        // really long list...
        1
      )

  @sect{runner.optimizer.forceConfigStyleOnOffset}
    Default: @default.runner.optimizer.forceConfigStyleOnOffset

    @p
      Set to @code{-1} to disable. Increase number to require bigger argument
      bodies to trigger flag.

    @hl.scala
      // Before: Argument body is too big
      Account(userName = "user",
              fullName = "user@@localhost",
              mailAddress = "",
              password = "",
              isAdmin = false,
              url = None,
              registeredDate = new Date(),
              updatedDate = new Date(),
              lastLoginDate = None,
              image = image,
              isGroupAccount = false,
              isRemoved = false)
      // After: "config style"
      Account(
        userName = "user",
        fullName = "user@@localhost",
        mailAddress = "",
        password = "",
        isAdmin = false,
        url = None,
        registeredDate = new Date(),
        updatedDate = new Date(),
        lastLoginDate = None,
        image = image,
        isGroupAccount = false,
        isRemoved = false
      )

    @p
      Set @cliFlags{runner.optimizer.forceConfigStyleMinArgCount = 1} to enable
      this rule for function calls with only 1 argument
      (default = @default.runner.optimizer.forceConfigStyleMinArgCount).

    @p
      By forcing config style, scalafmt is able to greatly optimize performance
      eliminating a large number of "search state exploded" errors.
      See @lnk("these flame graphs", "https://github.com/olafurpg/scalafmt/pull/621#issue-196451803").


  @sect{rewrite.rules}
    Default: @b{disabled}

    @p
      To enable a rewrite rule, add it to the config like this @config{rewrite.rules = [SortImports]}.

    @sect(Rewrite.rewrite2name(AvoidInfix))
      @demoStyle(rewriteInfix)
        a success b
        a error (b, c)
        a map { x =>
          x + 2
        }
        "o" % "a" % "v" c(D)
        future recover {
          case e: Err => 0
        } map (_.toString)
    For more examples, see @lnk("this diff", "https://github.com/olafurpg/scala-repos/pull/18/files#diff-f4f9daffe8f0a4aee6505c4eea8493ccL120").
    Configuration contains include/exclude operator filters (those values are build in, and can't be configured outside)
    @ul
      @li
        Configure under @code{rewrite.neverInfix}, default values are in @sect.ref{Other}

    @sect(Rewrite.rewrite2name(ExpandImportSelectors))
      @demoStyle(rewriteImportSelectors)
        import a.{
            b,
            c
          }, h.{
            k, l
          }
          import d.e.{f, g}
          import a.{
              foo => bar,
              zzzz => _,
              _
            }


    @sect(Rewrite.rewrite2name(RedundantBraces))
      @demoStyle(rewriteBraces)
        object RedundantBraces {
          def foo = {
            List(1, 2, 3).sum
          }

          // stringInterpolation = true
          q"Hello ${name}"
        }
      Configuration options and default values:
      @ul
        @li
          @code{rewrite.redundantBraces.maxLines} = @rewriteBraces.rewrite.redundantBraces.maxLines
        @li
          @code{rewrite.redundantBraces.includeUnitMethods} = @rewriteBraces.rewrite.redundantBraces.includeUnitMethods
        @li
          @code{rewrite.redundantBraces.stringInterpolation} = @rewriteBraces.rewrite.redundantBraces.stringInterpolation

    @sect(Rewrite.rewrite2name(RedundantParens))
      @p
        Removes redundant parentheses in guard clauses.
      @demoStyle(rewriteParens)
        object RedundantParenthesis {
          def c(b: List[Int]): List[Int] =
            for {
              a <- b
              if (a.nonEmpty)
            } yield a
        }

    @sect(Rewrite.rewrite2name(SortImports))
      @p
        The imports are sorted by the groups: symbols, lower-case, upper-case.
      @demoStyle(rewriteImports)
        import foo.{Zilch, bar, Random, sand}

    @sect(Rewrite.rewrite2name(PreferCurlyFors))
      @p
        Replaces parentheses into curly braces in for comprehensions that
        contain multiple enumerator generators.
      @demoStyle(rewritePreferCurlyFors)
        object a {
          for(a <- as; b <- bs if b > 2)
            yield (a, b)
        }

  @sect{project}
    @p
      Configure which source files should be formatted in this project.
    @cliFlags
      # Only format files tracked by git.
      project.git = true
      # manually exclude files to format.
      project.excludeFilters = [
         regex1
         regex2
      ]
      # manually include files to format.
      project.includeFilters = [
        regex1
        regex2
      ]

  @sect{Other}

    Scalafmt has a ton of internal configuration options which I
    really don't recommend you rely on.
    However, just in case, here they are.

    @hl.scala(org.scalafmt.config.Config.toHocon(default.fields).mkString("\n"))
