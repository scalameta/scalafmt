binPack.parentConstructors = true
maxColumn = 40
<<< #370
trait SampleTrait extends A with B with C with D with E{
  self: LongNameMixin with B with C with D with EEEEEEEEE =>

  def foo: Boolean = true
}
>>>
trait SampleTrait
    extends A with B with C with D
    with E {
  self: LongNameMixin
    with B with C with D
    with EEEEEEEEE =>

  def foo: Boolean = true
}
<<< #370 scala211
runner.dialect = scala211
indent.main = 4
===
trait SampleTrait extends A with B with C with D with E{
  self: LongNameMixin with B with C with D with EEEEEEEEE =>

  def foo: Boolean = true
}
>>>
trait SampleTrait
    extends A with B with C with D
    with E {
    self: LongNameMixin
        with B with C with D
        with EEEEEEEEE =>

    def foo: Boolean = true
}
<<< #2226 enum
maxColumn = 20
runner.dialect = scala3
binPack.parentConstructors = keep
indent.withSiteRelativeToExtends = 2
===
enum A extends B(
  foo, bar
) with C
with D
>>>
enum A extends B(
      foo,
      bar
    ) with C
      with D
<<< #2633 keep with class
maxColumn = 70
binPack.preset = true
binPack.parentConstructors = keep
===
object a {
   case class TopLevelExportInfo(moduleID: String, jsName: String)(
      val pos: Position) extends ExportInfo
}
>>>
object a {
  case class TopLevelExportInfo(moduleID: String, jsName: String)(
      val pos: Position
  ) extends ExportInfo
}
<<< #2633 keep with class, !dangle
maxColumn = 70
binPack.preset = true
binPack.parentConstructors = keep
danglingParentheses.preset = false
===
object a {
   case class TopLevelExportInfo(moduleID: String, jsName: String)(
      val pos: Position) extends ExportInfo
}
>>>
object a {
  case class TopLevelExportInfo(moduleID: String, jsName: String)(
      val pos: Position) extends ExportInfo
}
<<< #2977 binpack always
binPack.parentConstructors = always
===
def method[T <: ColType]():
DTDataset[
    T with ACol with BCol with CCol with DCol with ECol
        with FCol with GCol with HCol with ICol
  ]
>>>
def method[T <: ColType](): DTDataset[
  T with ACol with BCol with CCol
    with DCol with ECol with FCol
    with GCol with HCol with ICol
]
<<< #2977 binpack never
binPack.parentConstructors = never
===
def method[T <: ColType]():
DTDataset[
    T with ACol with BCol with CCol with DCol with ECol
        with FCol with GCol with HCol with ICol
  ]
>>>
def method[T <: ColType](): DTDataset[
  T with ACol
    with BCol
    with CCol
    with DCol
    with ECol
    with FCol
    with GCol
    with HCol
    with ICol
]
<<< #2977 binpack keep
binPack.parentConstructors = keep
===
def method[T <: ColType]():
DTDataset[
    T with ACol with BCol with CCol with DCol with ECol
        with FCol with GCol with HCol with ICol
  ]
>>>
def method[T <: ColType](): DTDataset[
  T with ACol with BCol with CCol
    with DCol with ECol
    with FCol with GCol with HCol
    with ICol
]
<<< #3091 always
maxColumn = 100
runner.parser = source
binPack.parentConstructors = always
===
object CoreReflection extends {
    val u: ru.type = ru
    val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
  }
  with scala.meta.internal.trees.Reflection(
    u,
    mirror
  )
  with scala.meta.internal.tokens.Reflection
object CoreReflection extends {
    val u: ru.type = ru
    val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
  }
  with scala.meta.internal.trees.Reflection
>>>
object CoreReflection extends {
      val u: ru.type = ru
      val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
    } with scala.meta.internal.trees.Reflection(
      u,
      mirror
    ) with scala.meta.internal.tokens.Reflection
object CoreReflection extends {
      val u: ru.type = ru
      val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
    } with scala.meta.internal.trees.Reflection
<<< #3091 never
maxColumn = 100
runner.parser = source
binPack.parentConstructors = never
===
object CoreReflection extends {
    val u: ru.type = ru
    val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
  }
  with scala.meta.internal.trees.Reflection(
    u,
    mirror
  )
  with scala.meta.internal.tokens.Reflection
object CoreReflection extends {
    val u: ru.type = ru
    val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
  }
  with scala.meta.internal.trees.Reflection
>>>
object CoreReflection
    extends {
      val u: ru.type = ru
      val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
    }
    with scala.meta.internal.trees.Reflection(
      u,
      mirror
    )
    with scala.meta.internal.tokens.Reflection
object CoreReflection
    extends {
      val u: ru.type = ru
      val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
    }
    with scala.meta.internal.trees.Reflection
<<< #3091 oneline
maxColumn = 100
runner.parser = source
binPack.parentConstructors = oneline
===
object CoreReflection extends {
    val u: ru.type = ru
    val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
  }
  with scala.meta.internal.trees.Reflection(
    u,
    mirror
  )
  with scala.meta.internal.tokens.Reflection
object CoreReflection extends {
    val u: ru.type = ru
    val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
  }
  with scala.meta.internal.trees.Reflection
>>>
object CoreReflection
    extends {
      val u: ru.type = ru
      val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
    }
    with scala.meta.internal.trees.Reflection(
      u,
      mirror
    )
    with scala.meta.internal.tokens.Reflection
object CoreReflection
    extends {
      val u: ru.type = ru
      val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
    }
    with scala.meta.internal.trees.Reflection
<<< #3091 keep
maxColumn = 100
runner.parser = source
binPack.parentConstructors = keep
===
object CoreReflection extends {
    val u: ru.type = ru
    val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
  }
  with scala.meta.internal.trees.Reflection(
    u,
    mirror
  )
  with scala.meta.internal.tokens.Reflection
object CoreReflection extends {
    val u: ru.type = ru
    val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
  }
  with scala.meta.internal.trees.Reflection
>>>
object CoreReflection extends {
      val u: ru.type = ru
      val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
    }
    with scala.meta.internal.trees.Reflection(
      u,
      mirror
    )
    with scala.meta.internal.tokens.Reflection
object CoreReflection extends {
      val u: ru.type = ru
      val mirror: u.Mirror = u.runtimeMirror(classOf[scala.meta.Tree].getClassLoader)
    }
    with scala.meta.internal.trees.Reflection
<<< break before extends
maxColumn = 25
===
object foo extends bar(baz) with foo with baz
>>>
object foo
    extends bar(baz)
    with foo with baz
