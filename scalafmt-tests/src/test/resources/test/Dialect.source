runner.dialect = Sbt0137
<<< sbt
lazy val noPublish = Seq(
  publish := {},
  publishLocal := {}
)

lazy val allSettings = commonSettings ++ buildSettings ++ publishSettings

lazy val root = project
  .in(file("."))
  .settings(moduleName := "scalafmt")
  .settings(allSettings)
    .settings(noPublish)
  .aggregate(core, cli, benchmarks, scalafmtSbt, macros, readme)
  .dependsOn(core)
>>>
lazy val noPublish = Seq(
  publish := {},
  publishLocal := {}
)

lazy val allSettings = commonSettings ++ buildSettings ++ publishSettings

lazy val root = project
  .in(file("."))
  .settings(moduleName := "scalafmt")
  .settings(allSettings)
  .settings(noPublish)
  .aggregate(core, cli, benchmarks, scalafmtSbt, macros, readme)
  .dependsOn(core)
<<< #1716 shebang for ammonite
runner.dialect = scala213
align.preset = most
===
#!/usr/bin/env   amm
addSbtPlugin( "io.get-coursier" % "sbt-coursier" %  "1.0.0-M14")
addSbtPlugin( "com.eed3si9n" % "sbt-assembly" %  "0.14.3")
addSbtPlugin( "org.brianmckenna" % "sbt-wartremover" % "0.14")
>>> foo.sc
#!/usr/bin/env amm
addSbtPlugin("io.get-coursier"  % "sbt-coursier"    % "1.0.0-M14")
addSbtPlugin("com.eed3si9n"     % "sbt-assembly"    % "0.14.3")
addSbtPlugin("org.brianmckenna" % "sbt-wartremover" % "0.14")
<<< #2135 shebang for ammonite with AvoidInfix
runner.dialect = scala213
rewrite.rules = [AvoidInfix]
===
#!/usr/bin/env   amm
>>> foo.sc
#!/usr/bin/env amm
<<< #2104
runner.dialect = scala3
===
sealed trait Foo {
  def negate : - = -
}
trait -
case object - extends -
>>>
sealed trait Foo {
  def negate: - = -
}
trait -
case object - extends -
<<< #1966 reload interpreter
import mill._
interp.repositories() =
  interp.repositories() ++ Seq(coursier.MavenRepository("https://jitpack.io"))
@
@ import $ivy.`com.github.yyadavalli::mill-ensime:0.0.2`
>>> foo.sc
import mill._
interp.repositories() =
  interp.repositories() ++ Seq(coursier.MavenRepository("https://jitpack.io"))

@
import $ivy.`com.github.yyadavalli::mill-ensime:0.0.2`
<<< #2204 annotations
def myMethod(): Unit = doSomeStuff()
@main
def anotherMethod(): Unit = doOtherStuff()
>>> foo.sc
def myMethod(): Unit = doSomeStuff()
@main
def anotherMethod(): Unit = doOtherStuff()
<<< #2882 scala-3, explicit
runner.dialect = scala213
project.layout = StandardConvention
===
trait A /* comm */ :
  val cond =
   if true then
    stat1
    stat2
   else { // c1
     stat3
     stat4
     }
   end if
>>> foo/src/main/scala-3/bar.scala
test does not parse
trait A /* comm */ :
                 ^
foo/src/main/scala-3/bar.scala:1: error: [dialect scala213] ; expected but : found
<<< #2882 scala-3, implicit
runner.dialect = scala213
project.layout = StandardConvention
===
trait A /* comm */ :
  val cond =
   if true then
    stat1
    stat2
   else { // c1
     stat3
     stat4
     }
   end if
>>> foo/src/main/scala-3/bar.scala
test does not parse
trait A /* comm */ :
                 ^
foo/src/main/scala-3/bar.scala:1: error: [dialect scala213] ; expected but : found
<<< #2882 scala-2, explicit
runner.dialect = scala211
project.layout = StandardConvention
===
object a {
    foo(
      bar,
      baz, // trailing comma
    )
}
>>> foo/src/main/scala-2/bar.scala
test does not parse
    foo(
      bar,
      baz, // trailing comma
    )
  ^
foo/src/main/scala-2/bar.scala:5: error: [dialect scala211] illegal start of simple expression
<<< #2882 scala-2, implicit with 3
runner.dialect = scala3
project.layout = StandardConvention
===
object a {
  do { foo } while (bar) // unsupported in scala3
}
>>> foo/src/main/scala-2/bar.scala
test does not parse
object a {
  do { foo } while (bar) // unsupported in scala3
^
foo/src/main/scala-2/bar.scala:2: error: [dialect scala3] do {...} while (...) syntax is no longer supported
<<< #2882 scala-2, implicit with 213
runner.dialect = scala213
project.layout = StandardConvention
===
object a {
    foo(
      bar,
      baz, // trailing comma
    )
}
>>> foo/src/main/scala-2/bar.scala
object a {
  foo(
    bar,
    baz // trailing comma
  )
}
<<< #2882 scala-2.10, implicit
runner.dialect = scala211
project.layout = StandardConvention
===
case class a { // unsupported since 2.11
  def foo = 1
}
>>> foo/src/main/scala-2.10/bar.scala
test does not parse
case class a { // unsupported since 2.11
           ^
foo/src/main/scala-2.10/bar.scala:1: error: [dialect scala211] case classes must have a parameter list; try 'case class a()' or 'case object a'
<<< #2882 scala-2.13, implicit
runner.dialect = scala211
project.layout = StandardConvention
===
object a {
    foo(
      bar,
      baz, // trailing comma
    )
}
>>> foo/src/main/scala-2.13/bar.scala
test does not parse
    foo(
      bar,
      baz, // trailing comma
    )
  ^
foo/src/main/scala-2.13/bar.scala:5: error: [dialect scala211] illegal start of simple expression
<<< #2882 .sbt
runner.dialect = scala211
===
foo(
  bar,
  baz, // trailing comma
)
>>> foo/bar/baz.sbt
test does not parse
foo(
  bar,
  baz, // trailing comma
)
^
foo/bar/baz.sbt:4: error: [dialect scala211] illegal start of simple expression
