
<<< js.native def is special #108
  def uniform4fv(location: WebGLUniformLocation, v: Float32Array): Unit = js.native
>>>
def uniform4fv(location: WebGLUniformLocation,
    v: Float32Array): Unit = js.native
<<< js.native val is special #108
  val uniform4fv________________________________________________X: Unit = js.native
>>>
val uniform4fv________________________________________________X: Unit = js.native
<<< newline before closing parens #162
{
def tee(): js.Array[_ <: ReadableStream[T]] = js.native  //TODO js.Tuple2[ReadableStream[T]]
}
>>>
{
  def tee(): js.Array[_ <: ReadableStream[T]] = js.native // TODO js.Tuple2[ReadableStream[T]]
}
<<< newline before closing parens #162 with arg
{
def tee(arg: IntAAAAAAAAAAA): js.Array[_ <: ReadableStreamBBBBBBBBBBBBBBBBBBBBB[T]] = js.native  //TODO js.Tuple2[ReadableStream[T
}
>>>
{
  def tee(
      arg: IntAAAAAAAAAAA): js.Array[_ <: ReadableStreamBBBBBBBBBBBBBBBBBBBBB[T]] = js.native // TODO js.Tuple2[ReadableStream[T
}
<<< breaking precedence #164
   def getUserMedia(constraints: MediaStreamConstraints,
      success: js.Function1[MediaStream, Any],
      error: js.Function1[DOMError, Any] ): Unit = js.native
>>>
def getUserMedia(constraints: MediaStreamConstraints,
    success: js.Function1[MediaStream, Any],
    error: js.Function1[DOMError, Any]): Unit = js.native
<<< don't move body if it was on new line, #182
def a =
 js.native
>>>
def a = js.native
<<< default penalty #247, binPack=always, dangle
binPack.unsafeDefnSite = always
danglingParentheses.defnSite = true
===
{
  def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response] = js.native
}
>>>
{
  def fetch(info: RequestInfo,
      init: RequestInit = null): js.Promise[Response] = js.native
}
<<< default penalty #247, binPack=always, !dangle
binPack.unsafeDefnSite = always
danglingParentheses.defnSite = false
===
{
  def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response] = js.native
}
>>>
{
  def fetch(info: RequestInfo,
      init: RequestInit = null): js.Promise[Response] = js.native
}
<<< default penalty #247, binPack=always, !dangle, avoidInResultType
binPack.unsafeDefnSite = always
newlines.avoidInResultType = true
danglingParentheses.defnSite = false
===
{
  def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response] = js.native
}
>>>
{
  def fetch(info: RequestInfo,
      init: RequestInit = null): js.Promise[Response] = js.native
}
<<< default penalty #247, binPack=oneline, dangle
binPack.unsafeDefnSite = oneline
danglingParentheses.defnSite = true
===
{
  def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response] = js.native
}
>>>
{
  def fetch(info: RequestInfo,
      init: RequestInit = null): js.Promise[Response] = js.native
}
<<< default penalty #247, binPack=oneline, !dangle
binPack.unsafeDefnSite = oneline
danglingParentheses.defnSite = false
===
{
  def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response] = js.native
}
>>>
{
  def fetch(info: RequestInfo,
      init: RequestInit = null): js.Promise[Response] = js.native
}
<<< default penalty #247, binPack=oneline, !dangle, avoidInResultType
binPack.unsafeDefnSite = oneline
newlines.avoidInResultType = true
danglingParentheses.defnSite = false
===
{
  def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response] = js.native
}
>>>
{
  def fetch(info: RequestInfo,
      init: RequestInit = null): js.Promise[Response] = js.native
}
<<< default penalty 2 #247
  def apply(_status: Int = 200,
      _statusText: ByteString = "OK",
      _headers: HeadersInit = js.Dictionary[String]()): ResponseInit = new ResponseInit {
  ???
}
>>>
def apply(_status: Int = 200, _statusText: ByteString = "OK",
    _headers: HeadersInit = js.Dictionary[String]()): ResponseInit =
  new ResponseInit {
    ???
  }
<<< default penalty 3 #247
{
  def getRegistration(scope: String = ""): js.Promise[js.UndefOr[ServiceWorkerRegistration]] = 2
}
>>>
{
  def getRegistration(
      scope: String = ""): js.Promise[js.UndefOr[ServiceWorkerRegistration]] =
    2
}
<<< default penalty 4 #247
class RTCPeerConnection(
    configuration: js.UndefOr[RTCConfiguration] = js.undefined) extends EventTarget {
  ???
}
>>>
class RTCPeerConnection(
    configuration: js.UndefOr[RTCConfiguration] = js.undefined)
    extends EventTarget {
  ???
}
<<< column limit is holy
 {
   def insertAll(n: Int,
               elems: scala.collection.Traversable[A]): Unit = {
       array.splice(n, 0, elems.toSeq: _*)
               }
 }
>>>
{
  def insertAll(n: Int, elems: scala.collection.Traversable[A]): Unit = {
    array.splice(n, 0, elems.toSeq: _*)
  }
}
<<< config style #249
def apply(
  body: js.UndefOr[String] = js.undefined,
      dir: js.UndefOr[String] = js.undefined,
      icon: js.UndefOr[String] = js.undefined,
      lang: js.UndefOr[String] = js.undefined,
      noscreen: js.UndefOr[Boolean] = js.undefined,
      renotify: js.UndefOr[Boolean] = js.undefined,
      silent: js.UndefOr[Boolean] = js.undefined,
      sound: js.UndefOr[String] = js.undefined,
      sticky: js.UndefOr[Boolean] = js.undefined,
      tag: js.UndefOr[String] = js.undefined,
      onclick: js.UndefOr[js.Function0[Any]] = js.undefined,
      onerror: js.UndefOr[js.Function0[Any]] = js.undefined,
      vibrate: js.UndefOr[js.Array[Double]] =
        js.undefined
        ): NotificationOptions = {
        ???
        }
>>>
def apply(
    body: js.UndefOr[String] = js.undefined,
    dir: js.UndefOr[String] = js.undefined,
    icon: js.UndefOr[String] = js.undefined,
    lang: js.UndefOr[String] = js.undefined,
    noscreen: js.UndefOr[Boolean] = js.undefined,
    renotify: js.UndefOr[Boolean] = js.undefined,
    silent: js.UndefOr[Boolean] = js.undefined,
    sound: js.UndefOr[String] = js.undefined,
    sticky: js.UndefOr[Boolean] = js.undefined,
    tag: js.UndefOr[String] = js.undefined,
    onclick: js.UndefOr[js.Function0[Any]] = js.undefined,
    onerror: js.UndefOr[js.Function0[Any]] = js.undefined,
    vibrate: js.UndefOr[js.Array[Double]] = js.undefined
): NotificationOptions = {
  ???
}
<<< tuples bin packing #252
object a {
  object b {
    override def iterator: Iterator[(String, Attr)] = new Iterator[(String, Attr)] {
      ???
    }
  }
}
>>>
object a {
  object b {
    override def iterator: Iterator[(String, Attr)] =
      new Iterator[(String, Attr)] {
        ???
      }
  }
}
<<< tuples bin packing 2 #252
object a {
  object b {
    override def iterator: Iterator[AAAAAAAAAAAAAAAAAA, BBBBBBBBBBBBBBBBB, GGGGGGGGGGGGGGGGGGG, CDCCCCCCCCCCCCCCCCCC, DDDDDDDDDDDDD, EEEEEEEEEEEE, (StringAAAAAAAAAAAAAAAAAAAAAAAA, Attr)] = new Iterator[(String, Attr)] {
      ???
    }
  }
}
>>>
object a {
  object b {
    override def iterator: Iterator[AAAAAAAAAAAAAAAAAA, BBBBBBBBBBBBBBBBB, GGGGGGGGGGGGGGGGGGG, CDCCCCCCCCCCCCCCCCCC, DDDDDDDDDDDDD, EEEEEEEEEEEE, (StringAAAAAAAAAAAAAAAAAAAAAAAA, Attr)] =
      new Iterator[(String, Attr)] {
        ???
      }
  }
}
<<< weird breaking #252
object a {
  object b {
        def applyDynamicNamed(name: String)(fields: (String, Any)*): Object with Dynamic = sys.error("stub")
  }
}
>>>
object a {
  object b {
    def applyDynamicNamed(name: String)(fields: (String,
            Any)*): Object with Dynamic = sys.error("stub")
  }
}
<<< weird breaking #252, oneline
binPack.preset = oneline
===
object a {
  object b {
        def applyDynamicNamed(name: String)(fields: (String, Any)*): Object with Dynamic = sys.error("stub")
  }
}
>>>
object a {
  object b {
    def applyDynamicNamed(name: String)(fields: (String,
            Any)*): Object with Dynamic = sys.error("stub")
  }
}
<<< toFunction8 #255 avoidInResultType, sometimesBeforeColonInMethodReturnType
newlines.avoidInResultType = true
newlines.sometimesBeforeColonInMethodReturnType = true
===
  implicit def toFunction8[T1, T2, T3, T4, T5, T6, T7, T8, R](f: Function8[T1, T2, T3, T4, T5, T6, T7, T8, R]): scala.Function8[T1, T2, T3, T4, T5, T6, T7, T8, R] = (x1, x2, x3, x4, x5, x6, x7, x8) => f(x1, x2, x3, x4, x5, x6, x7, x8)
>>>
implicit def toFunction8[T1, T2, T3, T4, T5, T6, T7, T8, R](
    f: Function8[T1, T2, T3, T4, T5, T6, T7, T8, R])
    : scala.Function8[T1, T2, T3, T4, T5, T6, T7, T8, R] = (x1, x2, x3, x4, x5,
    x6, x7, x8) => f(x1, x2, x3, x4, x5, x6, x7, x8)
<<< toFunction8 #255 avoidInResultType, !sometimesBeforeColonInMethodReturnType
newlines.avoidInResultType = true
newlines.sometimesBeforeColonInMethodReturnType = false
===
  implicit def toFunction8[T1, T2, T3, T4, T5, T6, T7, T8, R](f: Function8[T1, T2, T3, T4, T5, T6, T7, T8, R]): scala.Function8[T1, T2, T3, T4, T5, T6, T7, T8, R] = (x1, x2, x3, x4, x5, x6, x7, x8) => f(x1, x2, x3, x4, x5, x6, x7, x8)
>>>
implicit def toFunction8[T1, T2, T3, T4, T5, T6, T7, T8, R](
    f: Function8[T1, T2, T3, T4, T5, T6, T7, T8,
        R]): scala.Function8[T1, T2, T3, T4, T5, T6, T7, T8, R] = (x1, x2, x3,
    x4, x5, x6, x7, x8) => f(x1, x2, x3, x4, x5, x6, x7, x8)
<<< toFunction8 #255 !avoidInResultType, sometimesBeforeColonInMethodReturnType
newlines.avoidInResultType = false
newlines.sometimesBeforeColonInMethodReturnType = true
===
  implicit def toFunction8[T1, T2, T3, T4, T5, T6, T7, T8, R](f: Function8[T1, T2, T3, T4, T5, T6, T7, T8, R]): scala.Function8[T1, T2, T3, T4, T5, T6, T7, T8, R] = (x1, x2, x3, x4, x5, x6, x7, x8) => f(x1, x2, x3, x4, x5, x6, x7, x8)
>>>
implicit def toFunction8[T1, T2, T3, T4, T5, T6, T7, T8, R](
    f: Function8[T1, T2, T3, T4, T5, T6, T7, T8, R])
    : scala.Function8[T1, T2, T3, T4, T5, T6, T7, T8, R] = (x1, x2, x3, x4, x5,
    x6, x7, x8) => f(x1, x2, x3, x4, x5, x6, x7, x8)
<<< toFunction8 #255 !avoidInResultType, !sometimesBeforeColonInMethodReturnType
newlines.avoidInResultType = false
newlines.sometimesBeforeColonInMethodReturnType = false
===
  implicit def toFunction8[T1, T2, T3, T4, T5, T6, T7, T8, R](f: Function8[T1, T2, T3, T4, T5, T6, T7, T8, R]): scala.Function8[T1, T2, T3, T4, T5, T6, T7, T8, R] = (x1, x2, x3, x4, x5, x6, x7, x8) => f(x1, x2, x3, x4, x5, x6, x7, x8)
>>>
implicit def toFunction8[T1, T2, T3, T4, T5, T6, T7, T8, R](
    f: Function8[T1, T2, T3, T4, T5, T6, T7, T8, R]): scala.Function8[T1, T2,
    T3, T4, T5, T6, T7, T8, R] = (x1, x2, x3, x4, x5, x6, x7, x8) =>
  f(x1, x2, x3, x4, x5, x6, x7, x8)
<<< toFunction22 #255
  implicit def toFunction22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, R](f: Function22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, R]): scala.Function22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, R] = (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) => f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22)
>>>
implicit def toFunction22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
    T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, R](
    f: Function22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
        T15, T16, T17, T18, T19, T20, T21, T22,
        R]): scala.Function22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, R] =
  (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17,
      x18, x19, x20, x21, x22) =>
    f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16,
        x17, x18, x19, x20, x21, x22)
<<< comment inside middle of type parameter #264 2
   def sourceMapper: js.UndefOr[js.Function1[ // scalastyle:ignore
    js.Array[JSStackTraceElem], js.Array[JSStackTraceElem]]] = js.native
>>>
def sourceMapper: js.UndefOr[js.Function1[ // scalastyle:ignore
    js.Array[JSStackTraceElem], js.Array[JSStackTraceElem]]] = js.native
<<< comment inside middle of type parameter #264 3
   def sourceMapper: js.UndefOr[ // scalastyle:ignore
    js.Array[JSStackTraceElem], js.Array[JSStackTraceElem]] = js.native
>>>
def sourceMapper: js.UndefOr[ // scalastyle:ignore
    js.Array[JSStackTraceElem], js.Array[JSStackTraceElem]] = js.native
<<< comment inside middle of type parameter #264 4
   def sourceMapper: js.UndefOr[js.Array[ // scalastyle:ignore
    JSStackTraceElem], js.Array[JSStackTraceElem]] = js.native
>>>
def sourceMapper: js.UndefOr[js.Array[ // scalastyle:ignore
        JSStackTraceElem], js.Array[JSStackTraceElem]] = js.native
<<< align by =>;Case #268
   def unwrapJavaScriptException(th: Throwable): Any = th match {
     case js.JavaScriptException(e) => e
    case _                         => th
   }
>>>
def unwrapJavaScriptException(th: Throwable): Any = th match {
  case js.JavaScriptException(e) => e
  case _                         => th
}
<<< no newline before { #305
object RTCIceCandidateInit {
  @inline
  def apply(
      candidate: js.UndefOr[String] = js.undefined,
      sdpMid: js.UndefOr[String] = js.undefined,
      sdpMLineIndex: js.UndefOr[Double] = js.undefined): RTCIceCandidateInit = {
    val result = js.Dynamic.literal()
    candidate.foreach(result.candidate = _)
    sdpMid.foreach(result.sdpMid = _)
    sdpMLineIndex.foreach(result.sdpMLineIndex = _)
    result.asInstanceOf[RTCIceCandidateInit]
  }
}
>>>
object RTCIceCandidateInit {
  @inline
  def apply(candidate: js.UndefOr[String] = js.undefined,
      sdpMid: js.UndefOr[String] = js.undefined,
      sdpMLineIndex: js.UndefOr[Double] =
        js.undefined): RTCIceCandidateInit = {
    val result = js.Dynamic.literal()
    candidate.foreach(result.candidate = _)
    sdpMid.foreach(result.sdpMid = _)
    sdpMLineIndex.foreach(result.sdpMLineIndex = _)
    result.asInstanceOf[RTCIceCandidateInit]
  }
}
<<< #496
{
def permissionState(
      options: PushSubscriptionOptions = js.native): js.Promise[PushPermissionState] = js.native
}
>>>
{
  def permissionState(
      options: PushSubscriptionOptions = js.native): js.Promise[PushPermissionState] = js.native
}
<<< #2078
object a {
  def print(optimizerHints: OptimizerHints)(
      implicit dummy: DummyImplicit): Unit = {
    if (optimizerHints != OptimizerHints.empty) {
      print("@hints(")
      print(OptimizerHints.toBits(optimizerHints).toString)
      print(") ")
    }
  }

  def print(flags: ApplyFlags)(
      implicit dummy1: DummyImplicit, dummy2: DummyImplicit): Unit = {
    if (flags.isPrivate)
      print("private::")
  }
}
>>>
object a {
  def print(optimizerHints: OptimizerHints)(
      implicit dummy: DummyImplicit): Unit = {
    if (optimizerHints != OptimizerHints.empty) {
      print("@hints(")
      print(OptimizerHints.toBits(optimizerHints).toString)
      print(") ")
    }
  }

  def print(flags: ApplyFlags)(implicit dummy1: DummyImplicit,
      dummy2: DummyImplicit): Unit = {
    if (flags.isPrivate)
      print("private::")
  }
}
<<< oneline def with keep, cfg+dangle
preset = default
newlines.source = keep
binPack.preset = oneline
danglingParentheses.preset = true
newlines.configStyleDefnSite.prefer = true
===
object a {
   override private[util] def newNode(key: K, hash: Int, value: V,
      previous: HashMap.Node[K, V], next: HashMap.Node[K, V]): HashMap.Node[K, V] = {
     new NullRejectingHashMap.Node(key, hash, value, previous, next)
   }
}
>>>
object a {
  override private[util] def newNode(key: K, hash: Int, value: V,
      previous: HashMap.Node[K, V], next: HashMap.Node[K, V])
      : HashMap.Node[K, V] = {
    new NullRejectingHashMap.Node(key, hash, value, previous, next)
  }
}
<<< oneline def with keep, cfg+!dangle
preset = default
newlines.source = keep
binPack.preset = oneline
danglingParentheses.preset = false
newlines.configStyleDefnSite.prefer = true
===
object a {
   override private[util] def newNode(key: K, hash: Int, value: V,
      previous: HashMap.Node[K, V], next: HashMap.Node[K, V]): HashMap.Node[K, V] = {
     new NullRejectingHashMap.Node(key, hash, value, previous, next)
   }
}
>>>
object a {
  override private[util] def newNode(key: K, hash: Int, value: V,
      previous: HashMap.Node[K, V], next: HashMap.Node[K, V])
      : HashMap.Node[K, V] = {
    new NullRejectingHashMap.Node(key, hash, value, previous, next)
  }
}
<<< oneline def with keep, !cfg+dangle
preset = default
newlines.source = keep
binPack.preset = oneline
danglingParentheses.preset = true
newlines.configStyleDefnSite.prefer = false
===
object a {
   override private[util] def newNode(key: K, hash: Int, value: V,
      previous: HashMap.Node[K, V], next: HashMap.Node[K, V]): HashMap.Node[K, V] = {
     new NullRejectingHashMap.Node(key, hash, value, previous, next)
   }
}
>>>
object a {
  override private[util] def newNode(key: K, hash: Int, value: V,
      previous: HashMap.Node[K, V], next: HashMap.Node[K, V])
      : HashMap.Node[K, V] = {
    new NullRejectingHashMap.Node(key, hash, value, previous, next)
  }
}
<<< oneline def with keep, !cfg+!dangle
preset = default
newlines.source = keep
binPack.preset = oneline
danglingParentheses.preset = false
newlines.configStyleDefnSite.prefer = false
===
object a {
   override private[util] def newNode(key: K, hash: Int, value: V,
      previous: HashMap.Node[K, V], next: HashMap.Node[K, V]): HashMap.Node[K, V] = {
     new NullRejectingHashMap.Node(key, hash, value, previous, next)
   }
}
>>>
object a {
  override private[util] def newNode(key: K, hash: Int, value: V,
      previous: HashMap.Node[K, V], next: HashMap.Node[K, V])
      : HashMap.Node[K, V] = {
    new NullRejectingHashMap.Node(key, hash, value, previous, next)
  }
}
<<< last comma right on maxColumn boundary, oneline
preset = default
maxColumn = 78
newlines.source = keep
binPack.preset = oneline
danglingParentheses.preset = false
newlines.configStyleDefnSite.prefer = true
===
object a {
  implicit def toFunction12[VeryVeryVeryVeryVeryVeryVeryVeryVeryLongTypeParam, R](
    f: js.Function12[VeryVeryVeryVeryVeryVeryVeryVeryVeryLongTypeParam, R])
    : scala.Function12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R] =
      (x1, x12) => f(x1, x12)
}
>>>
object a {
  implicit def toFunction12[VeryVeryVeryVeryVeryVeryVeryVeryVeryLongTypeParam,
      R](
      f: js.Function12[VeryVeryVeryVeryVeryVeryVeryVeryVeryLongTypeParam, R])
      : scala.Function12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
        R] =
    (x1, x12) => f(x1, x12)
}
<<< one of the commas right on maxColumn boundary, oneline
preset = default
maxColumn = 80
newlines.source = keep
binPack.preset = oneline
danglingParentheses.preset = false
newlines.configStyleDefnSite.prefer = true
newlines.avoidForSimpleOverflow = [tooLong, punct, slc]
===
object a {
  implicit def fromFunction17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R](f: scala.Function17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R]): js.Function17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R] = (x1: T1, x2: T2, x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9, x10: T10, x11: T11, x12: T12, x13: T13, x14: T14, x15: T15, x16: T16, x17: T17) => f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17)
}
>>>
object a {
  implicit def fromFunction17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
      T13, T14, T15, T16, T17, R](
      f: scala.Function17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
        T13, T14, T15, T16, T17, R]): js.Function17[T1, T2, T3, T4, T5, T6, T7,
    T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R] = (x1: T1, x2: T2,
      x3: T3, x4: T4, x5: T5, x6: T6, x7: T7, x8: T8, x9: T9, x10: T10,
      x11: T11, x12: T12, x13: T13, x14: T14, x15: T15, x16: T16, x17: T17) =>
    f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17)
}
<<< break at maxColumn, with overflow enabled 1
preset = default
maxColumn = 80
newlines.source = keep
binPack.preset = oneline
danglingParentheses.preset = false
newlines.configStyleDefnSite.prefer = true
newlines.avoidForSimpleOverflow = [tooLong, punct, slc]
===
object a {
  def setTimeout(handler: js.Function0[Any], interval: Double): SetTimeoutHandle = js.native
}
>>>
object a {
  def setTimeout(handler: js.Function0[Any], interval: Double): SetTimeoutHandle =
    js.native
}
<<< break at maxColumn, with overflow enabled 2
preset = default
maxColumn = 80
newlines.source = keep
binPack.preset = oneline
danglingParentheses.preset = false
newlines.configStyleDefnSite.prefer = true
newlines.avoidForSimpleOverflow = [tooLong, punct, slc]
===
object a {
  def getArrayUnderlyingTypedArrayClassRef(elemTypeRef: NonArrayTypeRef)(implicit tracking: GlobalRefTracking, pos: Position): Option[WithGlobals[VarRef]] = {
    // foo
  }
}
>>>
object a {
  def getArrayUnderlyingTypedArrayClassRef(
      elemTypeRef: NonArrayTypeRef)(implicit tracking: GlobalRefTracking,
      pos: Position): Option[WithGlobals[VarRef]] = {
    // foo
  }
}
<<< break at maxColumn, with overflow enabled 3
preset = default
maxColumn = 80
newlines.source = keep
binPack.preset = oneline
danglingParentheses.preset = false
newlines.configStyleDefnSite.prefer = true
newlines.avoidForSimpleOverflow = [tooLong, punct, slc]
===
object a {
  def foo = {
    val registry = new js_FinalizationRegistry[js_Date, String, Any]((heldValue: String) => ())
  }
}
>>>
object a {
  def foo = {
    val registry =
      new js_FinalizationRegistry[js_Date, String, Any]((heldValue: String) => ())
  }
}
