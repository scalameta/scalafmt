
<<< no align by <- #226
val k = for {
    _ <- FutureAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA(aaaaaa, bbbbbbbbbbbb, cccccccc) if one
  _ <- Future(2)
} yield ()
>>>
val k = for {
  _ <- FutureAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA(aaaaaa, bbbbbbbbbbbb,
      cccccccc) if one
  _ <- Future(2)
} yield ()
<<< handle for-yield with multi-stat body, fold
preset = default
maxColumn = 85
newlines.source = fold
binPack.preset = onelinesjs
danglingParentheses.preset = false
newlines.configStyleCallSite.prefer = true
newlines.avoidForSimpleOverflow = [tooLong, punct, slc]
===
object a {
    for {
      (errors, timeInSeconds) <- result
    } yield {
      failed += reportExecutionErrors(reporter, None, timeInSeconds, errors)
      reporter.reportRunFinished(failed, ignored, total, timeInSeconds)
    }
}
>>>
object a {
  for {
    (errors, timeInSeconds) <- result
  } yield {
    failed += reportExecutionErrors(reporter, None, timeInSeconds, errors)
    reporter.reportRunFinished(failed, ignored, total, timeInSeconds)
  }
}
<<< handle for-yield with block body, fold
preset = default
maxColumn = 85
newlines.source = fold
binPack.preset = onelinesjs
danglingParentheses.preset = false
newlines.configStyleCallSite.prefer = true
newlines.avoidForSimpleOverflow = [tooLong, punct, slc]
===
object a {
  val uncurryParams =
    for {
      paramUncurry <- foo
    } yield {
        if (isRepeated(paramUncurry))
          Some(paramUncurry)
        else
          None
    }
}
>>>
object a {
  val uncurryParams = for {
    paramUncurry <- foo
  } yield { if (isRepeated(paramUncurry)) Some(paramUncurry) else None }
}
