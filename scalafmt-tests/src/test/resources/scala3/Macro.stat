maxColumn = 40
<<< splice brace
${    locationImpl() }
>>>
${ locationImpl() }
<<< quote brace
'{   new Location() }
>>>
'{ new Location() }
<<< quote expr
${
val x   = 'expr
}
>>>
${
  val x = 'expr
}
<<< splice expr
val x   = $expr
>>>
val x = $expr
<<< splice expr
${   assertImpl('expr  ) }
>>>
${ assertImpl('expr) }
<<< splice expr2
throw new   AssertionError(s"failed assertion: ${${ showExpr(expr) }}")
>>>
throw new AssertionError(s"failed assertion: ${${ showExpr(expr) }}")
<<< functions
'{   (x: T) => ${ f('x) } }
>>>
'{ (x: T) => ${ f('x) } }
<<< unctions spliced
  (x: Expr[T]) => '{ $f($x) }
>>>
(x: Expr[T]) => '{ $f($x) }
<<< functions quoted
(  x: Expr[T]) =>   ${  'f ('x) }
>>>
(x: Expr[T]) => ${ 'f('x) } 
<<< line wrap brace
val xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = ${    locationImpl(Foooooooooooooooooooooooo()) }
>>>
val xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = ${
  locationImpl(Foooooooooooooooooooooooo())
}
<<< dollar parameter
List().map(($, a) => $.a)
>>>
List().map(($, a) => $.a)
<<< simple pattern
   body match    {  
      case '{ sum() } => Expr(0)
      case '{ sum($n) } =>        n
      case '{ sum(${Varargs(args)}: _*) } => sumExpr(args)
      case body => body
   }
>>>
body match {
  case '{ sum() }                       => Expr(0)
  case '{ sum($n) }                     => n
  case '{ sum(${ Varargs(args) }: _*) } => sumExpr(args)
  case body                             => body
}
<<< long pattern
   body match    {  
      case 
      '{ 
        sum(${Varargs(subArgs)}: _*) 
      } if aVeryLongCondition(parameter) => subArgs.flatMap(flatSumArgs)
      case body => body
   }
>>>
body match {
  case '{
        sum(${ Varargs(subArgs) }: _*)
      } if aVeryLongCondition(parameter) =>
    subArgs.flatMap(flatSumArgs)
  case body => body
}
<<< macro pattern unfold
newlines.beforeMultiline = unfold
===
body match    {  
  case 
  '{ 
    sum(${Varargs(subArgs)}: _*) 
  } if aVeryLongCondition(parameter) => subArgs.flatMap(flatSumArgs)
  case body => body
}
>>>
body match {
  case '{
        sum(${ Varargs(subArgs) }: _*)
      } if aVeryLongCondition(parameter) =>
    subArgs.flatMap(flatSumArgs)
  case body =>
    body
}
<<< macro pattern fold
newlines.beforeMultiline = fold
===
body match    {  
  case 
  '{ 
    sum(${Varargs(subArgs)}: _*) 
  } if aVeryLongCondition(parameter) => subArgs.flatMap(flatSumArgs)
  case body => body
}
>>>
body match {
  case '{
        sum(${ Varargs(subArgs) }: _*)
      } if aVeryLongCondition(parameter) => subArgs.flatMap(flatSumArgs)
  case body => body
}