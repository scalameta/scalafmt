
<<< extends with scalafmt/issues/2441
object ValueTypes:
    case object Private
        extends ClassificationValue
        with ConstantText
>>>
object ValueTypes:
  case object Private extends ClassificationValue with ConstantText
<<< typed pat scalafmt/issues/2424
  def f(s: String): Double =
   val re =  """.*(\d+).*""".r
    s match
         case re(v): String => v.toDouble
         case _ => 0.0
>>>
def f(s: String): Double =
  val re = """.*(\d+).*""".r
  s match
    case re(v): String => v.toDouble
    case _             => 0.0
<<< extends with scalafmt/issues/2479
object Outer:
  trait A

  object Foo extends A
  object Bar extends A

  /** A doc comment */
  object D extends A
>>>
object Outer:
  trait A

  object Foo extends A
  object Bar extends A

  /** A doc comment */
  object D extends A
<<< lambda partial function #2480
val f : String => PartialFunction[String, Int] = s =>
        case "Hello" =>
         5
        case "Goodbye" =>
         0
>>>
val f: String => PartialFunction[String, Int] = s =>
  case "Hello" =>
    5
  case "Goodbye" =>
    0
<<< single val in block
object Util:
  def assertPropPassed(prop: Prop): Unit =
    val _ = ""
>>>
object Util:
  def assertPropPassed(prop: Prop): Unit =
    val _ = ""

<<< macro type match 2512 
   def getTypeTreeRec(tpr: TypeRepr)(using Quotes): Expr[TypeTreeTag] = {
        tpr.asType match {
          case '[t] => getTypeTree[t]
        }
    }
>>>
def getTypeTreeRec(tpr: TypeRepr)(using Quotes): Expr[TypeTreeTag] = {
  tpr.asType match {
    case '[t] => getTypeTree[t]
  }
}
