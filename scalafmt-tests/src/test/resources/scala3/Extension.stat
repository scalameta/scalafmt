#
<<< extension method
extension [A](a: A  ) def add(b: A) = a + b
>>>
extension [A](a: A) def add(b: A) = a + b
<<< extension method wrap eparam
maxColumn = 40
===
extension [A](a: Map[A, Foooooooooooooooo[B]]) def add(b: A) = a + b
>>>
extension [A](
    a: Map[A, Foooooooooooooooo[B]]
) def add(b: A) = a + b
<<< extension method wrap tparam
maxColumn = 40
===
extension [Aaaaaaaaaaaa, Bbbbbb, Ccccccccccccc](a: Map[A, F[B]]) def add(b: A) = a + b
>>>
extension [
    Aaaaaaaaaaaa,
    Bbbbbb,
    Ccccccccccccc
](a: Map[A, F[B]]) def add(b: A) = a + b
<<< extension method wrap tparam + eparam
maxColumn = 40
===
extension [Aaaaaaaaaaaaaaaaaaaaa, Bbbbb, Ccc](a: Map[A, Fooooooooooooo[Baaaaaaaaaarrrrrrrrrrrrrrrrrrrrrrr]]) def add(b: A) = a + b
>>>
extension [
    Aaaaaaaaaaaaaaaaaaaaa,
    Bbbbb,
    Ccc
](
    a: Map[A, Fooooooooooooo[
      Baaaaaaaaaarrrrrrrrrrrrrrrrrrrrrrr
    ]]
) def add(b: A) = a + b
<<< extension method wrap uparam
maxColumn = 40
===
extension (a: A)(using c: Aaaaaaaaaaaaaaaa) def add(b: A) = a + b
>>>
extension (a: A)(using
    c: Aaaaaaaaaaaaaaaa
) def add(b: A) = a + b
<<< space before def
extension (a: A)
    def add(b: A) = a + b
>>>
extension (a: A) def add(b: A) = a + b
<<< extension method wrap def
maxColumn = 40
===
extension (a: A) def add(b: Aaaaaaaaaaaaaaaaa) = a + b
>>>
extension (a: A)
  def add(b: Aaaaaaaaaaaaaaaaa) = a + b
<<< extension method wrap def paramss
maxColumn = 40
===
extension (a: A) def add(b: Aaaaaaaaaaa, c: CCCCCCCCCCCCCC) = a + b
>>>
extension (a: A)
  def add(
      b: Aaaaaaaaaaa,
      c: CCCCCCCCCCCCCC
  ) = a + b
<<< extension group single line
extension      (a: A) { def add1      (b: A) = a + b; def add2(b: A) = a + b }
>>>
extension (a: A) { def add1(b: A) = a + b; def add2(b: A) = a + b }
<<< extension group wrap single line
extension      (a: A) { def add1      (b: Aaaaaaaaaaaaaaaaaaaaaa) = a + b; def add2(b: A) = a + b }
>>>
extension (a: A) {
  def add1(b: Aaaaaaaaaaaaaaaaaaaaaa) = a + b; def add2(b: A) = a + b
}
<<< class wrap single line - confirm consistency between extension groups and classes
class C      (a: A) { def add1      (b: Aaaaaaaaaaaaaaaaaaaaaa) = a + b; def add2(b: A) = a + b }
>>>
class C(a: A) {
  def add1(b: Aaaaaaaaaaaaaaaaaaaaaa) = a + b; def add2(b: A) = a + b
}
<<< extension group wrap eparams
maxColumn = 40
===
extension [AAaaaaaaaaaa](a: AAaaaaaaa)(using b: AAaaaaaaa) { def add1(b: A) = a + b
  def add2(b: A) = a + b
}
>>>
extension [AAaaaaaaaaaa](
    a: AAaaaaaaa
)(using b: AAaaaaaaa) {
  def add1(b: A) = a + b
  def add2(b: A) = a + b
}
<<< extension soft
maxColumn = 40
===
extension [A](extension: Path) def isScala = false
>>>
extension [A](extension: Path)
  def isScala = false
<<< extension soft apply
maxColumn = 40
===
object A{
  def extension(a : Int) = a + 1
  `extension`(1)
}
>>>
object A {
  def extension(a: Int) = a + 1
  `extension`(1)
}
<<< extension soft def
maxColumn = 40
===
extension [A](extension: Path) def extension() = ""
>>>
extension [A](extension: Path)
  def extension() = ""
<<< extension comments
maxColumn = 40
===
extension [A](cat: Cat) /* new feature */ // or this
  def a = 1
>>>
extension [A](cat: Cat)
  /* new feature */ // or this
  def a = 1
<<< extension comments brace
maxColumn = 40
===
extension [A](cat: Cat){ /* new feature */ // or this
  def a = 1
}
>>>
extension [A](
    cat: Cat
) { /* new feature */ // or this
  def a = 1
}
<<< extension multiple comments
maxColumn = 40
===
extension [A, B](a: A) /* foo */ (
  using b: B /* bar */
) /* baz */ {
  def a = 1
}
>>>
extension [A, B](a: A) /* foo */ (using
    b: B /* bar */
) /* baz */ {
  def a = 1
}
<<< extension multiple comments no brace
maxColumn = 40
===
extension [A, B](a: A) /* foo */ (
  using b: B /* bar */
) /* baz */ def a = 1
>>>
extension [A, B](a: A) /* foo */ (using
    b: B /* bar */
)
  /* baz */
  def a = 1
