
<<< simple intersection
maxColumn = 30
===
def hello(): A & B = {
    val a  : A & B
}
>>>
def hello(): A & B = {
  val a: A & B
}
<<< simple union
maxColumn = 30
===
def hello(): A | B = {
    val a  : A | B
}
>>>
def hello(): A | B = {
  val a: A | B
}
<<< long intersection
maxColumn = 30
===
def hello(): FirstTypeInTheInterSectionType & SecondTypeInTheInterSectionType & ThirdTypeInTheInterSectionType = {
    val a  : FirstTypeInTheInterSectionType & SecondTypeInTheInterSectionType 
}
>>>
def hello(): FirstTypeInTheInterSectionType &
  SecondTypeInTheInterSectionType &
  ThirdTypeInTheInterSectionType = {
  val a: FirstTypeInTheInterSectionType &
    SecondTypeInTheInterSectionType
}
<<< long union
maxColumn = 30
===
def hello(): FirstTypeInTheInterSectionType | SecondTypeInTheInterSectionType |  ThirdTypeInTheInterSectionType = {
    val a  : A | B
}
>>>
def hello(): FirstTypeInTheInterSectionType |
  SecondTypeInTheInterSectionType |
  ThirdTypeInTheInterSectionType = {
  val a: A | B
}
<<< long intersection keep
maxColumn = 30
newlines.source=keep
===
def hello(): FirstTypeInTheInterSectionType & SecondTypeInTheInterSectionType & ThirdTypeInTheInterSectionType = {
    val a  : FirstTypeInTheInterSectionType & SecondTypeInTheInterSectionType 
}
>>>
def hello()
    : FirstTypeInTheInterSectionType & SecondTypeInTheInterSectionType & ThirdTypeInTheInterSectionType = {
  val a: FirstTypeInTheInterSectionType & SecondTypeInTheInterSectionType
}
<<< long union keep
maxColumn = 30
newlines.source=keep
===
def hello(): FirstTypeInTheInterSectionType | SecondTypeInTheInterSectionType |  ThirdTypeInTheInterSectionType = {
    val a  : A | B
}
>>>
def hello()
    : FirstTypeInTheInterSectionType | SecondTypeInTheInterSectionType | ThirdTypeInTheInterSectionType = {
  val a: A | B
}
<<< long intersection param
maxColumn = 30
===
def hello(aNumberOfPossibleTypes: FirstTypeInTheInterSectionType & SecondTypeInTheInterSectionType & ThirdTypeInTheInterSectionType) = {
    val a  : FirstTypeInTheInterSectionType & SecondTypeInTheInterSectionType 
}
>>>
def hello(
    aNumberOfPossibleTypes: FirstTypeInTheInterSectionType &
      SecondTypeInTheInterSectionType &
      ThirdTypeInTheInterSectionType
) = {
  val a: FirstTypeInTheInterSectionType &
    SecondTypeInTheInterSectionType
}
<<< long union
maxColumn = 30
===
def hello(aNumberOfPossibleTypes : FirstTypeInTheInterSectionType | SecondTypeInTheInterSectionType |  ThirdTypeInTheInterSectionType) = {
    val a  : A | B
}
>>>
def hello(
    aNumberOfPossibleTypes: FirstTypeInTheInterSectionType |
      SecondTypeInTheInterSectionType |
      ThirdTypeInTheInterSectionType
) = {
  val a: A | B
}
<<< long union in type
maxColumn = 30
===
def hello(aNumberOfPossibleTypes : Type[FirstTypeInTheInterSectionType | SecondTypeInTheInterSectionType |  ThirdTypeInTheInterSectionType]) = {
    val a  : A | B
}
>>>
def hello(
    aNumberOfPossibleTypes: Type[
      FirstTypeInTheInterSectionType |
        SecondTypeInTheInterSectionType |
        ThirdTypeInTheInterSectionType
    ]
) = {
  val a: A | B
}
<<< long intersection in type
maxColumn = 30
===
def hello(aNumberOfPossibleTypes : Type[FirstTypeInTheInterSectionType & SecondTypeInTheInterSectionType &  ThirdTypeInTheInterSectionType]) = {
    val a  : A & B
}
>>>
def hello(
    aNumberOfPossibleTypes: Type[
      FirstTypeInTheInterSectionType &
        SecondTypeInTheInterSectionType &
        ThirdTypeInTheInterSectionType
    ]
) = {
  val a: A & B
}
<<< opaque type bounds
maxColumn = 20
===
opaque type VeryLongClassName <: Alpha & Beta & Gamma = AB
>>>
opaque type VeryLongClassName
  <: Alpha & Beta &
    Gamma = AB
<<< single split type bounds
maxColumn = 20
===
opaque type VeryLongClassName <: Alpha & Beta = AB
>>>
opaque type VeryLongClassName
  <: Alpha & Beta =
  AB
<<< single split type decl bounds
maxColumn = 20
===
type VeryLongClassName <: Alpha & Beta
>>>
type VeryLongClassName
  <: Alpha & Beta
