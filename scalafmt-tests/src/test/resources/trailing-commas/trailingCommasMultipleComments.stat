maxColumn = 30
trailingCommas = multiple

<<< should consider comments when adding trailing commas
def method(
    a: String,
    b: String // b comment
) = ???
>>>
def method(
    a: String,
    b: String, // b comment
) = ???


<<< should consider comments with extra whitespace when adding trailing commas
def method(
    abc: String, // abc comment
    d: String    // d comment
) = ???
>>>
def method(
    abc: String, // abc comment
    d: String, // d comment
) = ???

<<< should consider indented comments on the next line when adding trailing commas
def method(
    a: String,
    b: String
    // a comment
) = ???
>>>
def method(
    a: String,
    b: String,
    // a comment
) = ???

<<< should consider indented multiple lines of comments next line when adding trailing commas
def method(
    a: String,
    b: String
    // a comment
    // a comment
) = ???
>>>
def method(
    a: String,
    b: String,
    // a comment
    // a comment
) = ???

<<< should consider unindented comments on the next line when adding trailing commas
def method(
    a: String,
    b: String
// a comment
) = ???
>>>
def method(
    a: String,
    b: String,
// a comment
) = ???
<<< #2755 one, comma with two comments and a break between
maxColumn = 80
runner.parser = source
===
import foo.{
  b, /* c1 */
  /* c2 */ }
class foo(
  b: String, /* c1 */
  /* c2 */ ) {
  def method(
    b: String, /* c1 */
    /* c2 */ ) = ???
  method(
    b, /* c1 */
    /* c2 */ )
}
>>>
import foo.{
  b /* c1 */
  /* c2 */
}
class foo(
    b: String /* c1 */
    /* c2 */
) {
  def method(
      b: String /* c1 */
      /* c2 */
  ) = ???
  method(
    b /* c1 */
    /* c2 */
  )
}
<<< #2755 two, comma with two comments and a break between
maxColumn = 80
runner.parser = source
===
import foo.{a,
  b, /* c1 */
  /* c2 */ }
class foo(a: String,
  b: String, /* c1 */
  /* c2 */ ) {
  def method(a: String,
    b: String, /* c1 */
    /* c2 */ ) = ???
  method(a,
    b, /* c1 */
    /* c2 */ )
}
>>>
import foo.{
  a,
  b, /* c1 */
  /* c2 */
}
class foo(
    a: String,
    b: String, /* c1 */
    /* c2 */
) {
  def method(
      a: String,
      b: String, /* c1 */
      /* c2 */
  ) = ???
  method(
    a,
    b, /* c1 */
    /* c2 */
  )
}
<<< #2755 one, no comma with two comments and a break between
maxColumn = 80
runner.parser = source
===
import foo.{
  b /* c1 */
  /* c2 */ }
class foo(
  b: String /* c1 */
  /* c2 */ ) {
  def method(
    b: String /* c1 */
    /* c2 */ ) = ???
  method(
    b /* c1 */
    /* c2 */ )
}
>>>
import foo.{
  b /* c1 */
  /* c2 */
}
class foo(
    b: String /* c1 */
    /* c2 */
) {
  def method(
      b: String /* c1 */
      /* c2 */
  ) = ???
  method(
    b /* c1 */
    /* c2 */
  )
}
<<< #2755 two, no comma with two comments and a break between
maxColumn = 80
runner.parser = source
===
import foo.{a,
  b /* c1 */
  /* c2 */ }
class foo(a: String,
  b: String /* c1 */
  /* c2 */ ) {
  def method(a: String,
    b: String /* c1 */
    /* c2 */ ) = ???
  method(a,
    b /* c1 */
    /* c2 */ )
}
>>>
import foo.{
  a,
  b, /* c1 */
  /* c2 */
}
class foo(
    a: String,
    b: String, /* c1 */
    /* c2 */
) {
  def method(
      a: String,
      b: String, /* c1 */
      /* c2 */
  ) = ???
  method(
    a,
    b, /* c1 */
    /* c2 */
  )
}
<<< #2755 one, no comma
maxColumn = 80
runner.parser = source
===
import foo.{
  b /* c1 */ /* c2 */ }
class foo(
  b: String /* c1 */ /* c2 */ ) {
  def method(
    b: String /* c1 */ /* c2 */ ) = ???
  method(
    b /* c1 */ /* c2 */ )
}
>>>
import foo.{b /* c1 */ /* c2 */}
class foo(b: String /* c1 */ /* c2 */ ) {
  def method(b: String /* c1 */ /* c2 */ ) = ???
  method(b /* c1 */ /* c2 */ )
}
<<< #2755 one, no comma, no fold
maxColumn = 80
runner.parser = source
rewrite.trailingCommas.allowFolding = false
===
import foo.{
  b /* c1 */ /* c2 */ }
class foo(
  b: String /* c1 */ /* c2 */ ) {
  def method(
    b: String /* c1 */ /* c2 */ ) = ???
  method(
    b /* c1 */ /* c2 */ )
}
>>>
import foo.{b /* c1 */ /* c2 */}
class foo(b: String /* c1 */ /* c2 */ ) {
  def method(b: String /* c1 */ /* c2 */ ) = ???
  method(b /* c1 */ /* c2 */ )
}
<<< #2755 one, no comma, no fold, binpack
maxColumn = 80
runner.parser = source
binPack.preset = true
importSelectors = binPack
rewrite.trailingCommas.allowFolding = false
===
import foo.{
  b /* c1 */ /* c2 */ }
class foo(
  b: String /* c1 */ /* c2 */ ) {
  def method(
    b: String /* c1 */ /* c2 */ ) = ???
  method(
    b /* c1 */ /* c2 */ )
}
>>>
import foo.{b /* c1 */ /* c2 */}
class foo(b: String /* c1 */ /* c2 */ ) {
  def method(b: String /* c1 */ /* c2 */ ) = ???
  method(b /* c1 */ /* c2 */ )
}
<<< #2755 two, no comma
maxColumn = 80
runner.parser = source
===
import foo.{a,
  b /* c1 */ /* c2 */ }
class foo(a: String,
  b: String /* c1 */ /* c2 */ ) {
  def method(a: String,
    b: String /* c1 */ /* c2 */ ) = ???
  method(a,
    b /* c1 */ /* c2 */ )
}
>>>
import foo.{a, b /* c1 */ /* c2 */}
class foo(a: String, b: String /* c1 */ /* c2 */ ) {
  def method(a: String, b: String /* c1 */ /* c2 */ ) = ???
  method(a, b /* c1 */ /* c2 */ )
}
<<< #2755 two, no comma, no fold
maxColumn = 80
runner.parser = source
rewrite.trailingCommas.allowFolding = false
===
import foo.{a,
  b /* c1 */ /* c2 */ }
class foo(a: String,
  b: String /* c1 */ /* c2 */ ) {
  def method(a: String,
    b: String /* c1 */ /* c2 */ ) = ???
  method(a,
    b /* c1 */ /* c2 */ )
}
>>>
import foo.{
  a,
  b, /* c1 */ /* c2 */
}
class foo(
    a: String,
    b: String, /* c1 */ /* c2 */
) {
  def method(
      a: String,
      b: String, /* c1 */ /* c2 */
  ) = ???
  method(
    a,
    b, /* c1 */ /* c2 */
  )
}
<<< #2755 two, no comma, no fold, binPack, cfgStyle
maxColumn = 80
runner.parser = source
binPack.preset = true
importSelectors = binPack
newlines.configStyleCallSite.prefer = true
newlines.configStyleDefnSite.prefer = true
rewrite.trailingCommas.allowFolding = false
===
import foo.{a,
  b /* c1 */ /* c2 */ }
class foo(a: String,
  b: String /* c1 */ /* c2 */ ) {
  def method(a: String,
    b: String /* c1 */ /* c2 */ ) = ???
  method(a,
    b /* c1 */ /* c2 */ )
}
>>>
import foo.{
  a, b, /* c1 */ /* c2 */
}
class foo(
    a: String, b: String, /* c1 */ /* c2 */
) {
  def method(
      a: String, b: String, /* c1 */ /* c2 */
  ) = ???
  method(
    a, b, /* c1 */ /* c2 */
  )
}
<<< #2755 two, no comma, no fold, binPack, !cfgStyle
maxColumn = 80
runner.parser = source
binPack.preset = true
importSelectors = binPack
newlines.configStyleCallSite.prefer = false
newlines.configStyleDefnSite.prefer = false
rewrite.trailingCommas.allowFolding = false
===
import foo.{a,
  b /* c1 */ /* c2 */ }
class foo(a: String,
  b: String /* c1 */ /* c2 */ ) {
  def method(a: String,
    b: String /* c1 */ /* c2 */ ) = ???
  method(a,
    b /* c1 */ /* c2 */ )
}
>>>
import foo.{
  a, b, /* c1 */ /* c2 */
}
class foo(
    a: String, b: String, /* c1 */ /* c2 */
) {
  def method(
      a: String, b: String, /* c1 */ /* c2 */
  ) = ???
  method(
    a, b, /* c1 */ /* c2 */
  )
}
