maxColumn = 30
trailingCommas = multiple
danglingParentheses.preset = false
<<< should add a trailing comma on the last argument
def method(
    a: String,
    b: String
)
>>>
def method(
    a: String,
    b: String,
)
<<< should add a trailing comma on the last repeated argument
def method(
    a: String,
    b: String*
) =
  method(
    a,
    b: _*
  )
>>>
def method(
    a: String,
    b: String*
) =
  method(
    a,
    b: _*
  )
<<< should add a trailing comma on the only repeated argument
def method(
    b: String*
) =
  method(
    b: _*
  )
>>>
def method(
    b: String*
) =
  method(
    b: _*
  )
<<< should not add a trailing comma when breaking into multiple lines
def method(a: String, b: String)
>>>
def method(
    a: String,
    b: String)

<<< should not add a trailing comma when not breaking into multiple lines
def m(a: Int, b: Int)
>>>
def m(a: Int, b: Int)

<<< should add trailing commas to tuples
val t = (
  a,
  b
)
>>>
val t = (
  a,
  b,
)
<<< #1667 test various scenarios
object a {
  class a[
   t1,
   t2 // comment
  ](a1: Int,
    a2: Int // comment
  )(
    b1: String,
    b2: String // comment
  )(implicit
    c1: SomeType1,
    c2: SomeType2 // comment
  ) {
    def this(
      a1: Int,
      a2: Int // comment
    )(
      b1: String,
      b2: String // comment
    )(implicit
      c1: SomeType1,
      c2: SomeType2 // comment
    ) = this(
      a1,
      a2 // comment
    ) (
      b1,
      b2 // comment
    )
  }
}
>>>
object a {
  class a[
      t1,
      t2, // comment
  ](
      a1: Int,
      a2: Int, // comment
  )(
      b1: String,
      b2: String, // comment
  )(implicit
      c1: SomeType1,
      c2: SomeType2, // comment
  ) {
    def this(
        a1: Int,
        a2: Int, // comment
    )(
        b1: String,
        b2: String, // comment
    )(implicit
        c1: SomeType1,
        c2: SomeType2, // comment
    ) = this(
      a1,
      a2, // comment
    )(
      b1,
      b2, // comment
    )
  }
}
<<< #1703
object Foo {
  def foo(): Unit = ()

  def run(): Thread = {
    new Thread( /*c1*/ )(() => foo())
  }
}
>>>
object Foo {
  def foo(): Unit = ()

  def run(): Thread = {
    new Thread( /*c1*/ )(() =>
      foo())
  }
}
