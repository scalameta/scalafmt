maxColumn = 30
align.preset = none
danglingParentheses.preset = true
trailingCommas = keep

<<< should preserve the lack of trailing commas
def method(
    a: String,
    b: String
)
>>>
def method(
    a: String,
    b: String
)

<<< should preserve the presence of trailing commas
def method(
    a: String,
    b: String,
)
>>>
def method(
    a: String,
    b: String,
)

<<< should not add a trailing comma when breaking into multiple lines
def method(a: String, b: String)
>>>
def method(
    a: String,
    b: String
)
<<< should remove trailing comma when folding
def a(b: Int,
 c: Int,
)
>>>
def a(b: Int, c: Int)
<<< keep, do not fold
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int,
 c: Int,
)
>>>
def a(
    b: Int,
    c: Int,
)
<<< keep, do not fold, binpack
binPack.preset = true
importSelectors = binPack
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int,
 c: Int,
)
>>>
def a(
    b: Int, c: Int,
)
<<< should remove trailing comma when folding, with comment
maxColumn = 40
danglingParentheses.preset = false
===
def a(b: Int, c: Int,
 /* comment */ )
>>>
def a(b: Int, c: Int /* comment */ )
<<< keep, do not fold, with comment after break
maxColumn = 40
danglingParentheses.preset = false
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int, c: Int,
 /* comment */ )
>>>
def a(
    b: Int,
    c: Int,
    /* comment */
)
<<< keep, do not fold, with comment after break, binpack
maxColumn = 40
binPack.preset = true
importSelectors = binPack
danglingParentheses.preset = false
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int, c: Int,
 /* comment */ )
>>>
def a(
    b: Int, c: Int, /* comment */
)
<<< keep, do not fold, with comment before break
maxColumn = 40
danglingParentheses.preset = false
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int, c: Int, /* comment */
)
>>>
def a(
    b: Int,
    c: Int, /* comment */
)
<<< keep, do not fold, with comment before break, binpack
maxColumn = 40
binPack.preset = true
importSelectors = binPack
danglingParentheses.preset = false
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int, c: Int, /* comment */
)
>>>
def a(
    b: Int, c: Int, /* comment */
)
<<< should remove trailing comma when folding, with spaces
spaces.inParentheses = true
===
def a(b: Int,
 c: Int,
)
>>>
def a( b: Int, c: Int )
<<< keep, do not fold, with spaces
spaces.inParentheses = true
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int,
 c: Int,
)
>>>
def a(
    b: Int,
    c: Int,
)
<<< keep, do not fold, with spaces, binpack
binPack.preset = true
importSelectors = binPack
spaces.inParentheses = true
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int,
 c: Int,
)
>>>
def a(
    b: Int, c: Int,
)
<<< should remove trailing comma when folding, with spaces and comment
spaces.inParentheses = true
maxColumn = 40
danglingParentheses.preset = false
===
def a(b: Int, c: Int,
 /* comment */ )
>>>
def a( b: Int, c: Int /* comment */ )
<<< keep, do not fold, with spaces and comment after break
spaces.inParentheses = true
maxColumn = 40
danglingParentheses.preset = false
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int, c: Int,
 /* comment */ )
>>>
def a(
    b: Int,
    c: Int,
    /* comment */
)
<<< keep, do not fold, with spaces and comment after break, binpack
spaces.inParentheses = true
maxColumn = 40
binPack.preset = true
importSelectors = binPack
danglingParentheses.preset = false
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int, c: Int,
 /* comment */ )
>>>
def a(
    b: Int, c: Int, /* comment */
)
<<< keep, do not fold, with spaces and comment before break
spaces.inParentheses = true
maxColumn = 40
danglingParentheses.preset = false
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int, c: Int, /* comment */
)
>>>
def a(
    b: Int,
    c: Int, /* comment */
)
<<< keep, do not fold, with spaces and comment before break, binpack
spaces.inParentheses = true
maxColumn = 40
binPack.preset = true
importSelectors = binPack
danglingParentheses.preset = false
rewrite.trailingCommas.allowFolding = false
===
def a(b: Int, c: Int, /* comment */
)
>>>
def a(
    b: Int, c: Int, /* comment */
)
<<< keep, do not fold, with spaces and two comments after break
spaces.inParentheses = true
maxColumn = 40
danglingParentheses.preset = false
===
def a(b: Int, c: Int,
 /* comment */
  /* c1 */ )
>>>
def a(
    b: Int,
    c: Int,
    /* comment */
    /* c1 */ )
<<< keep, do not fold, with spaces and two comments with break in between
spaces.inParentheses = true
maxColumn = 40
danglingParentheses.preset = false
===
def a(b: Int, c: Int, /* comment */
  /* c1 */ )
>>>
def a(
    b: Int,
    c: Int, /* comment */
    /* c1 */ )
<<< keep, do not fold, with spaces and one comment without break
spaces.inParentheses = true
maxColumn = 40
danglingParentheses.preset = false
===
def a(b: Int, c: Int, /* comment */
 )
>>>
def a(
    b: Int,
    c: Int, /* comment */
)
<<< #2755 keep, comma, no comment
maxColumn = 100
rewrite.trailingCommas.allowFolding = false
===
object a {
  def longFunctionName(a: Int, b: Int,
                    ) = a + b
}
>>>
object a {
  def longFunctionName(
      a: Int,
      b: Int,
  ) = a + b
}
<<< #2755 keep, comma, comment
maxColumn = 100
===
object a {
  def longFunctionName(a: Int, b: Int, /* c1 */
    ) = a + b

  def longFunctionName(a: Int, b: Int, /* c1 */
    /* c2 */ ) = a + b
}
>>>
object a {
  def longFunctionName(
      a: Int,
      b: Int, /* c1 */
  ) = a + b

  def longFunctionName(
      a: Int,
      b: Int, /* c1 */
      /* c2 */
  ) = a + b
}
<<< #2755 keep, no comma, no comment
maxColumn = 100
===
object a {
  def longFunctionName2(
    a: Int,
    b: Int) =
      a + b
}
>>>
object a {
  def longFunctionName2(a: Int, b: Int) =
    a + b
}
<<< #2755 keep, no comma, comment
maxColumn = 100
===
object a {
  def longFunctionName2(
    a: Int,
    b: Int /* c */ ) =
      a + b
}
>>>
object a {
  def longFunctionName2(a: Int, b: Int /* c */ ) =
    a + b
}
<<< #2755 keep, no comma, no comment, config style
maxColumn = 100
===
object a {
  def longFunctionName2(
    a: Int,
    b: Int
  ) = a + b
}
>>>
object a {
  def longFunctionName2(
      a: Int,
      b: Int
  ) = a + b
}
<<< #2755 keep, no comma, comment, config style
maxColumn = 100
===
object a {
  def longFunctionName2(
    a: Int,
    b: Int /* c */
  ) = a + b
}
>>>
object a {
  def longFunctionName2(
      a: Int,
      b: Int /* c */
  ) = a + b
}
<<< #3663 tuple
val x = (
  "a", 
  "b",
)
>>>
val x = (
  "a",
  "b",
)
<<< #3663 enclosed literal
val x = ( "a", 
)
>>>
val x = ("a")
<<< #3663 enclosed lambda
val x = ( x => x + 1,
)
>>>
val x = (x => x + 1)
<<< #3663 enclosed lambda 1
val x = (
 x => x + 1,
)
>>>
val x = (
  x => x + 1,
    )
