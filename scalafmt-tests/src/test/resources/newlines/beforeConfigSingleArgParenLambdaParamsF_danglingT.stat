newlines.alwaysBeforeCurlyBraceLambdaParams = false
danglingParentheses.callSite = true
<<< 1: multi-arg multi-stmt lambda call
def f = {
  something.call (
     (x, y) => {
       g(x)
       g(y)
     }
  )
}
>>>
def f = {
  something.call((x, y) => {
    g(x)
    g(y)
  })
}
<<< 1.1: multi-arg multi-stmt lambda call with comment
def f = {
  something.call (
     (x, y) => { // comment
       g(x)
       g(y)
     }
  )
}
>>>
def f = {
  something.call((x, y) => { // comment
    g(x)
    g(y)
  })
}
<<< 1.2: multi-arg multi-stmt lambda call with comment
def f = {
  something.call (
     (x, y) => /* comment */     {
       g(x)
       g(y)
     }
  )
}
>>>
def f = {
  something.call((x, y) => /* comment */ {
    g(x)
    g(y)
  })
}
<<< 1.3: multi-arg multi-stmt lambda call with comment
def f = {
  something.call (
     (x, y) => // comment
     {
       g(x)
       g(y)
     }
  )
}
>>>
def f = {
  something.call((x, y) => // comment
    {
      g(x)
      g(y)
    }
  )
}
<<< 1.4: multi-arg multi-stmt lambda call with multiple split comments
def f = {
  something.call (
     (x, y) =>
     // comment
     /* comment */
     {
       g(x)
       g(y)
     }
  )
}
>>>
def f = {
  something.call((x, y) =>
    // comment
    /* comment */ {
      g(x)
      g(y)
    }
  )
}
<<< 1.5: multi-arg multi-stmt lambda call with multiple attached comments
def f = {
  something.call (
     (x, y) =>     // comment
     /* comment */
     {
       g(x)
       g(y)
     }
  )
}
>>>
def f = {
  something.call((x, y) => // comment
    /* comment */ {
      g(x)
      g(y)
    }
  )
}
<<< 1.6: multi-arg multi-stmt lambda call with multiple inline comments
def f = {
  something.call (
     (x, y) =>     /* comment1 */
     /* comment2 */
     {
       g(x)
       g(y)
     }
  )
}
>>>
def f = {
  something.call((x, y) => /* comment1 */
    /* comment2 */ {
      g(x)
      g(y)
    }
  )
}
<<< 1.61: multi-arg single-stmt lambda call with multiple inline comments
def f = {
  something.call (
     (x, y) =>     /* comment1 */ /* comment2 */
     /* comment3 */
       g(x)
  )
}
>>>
def f = {
  something.call((x, y) => /* comment1 */ /* comment2 */
    /* comment3 */
    g(x)
  )
}
<<< 1.7: multi-arg multi-stmt lambda call with long params
def f = {
  something.call ((aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbbbb) =>     /* comment1 */
     /* comment2 */
     {
       g(x)
       g(y)
     }
  )
}
>>>
def f = {
  something.call(
    (aaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbbbb) =>
      /* comment1 */
      /* comment2 */ {
        g(x)
        g(y)
      }
  )
}
<<< 1.8: multi-arg multi-stmt lambda call with long params and block with short comment
def f = {
  something.call ((aaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbb) => { // comment
       g(x)
       g(y)
   }
  )
}
>>>
def f = {
  something.call(
    (aaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbb) => { // comment
      g(x)
      g(y)
    }
  )
}
<<< 1.9: multi-arg multi-stmt lambda call with long params and block with long comment
def f = {
  something.call ((aaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbb) => { // long comment
       g(x)
       g(y)
   }
  )
}
>>>
def f = {
  something.call(
    (aaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbb) =>
      { // long comment
        g(x)
        g(y)
      }
  )
}
<<< 1.10: multi-arg multi-stmt lambda call with long params and block with long comment
def f = {
  something.call ((aaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbb) => { val x = 1; x + 1
    } match { case 1 => 1; case _ => 0 })
}
>>>
def f = {
  something.call((aaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbb) =>
    { val x = 1; x + 1 } match { case 1 => 1; case _ => 0 }
  )
}
<<< 1.11: multi-stat block lambda called via infix
def f = {
          activeValuesIterator foreach (v => {
            val nn = canNormS(v); sum += nn * nn
          })
}
>>>
def f = {
  activeValuesIterator foreach (v => {
    val nn = canNormS(v); sum += nn * nn
  })
}
<<< 1.12: single-stat block lambda called via infix
maxColumn = 37
===
def f = {
          activeValuesIterator foreach (v => {
            1 + 1
          })
}
>>>
def f = {
  activeValuesIterator foreach (
    v => {
      1 + 1
    }
  )
}
<<< 2: single-arg single-stmt block long-body lambda call
def f = {
  something.call (
     x => {
       g("some very very very very long string which exceeds 80 columns")
     }
  )
}
>>>
def f = {
  something.call(x => {
    g("some very very very very long string which exceeds 80 columns")
  })
}
<<< 3: single-arg single-stmt non-block long-body lambda call
def f = {
  something.call (
     x =>
       g("some very very very very long string which exceeds 80 columns")
  )
}
>>>
def f = {
  something.call(x =>
    g("some very very very very long string which exceeds 80 columns")
  )
}
<<< 4: single-arg single-stmt non-block multi-line long-body lambda call
def f = {
  something.call (
     x => // comment
       g(
         "some very very very very long string which exceeds 80 columns" +
         " with some extra information"
       )
  )
}
>>>
def f = {
  something.call(x => // comment
    g(
      "some very very very very long string which exceeds 80 columns" +
        " with some extra information"
    )
  )
}
<<< 5: multi-arg single-stmt block long-body lambda call
def f = {
  something.call (
     (x,y) => {
       g("some very very very very long string which we don't want to be split")
     }
  )
}
>>>
def f = {
  something.call((x, y) => {
    g("some very very very very long string which we don't want to be split")
  })
}
<<< 6: multi-arg multi-stmt long-body lambda call
def f = {
  something.call (
     (x,y) => {
       g(x)
       g(y)
       g("some very very very very long string which we don't want to be split")
     }
  )
}
>>>
def f = {
  something.call((x, y) => {
    g(x)
    g(y)
    g("some very very very very long string which we don't want to be split")
  })
}
<<< 7: multi-long-arg single-stmt short-body lambda call
def f = {
  something_very_very_very_long.call_another_long_method ((a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) =>
       g(x)
  )
}
>>>
def f = {
  something_very_very_very_long.call_another_long_method(
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) => g(x)
  )
}
<<< 8: multi-long-arg single-stmt longer-body lambda call
def f = {
  something_very_very_very_long.call_another_long_method ((a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) =>
       this_method_is_also_not_very_short(x, y, z)
  )
}
>>>
def f = {
  something_very_very_very_long.call_another_long_method(
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) =>
      this_method_is_also_not_very_short(x, y, z)
  )
}
<<< 8.1: multi-long-arg single-stmt longest-body lambda call
def f = {
  something_very_very_very_long.call_another_long_method ((a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) =>
       this_method_is_also_not_very_short(x, y, z)
  )
}
>>>
def f = {
  something_very_very_very_long.call_another_long_method(
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) =>
      this_method_is_also_not_very_short(x, y, z)
  )
}
<<< 9: single-arg single-stmt short-body lambda call
def f = {
  something.call (
  x =>
       g(x)
  )
}
>>>
def f = {
  something.call(x => g(x))
}
<<< 10: single-arg single-stmt short-splittable-body lambda call
def f = {
  something.call (
  x =>
       g.copy(a = x)
  )
}
>>>
def f = {
  something.call(x => g.copy(a = x))
}
<<< 11: single-arg single-stmt medium-splittable-body lambda call
def f = {
  something.call (
  x =>
       g.copy(a = "some very very very very long string which we don't want to be split")
  )
}
>>>
def f = {
  something.call(x =>
    g.copy(a =
      "some very very very very long string which we don't want to be split"
    )
  )
}
<<< 12: single-arg single-stmt long-splittable-body lambda call
def f = {
  something.call (
  x =>
  g.copy(a = "some very very very very long string which we don't want to be split at all")
  )
}
>>>
def f = {
  something.call(x =>
    g.copy(a =
      "some very very very very long string which we don't want to be split at all"
    )
  )
}
<<< 13: single-arg single-stmt medium-splittable-body with multiple args lambda call
def f = {
  something.call (
  x =>
       g.copy(a = "some very very very very long string which we don't want to be split",
              b = "some very very very very long string which we don't want to be split")
  )
}
>>>
def f = {
  something.call(x =>
    g.copy(
      a =
        "some very very very very long string which we don't want to be split",
      b = "some very very very very long string which we don't want to be split"
    )
  )
}
<<< 14: lambda with many nested apply
       EventFilter[ActorInitializationException](occurrences = 1) intercept {
         intercept[akka.actor.ActorInitializationException] {
          wrap(
            result ⇒
              actorOf(Props(new OuterActor(actorOf(
                 Props(promiseIntercept(new FailingInnerActor)(result)))))))
         }

         contextStackMustBeEmpty()
       }
>>>
EventFilter[ActorInitializationException](occurrences = 1) intercept {
  intercept[akka.actor.ActorInitializationException] {
    wrap(result ⇒
      actorOf(
        Props(
          new OuterActor(
            actorOf(Props(promiseIntercept(new FailingInnerActor)(result)))
          )
        )
      )
    )
  }

  contextStackMustBeEmpty()
}
<<< 15: lambda with many nested apply using braces for comparison
       EventFilter[ActorInitializationException](occurrences = 1) intercept {
         intercept[akka.actor.ActorInitializationException] {
          wrap{
            result ⇒
              actorOf(Props(new OuterActor(actorOf(
                 Props(promiseIntercept(new FailingInnerActor)(result))))))}
         }

         contextStackMustBeEmpty()
       }
>>>
EventFilter[ActorInitializationException](occurrences = 1) intercept {
  intercept[akka.actor.ActorInitializationException] {
    wrap { result ⇒
      actorOf(
        Props(
          new OuterActor(
            actorOf(Props(promiseIntercept(new FailingInnerActor)(result)))
          )
        )
      )
    }
  }

  contextStackMustBeEmpty()
}
<<< 16: prefer split on equals vs split on arrow in includedTerms
     terms.foreach {
       case Deletion(term: Term) =>
         term match {
           case inner: ColumnRef =>
             includedTerms = includedTerms.filter(_ != Seq(inner.value))
           case ColumnInteraction(cols) =>
             val fromInteraction = expandInteraction(schema, cols).map(_.toSet)
            includedTerms =
              includedTerms.filter(t => !fromInteraction.contains(t.toSet))
           case Dot =>
             // e.g. "- .", which removes all first-order terms
             includedTerms = includedTerms.filter {
               case Seq(t) => !dotTerms.contains(t)
               case _      => true
             }
           case _: Deletion =>
             throw new RuntimeException("Deletion terms cannot be nested")
           case _: Intercept =>
         }
       case _: Intercept =>
     }
>>>
terms.foreach {
  case Deletion(term: Term) =>
    term match {
      case inner: ColumnRef =>
        includedTerms = includedTerms.filter(_ != Seq(inner.value))
      case ColumnInteraction(cols) =>
        val fromInteraction = expandInteraction(schema, cols).map(_.toSet)
        includedTerms =
          includedTerms.filter(t => !fromInteraction.contains(t.toSet))
      case Dot =>
        // e.g. "- .", which removes all first-order terms
        includedTerms = includedTerms.filter {
          case Seq(t) => !dotTerms.contains(t)
          case _      => true
        }
      case _: Deletion =>
        throw new RuntimeException("Deletion terms cannot be nested")
      case _: Intercept =>
    }
  case _: Intercept =>
}
<<< 17: keep line breaks to preserve semantics
List(10, 11, 12).map(x =>
  x
  - 5
)
>>>
List(10, 11, 12).map(x =>
  x
    - 5
)
<<< 18: keep line breaks to preserve semantics
List(10, 11, 12).map(x => {
  x
  - 5
})
>>>
List(10, 11, 12).map(x => {
  x
  -5
})
<<< 18: with complex infix
object a {
class b{
val check = InputKey[Unit]("check")

lazy val root = Project("root", file(".")) settings (
check <<= InputTask(_ =>
      Space ~> token(Compile.name.id | Runtime.name | Provided.name | Test.name) ~ token(
      Space ~> Bool)) { result =>
(
        result,
        managedClasspath in Provided,
        fullClasspath in Runtime,
        fullClasspath in Compile,
        fullClasspath in Test) map {
        case ((conf, expected), p, r, c, t) =>
          val cp =
            if (conf == Compile.name) c
            else if (conf == Runtime.name) r
            else if (conf == Provided.name) p
            else if (conf == Test.name) t
            else sys.error("Invalid config: " + conf)
          checkServletAPI(cp.files, expected, conf)
      }
    }
  )
  }}
>>>
object a {
  class b {
    val check = InputKey[Unit]("check")

    lazy val root = Project("root", file(".")) settings (
      check <<= InputTask(_ =>
        Space ~> token(
          Compile.name.id | Runtime.name | Provided.name | Test.name
        ) ~ token(Space ~> Bool)
      ) { result =>
        (
          result,
          managedClasspath in Provided,
          fullClasspath in Runtime,
          fullClasspath in Compile,
          fullClasspath in Test
        ) map { case ((conf, expected), p, r, c, t) =>
          val cp =
            if (conf == Compile.name) c
            else if (conf == Runtime.name) r
            else if (conf == Provided.name) p
            else if (conf == Test.name) t
            else sys.error("Invalid config: " + conf)
          checkServletAPI(cp.files, expected, conf)
        }
      }
    )
  }
}
<<< 19: lambdas with trailing comment in case stats
val f = {
  // c1
  case (a, b) =>
    c: Int => {
      d
      e
      }

  // c2
  case (a, b) =>
    c: Int => {
      d
      e
      }

  // c3
  case (a, b) =>
    c: Int => ({
      d
      e
    })
}
>>>
val f = {
  // c1
  case (a, b) =>
    c: Int => {
      d
      e
    }

  // c2
  case (a, b) =>
    c: Int => {
      d
      e
    }

  // c3
  case (a, b) =>
    c: Int =>
      ({
        d
        e
      })
}
<<< init: keep single-arg-ctor lambda param on first line 1
object a {
  class b extends c(
  _ => d({
    e
    f
    }))
}
>>>
object a {
  class b
      extends c(_ =>
        d({
          e
          f
        })
      )
}
<<< init: keep single-arg-ctor lambda param on first line 2
object a {
  class b extends c( _ => d({
    e
    f
    }))
}
>>>
object a {
  class b
      extends c(_ =>
        d({
          e
          f
        })
      )
}
<<< init: ignore multi-arg-ctor lambda param 3
object a {
  class b extends c( _ => d({
    e
    f
    }), _ => e)
}
>>>
object a {
  class b
      extends c(
        _ =>
          d({
            e
            f
          }),
        _ => e
      )
}
<<< #1599 1: original, with partial func
object A {
  def foo() = {
    x.map(_.y(
      abcd,
      { case ((abcdefghij, aswbasdfaw), asfda) => aswdf},
      { case (abcdefghij, sadfasdass) => (asdfa.sadvfs(abcdefghij).get, asdfasdfasfdasda.asdfas(asdfasdaas).get) },
      foo
    ))
  }
}
>>>
object A {
  def foo() = {
    x.map(
      _.y(
        abcd,
        { case ((abcdefghij, aswbasdfaw), asfda) => aswdf },
        { case (abcdefghij, sadfasdass) =>
          (
            asdfa.sadvfs(abcdefghij).get,
            asdfasdfasfdasda.asdfas(asdfasdaas).get
          )
        },
        foo
      )
    )
  }
}
<<< #1599 2: modified, with partial func inside block
object A {
  def foo() = {
    x.map(_.y(
      abcd,
      {{ case ((abcdefghij, aswbasdfaw), asfda) => aswdf}},
      {{ case (abcdefghij, sadfasdass) => (asdfa.sadvfs(abcdefghij).get, asdfasdfasfdasda.asdfas(asdfasdaas).get) }},
      foo
    ))
  }
}
>>>
object A {
  def foo() = {
    x.map(
      _.y(
        abcd,
        { { case ((abcdefghij, aswbasdfaw), asfda) => aswdf } },
        {
          { case (abcdefghij, sadfasdass) =>
            (
              asdfa.sadvfs(abcdefghij).get,
              asdfasdfasfdasda.asdfas(asdfasdaas).get
            )
          }
        },
        foo
      )
    )
  }
}
<<< #1599 3: modified, with lambda
object A {
  def foo() = {
    x.map(_.y(
      abcd,
      { case_abcdefghij_aswbasdfaw_asfda => aswdf},
      { case_abcdefghij_sadfasdass => (asdfa.sadvfs(abcdefghij).get, asdfasdfasfdasda.asdfas(asdfasdaas).get) },
      foo
    ))
  }
}
>>>
object A {
  def foo() = {
    x.map(
      _.y(
        abcd,
        { case_abcdefghij_aswbasdfaw_asfda => aswdf },
        { case_abcdefghij_sadfasdass =>
          (
            asdfa.sadvfs(abcdefghij).get,
            asdfasdfasfdasda.asdfas(asdfasdaas).get
          )
        },
        foo
      )
    )
  }
}
<<< multiple block arguments 1
object a {
 b(
        { _ + _ }, { _ - _ }, { _ * _ },
         { _ * _ }, {
          _ / _
        }, { (a, b) => b }, { _ % _ }, { _ pow _ })
}
>>>
object a {
  b(
    { _ + _ },
    { _ - _ },
    { _ * _ },
    { _ * _ }, {
      _ / _
    },
    { (a, b) => b },
    { _ % _ },
    { _ pow _ }
  )
}
<<< multiple block arguments 2
@expand
@expand.valify
implicit def v_s_Op[
    @expand.args(Int, Double, Float, Long) T,
    @expand.args(
      OpAdd,
      OpSub,
      OpMulScalar,
      OpMulMatrix,
      OpDiv,
      OpSet,
      OpMod,
      OpPow
    ) Op <: OpType
](
    implicit @expand.sequence[Op]({ _ + _ }, { _ - _ }, { _ * _ }, { _ * _ }, {
     _ / _ }, { (a, b) => b }, { _ % _ }, { _ pow _ })
    op: Op.Impl2[T, T, T],
    @expand.sequence[T](0, 0.0, 0.0f, 0L)
    zero: T
): BinaryRegistry[Vector[T], T, Op.type, Vector[T]] = null
>>>
@expand
@expand.valify
implicit def v_s_Op[
    @expand.args(Int, Double, Float, Long) T,
    @expand.args(
      OpAdd,
      OpSub,
      OpMulScalar,
      OpMulMatrix,
      OpDiv,
      OpSet,
      OpMod,
      OpPow
    ) Op <: OpType
](implicit
    @expand.sequence[Op](
      { _ + _ },
      { _ - _ },
      { _ * _ },
      { _ * _ }, {
        _ / _
      },
      { (a, b) => b },
      { _ % _ },
      { _ pow _ }
    )
    op: Op.Impl2[T, T, T],
    @expand.sequence[T](0, 0.0, 0.0f, 0L)
    zero: T
): BinaryRegistry[Vector[T], T, Op.type, Vector[T]] = null
