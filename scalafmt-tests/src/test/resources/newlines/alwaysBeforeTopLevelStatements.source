maxColumn = 80
newlines.topLevelStatements = [before]

<<< #1069 1
package a
import a.b.c
class d {}
>>>
package a

import a.b.c
class d {}
<<< #1069 2
package a
package b
import a.b.c
import d.e.f
class d {}
>>>
package a
package b

import a.b.c
import d.e.f
class d {}
<<< #1069 3
package a
package b {
import a.b.c
class d {}
}
>>>
package a

package b {
  import a.b.c
  class d {}
}
<<< #1593 1
package a.b.c
package d.e
package f
import g.h.i.j
package k {}
>>>
package a.b.c
package d.e
package f

import g.h.i.j
package k {}
<<< #1593 2
package a.b.c
package d.e
package f
import g.h.i.j

package k.l.m {
  import n.o.p
  class q {}
}
>>>
package a.b.c
package d.e
package f

import g.h.i.j

package k.l.m {
  import n.o.p
  class q {}
}
<<< #1653 none
maxColumn = 25
newlines.topLevelStatements = []
===
object a {
  object a {
    def b = { "multiline" }
    def c = "single"
  }
  object a {
    def c = "single"
    def b = { "multiline" }
  }
}
>>>
object a {
  object a {
    def b = {
      "multiline"
    }
    def c = "single"
  }
  object a {
    def c = "single"
    def b = {
      "multiline"
    }
  }
}
<<< #1653 before
maxColumn = 25
newlines.topLevelStatements = [before]
===
object a {
  object a {
    def b = { "multiline" }
    def c = "single"
  }
  object a {
    def c = "single"
    def b = { "multiline" }
  }
}
>>>
object a {

  object a {

    def b = {
      "multiline"
    }
    def c = "single"
  }

  object a {
    def c = "single"

    def b = {
      "multiline"
    }
  }
}
<<< #1653 after
maxColumn = 25
newlines.topLevelStatements = [after]
===
object a {
  object a {
    def b = { "multiline" }
    def c = "single"
  }
  object a {
    def c = "single"
    def b = { "multiline" }
  }
}
>>>
object a {
  object a {
    def b = {
      "multiline"
    }

    def c = "single"
  }

  object a {
    def c = "single"
    def b = {
      "multiline"
    }

  }

}
<<< #1653 both
maxColumn = 25
newlines.topLevelStatements = [before,after]
===
object a {
  object a {
    def b = { "multiline" }
    def c = "single"
  }
  object a {
    def c = "single"
    def b = { "multiline" }
  }
}
>>>
object a {

  object a {

    def b = {
      "multiline"
    }

    def c = "single"
  }

  object a {
    def c = "single"

    def b = {
      "multiline"
    }

  }

}
<<< #2511 with packages, trailing comments etc.
newlines.topLevelStatements = [before, after]
===
package a
package a1
import a.b
import a.b

// c1
import a.b
import a.b
package b {
 trait a {}
 // c1
 class a {
  type a = a
 }
 // c2

 // c

 // c1
 object a {
  type a = a
 }
 // c1
 package c {
  import a.b
  import a.b
  package d {
   trait a {}
   class a {
    type a = a
   }
   object a {}
   import a.b
   import a.b
   // c1
   class a {
    type a = a
   }
   // c2
  }
  trait a {}
 }
 // c2
}
>>>
package a
package a1

import a.b
import a.b

// c1
import a.b
import a.b

package b {
  trait a {}

  // c1
  class a {
    type a = a
  }
  // c2

  // c

  // c1
  object a {
    type a = a
  }

  // c1
  package c {
    import a.b
    import a.b

    package d {
      trait a {}

      class a {
        type a = a
      }

      object a {}
      import a.b
      import a.b

      // c1
      class a {
        type a = a
      }
      // c2

    }

    trait a {}
  }
  // c2

}
<<< #2511 use topLevelStatementBlankLines instead
newlines.topLevelBodyIfMinStatements = [before,after]
newlines.topLevelStatementBlankLines = [
  {
    maxNest = 0
    minBreaks = 1
    blanks = 4
  }, {
    maxNest = 1
    minBreaks = 1
    blanks {
      before = 3
      after = 2
    }
  }, {
    maxNest = 2
    minBreaks = 1
    blanks {
      before = 2
      after = 1
    }
  }, {
    minBreaks = 1
    blanks {
      before = 1
      after = 1
    }
  }
]
===
package a
package a1
import a.b
import a.b

// c1
import a.b
import a.b
package b {
 trait a {}
 // c1
 class a {
  type a = a
 }
 // c2

 // c

 // c1
 object a {
  type a = a
 }
 // c1
 package c {
  import a.b
  import a.b
  package d {
   trait a {}
   class a {
    type a = a
   }
   object a {}
   import a.b
   import a.b
   // c1
   class a {
    type a = a
   }
   // c2
  }
  trait a {}
 }
 // c2
}
>>>
package a
package a1




import a.b
import a.b

// c1
import a.b
import a.b




package b {

  trait a {}



  // c1
  class a {
    type a = a
  }
  // c2


  // c



  // c1
  object a {
    type a = a
  }



  // c1
  package c {

    import a.b
    import a.b


    package d {

      trait a {}

      class a {
        type a = a
      }

      object a {}

      import a.b
      import a.b

      // c1
      class a {
        type a = a
      }
      // c2

    }

    trait a {}

  }
  // c2

}
<<< #2511 trailing comments, before
runner.dialect = scala3
newlines.topLevelStatements = [before]
===
package dev.muve.vdom

given intToVAValueString: Conversion[Number, VAValue[String]] =
  (x: Number) => VAValue(x.toString)

// import math.Numeric.Implicits.infixNumericOps
//
// Foo
// Bar
>>>
package dev.muve.vdom

given intToVAValueString: Conversion[Number, VAValue[String]] =
  (x: Number) => VAValue(x.toString)

// import math.Numeric.Implicits.infixNumericOps
//
// Foo
// Bar
<<< #2511 trailing comments, after 1
runner.dialect = scala3
newlines.topLevelStatements = [after]
===
package dev.muve.vdom

given intToVAValueString: Conversion[Number, VAValue[String]] =
  (x: Number) => VAValue(x.toString)

// import math.Numeric.Implicits.infixNumericOps
//
// Foo
// Bar
>>>
package dev.muve.vdom

given intToVAValueString: Conversion[Number, VAValue[String]] =
  (x: Number) => VAValue(x.toString)

// import math.Numeric.Implicits.infixNumericOps
//
// Foo
// Bar
<<< #2511 nesting, blanks 3, package -> object
runner.dialect = scala3
newlines.topLevelStatementBlankLines = [{ blanks = 3 }]
===
package x.y.z

object Foo:

  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)

/** A doc comment. */
class Bar[V <: VAType](someProperty: String)
    extends SomePropertyBuilder[V](someProperty)
>>>
package x.y.z



object Foo:

  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)



/** A doc comment. */
class Bar[V <: VAType](someProperty: String)
    extends SomePropertyBuilder[V](someProperty)
<<< #2511 nesting, blanks 3, package -> import
runner.dialect = scala3
newlines.topLevelStatementBlankLines = [
  { blanks = 3 }
  { blanks = 2, regex = "^Import" }
]
===
package x.y.z

import x.y.foo1
import x.y.foo2

import x.y.foo3
import x.y.foo4

object Foo:

  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)



/** A doc comment. */
class Bar[V <: VAType](someProperty: String)
    extends SomePropertyBuilder[V](someProperty)
>>>
package x.y.z


import x.y.foo1
import x.y.foo2

import x.y.foo3
import x.y.foo4



object Foo:

  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)



/** A doc comment. */
class Bar[V <: VAType](someProperty: String)
    extends SomePropertyBuilder[V](someProperty)
<<< #2511 nesting, blanks 3, extension single
runner.dialect = scala3
newlines.topLevelStatementBlankLines = [{ blanks = 3 }]
===
package x.y

def foo[X](f: => X): String = ???

extension (s: String)

  /** A documentation comment. */
  def baz(cb: String => Unit): Unit =
    ???
>>>
package x.y

def foo[X](f: => X): String = ???



extension (s: String)

  /** A documentation comment. */
  def baz(cb: String => Unit): Unit =
    ???
<<< #2511 nesting, blanks 3, extension multiple
runner.dialect = scala3
newlines.topLevelStatementBlankLines = [{ blanks = 3 }]
===
package x.y

def foo[X](f: => X): String = ???

extension (s: String)

  /** A documentation comment. */
  def baz(cb: String => Unit): Unit =
    ???

  /** A documentation comment. */
  def baz(cb: String => Unit): Unit =
    ???
>>>
package x.y

def foo[X](f: => X): String = ???



extension (s: String)

  /** A documentation comment. */
  def baz(cb: String => Unit): Unit =
    ???



  /** A documentation comment. */
  def baz(cb: String => Unit): Unit =
    ???
<<< #2511 end marker present
runner.dialect = scala3
rewrite.scala3.insertEndMarkerMinLines = 1
newlines.topLevelStatementBlankLines = [
  { blanks = { before = 3, after = 4, beforeEndMarker = 2 } }
  { regex = "^Import", minBreaks=0, blanks = 1 }
  { regex = "^Pkg", minBreaks=0, blanks.after = 3 }
  { regex = "^Defn.Def", blanks = 2 }
  { regex = "^(Defn.Var|Defn.Val|Defn.Type)", blanks = 1 }
]
===
package bug

final class Builder:

  def coalesce(seq: List[String]): Seq[String] =
    ???

end Builder

val ul = Builder()
>>>
package bug



final class Builder:

  def coalesce(seq: List[String]): Seq[String] =
    ???


end Builder




val ul = Builder()
<<< #2511 end marker inserted
runner.dialect = scala3
rewrite.scala3.insertEndMarkerMinLines = 1
newlines.topLevelStatementBlankLines = [
  { blanks = { before = 3, after = 4, beforeEndMarker = 2 } }
  { regex = "^Import", minBreaks=0, blanks = 1 }
  { regex = "^Pkg", minBreaks=0, blanks.after = 3 }
  { regex = "^Defn.Def", blanks = 2 }
  { regex = "^(Defn.Var|Defn.Val|Defn.Type)", blanks = 1 }
]
===
package bug

final class Builder:

  def coalesce(seq: List[String]): Seq[String] =
    ???

val ul = Builder()
>>>
package bug



final class Builder:

  def coalesce(seq: List[String]): Seq[String] =
    ???


end Builder




val ul = Builder()
<<< beforeAll zero, no blank
newlines.topLevelStatementBlankLines = [
  { blanks = { before = 1, after = 1, beforeAll = 0 } }
]
===
package x.y.z
object Foo {
  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)
}
>>>
package x.y.z

object Foo {
  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)

}
<<< beforeAll negative, has blank
newlines.topLevelStatementBlankLines = [
  { blanks = { before = 1, after = 1, beforeAll = -1 } }
]
===
package x.y.z
object Foo {

  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)
}
>>>
package x.y.z

object Foo {
  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)

}
<<< before negative, topLevelBodyIfMinStatements = before
newlines.topLevelBodyMinStatements = 1
newlines.topLevelBodyIfMinStatements = [before]
newlines.topLevelStatementBlankLines = [
  { blanks = { before = -1, after = 1 } }
]
===
package x.y.z
object Foo {
  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)
}
>>>
package x.y.z

object Foo {

  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)

}
<<< afterAll zero, no blank
newlines.topLevelStatementBlankLines = [
  { blanks = { before = 1, after = 1, afterAll = 0 } }
]
===
package x.y.z
object Foo {
  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)
}
>>>
package x.y.z

object Foo {

  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)
}
<<< afterAll negative, has blank
newlines.topLevelStatementBlankLines = [
  { blanks = { before = 1, after = 1, afterAll = -1 } }
]
===
package x.y.z
object Foo {
  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)

}
>>>
package x.y.z

object Foo {

  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)
}
<<< after negative, topLevelBodyIfMinStatements = after
newlines.topLevelBodyMinStatements = 1
newlines.topLevelBodyIfMinStatements = [after]
newlines.topLevelStatementBlankLines = [
  { blanks = { before = 1, after = -1 } }
]
===
package x.y.z
object Foo {
  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)
}
>>>
package x.y.z

object Foo {

  def apply[V <: VAType](someProperty: String): SomePropertyBuilder[V] =
    new SomePropertyBuilder(someProperty)

}
<<< #2888 [,]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = []
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {

  val a1 = 0

  object B {

    val b1 = 0

    object C {

      val c1 = 0

      object D {

        val d1 = 0

        val d2 = 1

      }

      val c2 = 1

    }

    val b2 = 0

  }

  val a2 = 1

}
<<< #2888 [,0]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = [
  {
    maxNest = 0
    minBreaks = 0
    blanks = {
      before = 1
      after = 1
      beforeAll = -1
      afterAll = -1
    }
  }
]
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {

  val a1 = 0

  object B {

    val b1 = 0

    object C {

      val c1 = 0

      object D {

        val d1 = 0

        val d2 = 1

      }

      val c2 = 1

    }

    val b2 = 0

  }

  val a2 = 1

}
<<< #2888 [,1]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = [
  {
    maxNest = 1
    minBreaks = 0
    blanks = {
      before = 1
      after = 1
      beforeAll = -1
      afterAll = -1
    }
  }
]
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {
  val a1 = 0

  object B {

    val b1 = 0

    object C {

      val c1 = 0

      object D {

        val d1 = 0

        val d2 = 1

      }

      val c2 = 1

    }

    val b2 = 0

  }

  val a2 = 1
}
<<< #2888 [,2]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = [
  {
    maxNest = 2
    minBreaks = 0
    blanks = {
      before = 1
      after = 1
      beforeAll = -1
      afterAll = -1
    }
  }
]
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {
  val a1 = 0

  object B {
    val b1 = 0

    object C {

      val c1 = 0

      object D {

        val d1 = 0

        val d2 = 1

      }

      val c2 = 1

    }

    val b2 = 0
  }

  val a2 = 1
}
<<< #2888 [,3]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = [
  {
    maxNest = 3
    minBreaks = 0
    blanks = {
      before = 1
      after = 1
      beforeAll = -1
      afterAll = -1
    }
  }
]
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {
  val a1 = 0

  object B {
    val b1 = 0

    object C {
      val c1 = 0

      object D {

        val d1 = 0

        val d2 = 1

      }

      val c2 = 1
    }

    val b2 = 0
  }

  val a2 = 1
}
<<< #2888 [1,1]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = [
  {
    minNest = 1
    maxNest = 1
    minBreaks = 0
    blanks = {
      before = 1
      after = 1
      beforeAll = -1
      afterAll = -1
    }
  }
]
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {
  val a1 = 0

  object B {

    val b1 = 0

    object C {

      val c1 = 0

      object D {

        val d1 = 0

        val d2 = 1

      }

      val c2 = 1

    }

    val b2 = 0

  }

  val a2 = 1
}
<<< #2888 [2,2]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = [
  {
    minNest = 2
    maxNest = 2
    minBreaks = 0
    blanks = {
      before = 1
      after = 1
      beforeAll = -1
      afterAll = -1
    }
  }
]
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {

  val a1 = 0

  object B {
    val b1 = 0

    object C {

      val c1 = 0

      object D {

        val d1 = 0

        val d2 = 1

      }

      val c2 = 1

    }

    val b2 = 0
  }

  val a2 = 1

}
<<< #2888 [3,3]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = [
  {
    minNest = 3
    maxNest = 3
    minBreaks = 0
    blanks = {
      before = 1
      after = 1
      beforeAll = -1
      afterAll = -1
    }
  }
]
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {

  val a1 = 0

  object B {

    val b1 = 0

    object C {
      val c1 = 0

      object D {

        val d1 = 0

        val d2 = 1

      }

      val c2 = 1
    }

    val b2 = 0

  }

  val a2 = 1

}
<<< #2888 [1,]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = [
  {
    minNest = 1
    minBreaks = 0
    blanks = {
      before = 1
      after = 1
      beforeAll = -1
      afterAll = -1
    }
  }
]
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {
  val a1 = 0

  object B {
    val b1 = 0

    object C {
      val c1 = 0

      object D {
        val d1 = 0

        val d2 = 1
      }

      val c2 = 1
    }

    val b2 = 0
  }

  val a2 = 1
}
<<< #2888 [2,]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = [
  {
    minNest = 2
    minBreaks = 0
    blanks = {
      before = 1
      after = 1
      beforeAll = -1
      afterAll = -1
    }
  }
]
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {

  val a1 = 0

  object B {
    val b1 = 0

    object C {
      val c1 = 0

      object D {
        val d1 = 0

        val d2 = 1
      }

      val c2 = 1
    }

    val b2 = 0
  }

  val a2 = 1

}
<<< #2888 [3,]
newlines.topLevelStatements = []
newlines.topLevelStatementBlankLines = [
  {
    minNest = 3
    minBreaks = 0
    blanks = {
      before = 1
      after = 1
      beforeAll = -1
      afterAll = -1
    }
  }
]
===
object A {


  val a1 = 0


  object B {


    val b1 = 0


    object C {


      val c1 = 0


      object D {

        val d1 = 0


        val d2 = 1

      }


      val c2 = 1


    }


    val b2 = 0


  }

  val a2 = 1

}
>>>
object A {

  val a1 = 0

  object B {

    val b1 = 0

    object C {
      val c1 = 0

      object D {
        val d1 = 0

        val d2 = 1
      }

      val c2 = 1
    }

    val b2 = 0

  }

  val a2 = 1

}
