align = none
maxColumn = 40
newlines.source = unfold
runner.optimizer.forceConfigStyleOnOffset = 50
<<< 1.1: block, if-else, line too long
if (true) {      println(aaaaaaaaaaaaaaaaaaaaaaaaaa)}
>>>
if (true) {
  println(aaaaaaaaaaaaaaaaaaaaaaaaaa)
}
<<< 1.2: block, if-else, egyptian curlies
object a {
if (a) {
println("bbb") } else c
}
>>>
object a {
  if (a) {
    println("bbb")
  } else
    c
}
<<< 1.3: block, if, non-egyptian curlies
object a {
if (a)
{
println("bbb")
}
else
{
c
}}
>>>
object a {
  if (a) {
    println("bbb")
  } else {
    c
  }
}
<<< 1.4: block #1043
object a {
      if ('0' <= c && c <= '9') { c - '0' }
      else if ('A' <= c && c <= 'F') {
       c - 'A' + 10 }
      else if ('a' <= c && c <= 'f') { c - 'a' + 10 }
      else {
       -1  }}
>>>
object a {
  if ('0' <= c && c <= '9') {
    c - '0'
  } else if ('A' <= c && c <= 'F') {
    c - 'A' + 10
  } else if ('a' <= c && c <= 'f') {
    c - 'a' + 10
  } else {
    -1
  }
}
<<< 1.5: block #1043 with lines joined
object a {
      if ('0' <= c && c <= '9') { c - '0' }      else if ('A' <= c && c <= 'F') {
       c - 'A' + 10 }  else if ('a' <= c && c <= 'f') { c - 'a' + 10 }      else {
                                                            -1
}}
>>>
object a {
  if ('0' <= c && c <= '9') {
    c - '0'
  } else if ('A' <= c && c <= 'F') {
    c - 'A' + 10
  } else if ('a' <= c && c <= 'f') {
    c - 'a' + 10
  } else {
    -1
  }
}
<<< 1.6: block, try-catch, line too long
object a {
try { aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa } catch { case b => }
}
>>>
object a {
  try {
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  } catch {
    case b =>
  }
}
<<< 1.7: block, try-catch, no breaks
object a {
try { a } catch { case b => ; case c => } finally { d }
}
>>>
object a {
  try {
    a
  } catch {
    case b => ;
    case c =>
  } finally {
    d
  }
}
<<< 1.8: block, try-catch, with breaks
object a {
try {
 a } catch {
  case b => ; case c => } finally {
   d }
}
>>>
object a {
  try {
    a
  } catch {
    case b => ;
    case c =>
  } finally {
    d
  }
}
<<< 1.9: block, try-catch, with breaks, top-level
try {
 a } catch {
  case b => ; case c => } finally {
   d }
>>>
try {
  a
} catch {
  case b => ;
  case c =>
} finally {
  d
}
<<< 1.a: block, class
object a {
class a {
 type b = Int
}
}
>>>
object a {
  class a {
    type b = Int
  }
}
<<< 1.b: block, trait and object
object a {
trait b {
 type c = Int
}
object b {
def apply(c: Int) = { new d(c)
}
}}
>>>
object a {
  trait b {
    type c = Int
  }
  object b {
    def apply(c: Int) = {
      new d(c)
    }
  }
}
<<< 1.c: block followed by an infix, overflowing if no break
maxColumn = 80
===
object a {
    the[Exception] thrownBy { SizeUtils.calculate(segments, "user")
    } should have message """Cannot resolve column name "user" among (segment_id);"""
}
>>>
object a {
  the[Exception] thrownBy {
    SizeUtils.calculate(segments, "user")
  } should have message """Cannot resolve column name "user" among (segment_id);"""
}
<<< 1.d: if-else, no curlies
if (a)
println("bbb") else if (b) b else c
>>>
if (a)
  println("bbb")
else if (b)
  b
else
  c
<<< 2.1: def one-line body
def a = b
>>>
def a = b
<<< 2.2: def one-line block body
object a {
def a = { b; c }
}
>>>
object a {
  def a = {
    b;
    c
  }
}
<<< 2.3: def one-line block body with a break
object a {
def a =
 { b; c }
}
>>>
object a {
  def a = {
    b;
    c
  }
}
<<< 2.4: def multiline-line block body with a break
object a {
def a =
 {
  b;c }}
>>>
object a {
  def a = {
    b;
    c
  }
}
<<< 2.5: def multiline-line block body with a break
object a {
def a = {
  b;c }
}
>>>
object a {
  def a = {
    b;
    c
  }
}
<<< 2.6 #1747: one line with else
maxColumn = 55
===
object a {
  val ok1 = if (a > 10) Some(a) else None
  val ok2 = if (a > 10) { Some(a) } else { None }
  val ok3 = if (aaaa > 10000) { Some(aaaa) } else { None }
}
>>>
object a {
  val ok1 =
    if (a > 10)
      Some(a)
    else
      None
  val ok2 =
    if (a > 10) {
      Some(a)
    } else {
      None
    }
  val ok3 =
    if (aaaa > 10000) {
      Some(aaaa)
    } else {
      None
    }
}
<<< 2.7 #1747: one line without else
maxColumn = 40
===
object a {
  val ok1 = if (a > 10) Some(a)
  val ok2 = if (a > 10) { Some(a) }
  val ok3 = if (aaaa > 10000) { Some(aaaa) }
}
>>>
object a {
  val ok1 =
    if (a > 10)
      Some(a)
  val ok2 =
    if (a > 10) {
      Some(a)
    }
  val ok3 =
    if (aaaa > 10000) {
      Some(aaaa)
    }
}
<<< 2.8 #1747: split on then with else
maxColumn = 55
===
object a {
  val ok1 = if (a > 10)
    Some(a)
  else
    None
  val ok2 = if (a > 10) {
    Some(a)
  } else {
    None
  }
  val ok3 = if (aaaa > 10000) {
     Some(aaaa)
  }
  else {
    None
  }
}
>>>
object a {
  val ok1 =
    if (a > 10)
      Some(a)
    else
      None
  val ok2 =
    if (a > 10) {
      Some(a)
    } else {
      None
    }
  val ok3 =
    if (aaaa > 10000) {
      Some(aaaa)
    } else {
      None
    }
}
<<< 2.9 #1747: split on else
maxColumn = 55
===
object a {
  val ok1 = if (a > 10) Some(a) else
    None
  val ok2 = if (a > 10) { Some(a) } else {
    None
  }
  val ok3 = if (aaaa > 10000) { Some(aaaa) } else {
    None
  }
}
>>>
object a {
  val ok1 =
    if (a > 10)
      Some(a)
    else
      None
  val ok2 =
    if (a > 10) {
      Some(a)
    } else {
      None
    }
  val ok3 =
    if (aaaa > 10000) {
      Some(aaaa)
    } else {
      None
    }
}
<<< 2.10 #1747: split on then without else
maxColumn = 40
===
object a {
  val ok1 = if (a > 10)
    Some(a)
  val ok2 = if (a > 10) {
    Some(a) }
  val ok3 = if (aaaa > 10000) {
    Some(aaaa) }
}
>>>
object a {
  val ok1 =
    if (a > 10)
      Some(a)
  val ok2 =
    if (a > 10) {
      Some(a)
    }
  val ok3 =
    if (aaaa > 10000) {
      Some(aaaa)
    }
}
<<< 2.11 #1747: split on if
maxColumn = 55
===
object a {
  val ok1 =
    if (a > 10) Some(a) else None
  val ok2 =
    if (a > 10) { Some(a) } else { None }
  val ok3 =
    if (aaaa > 10000) { Some(aaaa) } else { None }
}
>>>
object a {
  val ok1 =
    if (a > 10)
      Some(a)
    else
      None
  val ok2 =
    if (a > 10) {
      Some(a)
    } else {
      None
    }
  val ok3 =
    if (aaaa > 10000) {
      Some(aaaa)
    } else {
      None
    }
}
<<< 2.12 #1747: split on if without else
maxColumn = 40
===
object a {
  val ok1 =
    if (a > 10) Some(a)
  val ok2 =
    if (a > 10) { Some(a) }
  val ok3 =
   if (aaaa > 10000) { Some(aaaa) }
}
>>>
object a {
  val ok1 =
    if (a > 10)
      Some(a)
  val ok2 =
    if (a > 10) {
      Some(a)
    }
  val ok3 =
    if (aaaa > 10000) {
      Some(aaaa)
    }
}
<<< 2.13 val with for/yield
maxColumn = 80
===
val attributes = for (_ ← 1 to count) yield {
  val tag = d.readUnsignedShort()
  val length = d.readInt()
  if (debug) println(s"LNB:   tag ${c(tag)} ($length bytes)")
  if (tag != s) {
    skip(d, length)
    None
  } else {
    val name = d.readUnsignedShort()
    Some(c(name))
  }
}
>>>
val attributes =
  for (_ ← 1 to count)
    yield {
      val tag = d.readUnsignedShort()
      val length = d.readInt()
      if (debug)
        println(s"LNB:   tag ${c(tag)} ($length bytes)")
      if (tag != s) {
        skip(d, length)
        None
      } else {
        val name = d.readUnsignedShort()
        Some(c(name))
      }
    }
<<< 2.14 val with short for/yield
maxColumn = 80
===
val attributes =
 for (i ← 1 to count)
 yield i
>>>
val attributes = for (i ← 1 to count) yield i
<<< 2.15 val with literal apply
object a {
   val a = b(0x1F, // ID1
       0x8B, // ID2
       8, // CM = Deflate
       0, // FLG
       0, // MTIME 1
       0, // MTIME 2
       0, // MTIME 3
       0, // MTIME 4
       0, // XFL
       0 // OS
    )
 }
>>>
object a {
  val a = b(
    0x1F, // ID1
    0x8B, // ID2
    8, // CM = Deflate
    0, // FLG
    0, // MTIME 1
    0, // MTIME 2
    0, // MTIME 3
    0, // MTIME 4
    0, // XFL
    0 // OS
  )
}
<<< 2.16 val with apply and comment
danglingParentheses = false
===
val a = Set("b" // ...
)
>>>
val a = Set(
  "b" // ...
)
<<< 2.17 val with apply-apply-select
val aaaaa = bbbbb.asss(as).ccccc(
    ddddd,
    eeeee,
    fffff
  ) // comment
>>>
val aaaaa = bbbbb
  .asss(as)
  .ccccc(ddddd, eeeee, fffff) // comment
<<< 2.18 val with apply-apply
val aaaaa = (getSomeLongerFunction(c))(as)
>>>
val aaaaa =
  (getSomeLongerFunction(c))(as)
<<< 2.19 val with apply-select-select
val aaaaa = bbbbb.asss.ccccc(
    ddddd,
    eeeee,
    fffff
  ) // comment
>>>
val aaaaa = bbbbb
  .asss
  .ccccc(ddddd, eeeee, fffff) // comment
<<< 2.20 val with apply-select-select
val nested =
  promiseIntercept(new Actor {
    def receive = {
      case _ ⇒
    }
  })(result)
>>>
val nested =
  promiseIntercept(
    new Actor {
      def receive = {
        case _ ⇒
      }
    }
  )(result)
<<< 2.21 val with apply type
val deployment = system
  .asInstanceOf[ActorSystemImpl]
  .provider
  .deployer
  .lookup(service.split("/").drop(1))
>>>
val deployment = system
  .asInstanceOf[ActorSystemImpl]
  .provider
  .deployer
  .lookup(service.split("/").drop(1))
<<< 2.22
maxColumn = 80
===
val augassign: P[Ast.operator] = P(
    "+=".!.map(_ => Ast.operator.Add) |
    "-=".!.map(_ => Ast.operator.Sub) |
    "*=".!.map(_ => Ast.operator.Mult) |
    "/=".!.map(_ => Ast.operator.Div) |
    "%=".!.map(_ => Ast.operator.Mod) |
    "&=".!.map(_ => Ast.operator.BitAnd) |
    "|=".!.map(_ => Ast.operator.BitOr) |
    "^=".!.map(_ => Ast.operator.BitXor) |
    "<<=".!.map(_ => Ast.operator.LShift) |
    ">>=".!.map(_ => Ast.operator.RShift) |
    "**=".!.map(_ => Ast.operator.Pow) |
    "//=".!.map(_ => Ast.operator.FloorDiv)
  )
>>>
UNABLE TO FORMAT
<<< 3.1: def non-config-style, long
def a( ccccccccccccccccc:Int,
 ddddddddddddddddd:String,
  eeeeeeeeeeeeeeeee:Long) = true
>>>
def a(
    ccccccccccccccccc: Int,
    ddddddddddddddddd: String,
    eeeeeeeeeeeeeeeee: Long
) = true
<<< 3.2: def non-config-style, short
def a( b:Int,
 c:String,
  d:Long) = true
>>>
def a(b: Int, c: String, d: Long) = true
<<< 3.3: apply non-config-style, no breaks on ( and )
val a = b(c, d,
  efgh)
>>>
val a = b(c, d, efgh)
<<< 3.4: apply non-config-style, no break on (, break on )
val a = b(c,
 d,
  efgh
)
>>>
val a = b(c, d, efgh)
<<< 3.5: apply non-config-style, break on (, no break on )
val a = b(
c,
 d,
  efgh)
>>>
val a = b(c, d, efgh)
<<< 3.6: apply config-style, break on ( and )
val a = b(
c,
 d,
  efgh
  )
>>>
val a = b(c, d, efgh)
<<< 3.7: apply non-config-style, force
val a = b( cccccccccccccc, dddddddddddddd,  eeeeeeeeeeeeee)
>>>
val a = b(
  cccccccccccccc,
  dddddddddddddd,
  eeeeeeeeeeeeee
)
<<< 3.8: apply non-config-style, too long
val a = b( ccccccccccc, ddddddddddd,  eeeeeeeeeee)
>>>
val a = b(
  ccccccccccc,
  ddddddddddd,
  eeeeeeeeeee
)
<<< 3.9: single-arg multi-line apply, possible config-style
a.b(foo {
    val bar = baz
    qux
  }
)
>>>
a.b(
  foo {
    val bar = baz
    qux
  }
)
<<< 3.10 enclosed, infix on the right
maxColumn = 80
danglingParentheses = false
===
object a {
  terminaters = Set() ++ (for (i ← 1 to n)
    yield {
      val man = context.watch(context.system.actorOf(Props[Terminater]))
      man ! "run"
      man
    })
}
>>>
object a {
  terminaters = Set() ++ (
    for (i ← 1 to n)
      yield {
        val man = context.watch(context.system.actorOf(Props[Terminater]))
        man ! "run"
        man
      }
  )
}
<<< 3.11 enclosed, by itself
maxColumn = 80
danglingParentheses = false
===
object a {
  (for (i ← 1 to n)
    yield {
      val man = context.watch(context.system.actorOf(Props[Terminater]))
      man ! "run"
      man
    })
}
>>>
object a {
  (for (i ← 1 to n)
    yield {
      val man = context.watch(context.system.actorOf(Props[Terminater]))
      man ! "run"
      man
    })
}
<<< 3.12 enclosed, followed by select
maxColumn = 80
danglingParentheses = false
===
object a {
  (intercept[java.lang.IllegalStateException] {
    wrap(result ⇒
      actorOf(Props(new OuterActor(actorOf(Props(promiseIntercept({
        throw new IllegalStateException("Ur state be b0rked");
        new InnerActor
      })(result)))))))
  }).getMessage should ===("Ur state be b0rked")
}
>>>
object a {
  (
    intercept[java.lang.IllegalStateException] {
      wrap(result ⇒
        actorOf(
          Props(
            new OuterActor(
              actorOf(
                Props(
                  promiseIntercept({
                    throw new IllegalStateException("Ur state be b0rked");
                    new InnerActor
                  })(result)))))))
    }
  ).getMessage should ===("Ur state be b0rked")
}
<<< 3.13 enclosed, followed by select and infix
maxColumn = 80
danglingParentheses = false
===
object a {
  (intercept[java.lang.IllegalStateException] {
    in.readObject
  }).getMessage should ===(
    "Trying to deserialize a serialized ActorRef without an ActorSystem in scope." +
      " Use 'akka.serialization.Serialization.currentSystem.withValue(system) { ... }'")
}
>>>
object a {
  (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ).getMessage should ===(
    "Trying to deserialize a serialized ActorRef without an ActorSystem in scope." +
      " Use 'akka.serialization.Serialization.currentSystem.withValue(system) { ... }'")
}
<<< 3.14 enclosed, assignment, by itself
maxColumn = 80
danglingParentheses = false
===
object a {
  val a = (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  )
}
>>>
object a {
  val a = (intercept[java.lang.IllegalStateException] {
    in.readObject
  })
}
<<< 3.15 enclosed, assignment, infix on left
maxColumn = 80
danglingParentheses = false
===
object a {
  val a = (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 2
}
>>>
object a {
  val a = (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 2
}
<<< 3.16 enclosed, assignment, infix on right
maxColumn = 80
danglingParentheses = false
===
object a {
  val a = 2 ++ (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  )
}
>>>
object a {
  val a = 2 ++ (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  )
}
<<< 3.17 enclosed, assignment, infix in middle
maxColumn = 80
danglingParentheses = false
===
object a {
  val a = 2 ++ (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 3
}
>>>
object a {
  val a = 2 ++ (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 3
}
<<< 3.18 enclosed, assignment, by itself, narrower
maxColumn = 60
danglingParentheses = false
===
object a {
  val a = (intercept[java.lang.IllegalStateException] {
    in.readObject
  })
}
>>>
object a {
  val a = (intercept[java.lang.IllegalStateException] {
    in.readObject
  })
}
<<< 3.19 enclosed, assignment, infix on left, narrower
maxColumn = 60
danglingParentheses = false
===
object a {
  val a = (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 2
}
>>>
object a {
  val a = (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 2
}
<<< 3.20 enclosed, assignment, infix on right, narrower
maxColumn = 60
danglingParentheses = false
===
object a {
  val a = 2 ++ (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  )
}
>>>
object a {
  val a = 2 ++ (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  )
}
<<< 3.21 enclosed, assignment, infix in middle, narrower
maxColumn = 60
danglingParentheses = false
===
object a {
  val a = 2 ++ (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 3
}
>>>
object a {
  val a = 2 ++ (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 3
}
<<< 3.22 enclosed, assignment, by itself, narrow
maxColumn = 40
danglingParentheses = false
===
object a {
  val a = (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  )
}
>>>
object a {
  val a = (intercept[
    java.lang.IllegalStateException] {
    in.readObject
  })
}
<<< 3.23 enclosed, assignment, infix on left, narrow
maxColumn = 40
danglingParentheses = false
===
object a {
  val a = (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 2
}
>>>
object a {
  val a = (
    intercept[
      java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 2
}
<<< 3.24 enclosed, assignment, infix on right, narrow
maxColumn = 40
danglingParentheses = false
===
object a {
  val a = 2 ++ (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  )
}
>>>
object a {
  val a = 2 ++ (
    intercept[
      java.lang.IllegalStateException] {
      in.readObject
    }
  )
}
<<< 3.25 enclosed, assignment, infix in middle, narrow
maxColumn = 40
danglingParentheses = false
===
object a {
  val a = 2 ++ (
    intercept[java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 3
}
>>>
object a {
  val a = 2 ++ (
    intercept[
      java.lang.IllegalStateException] {
      in.readObject
    }
  ) ++ 3
}
<<< 3.26 enclosed, def, chain follows
maxColumn = 80
===
  def activationFutureFor(endpoint: ActorRef)(implicit
      timeout: Timeout,
      executor: ExecutionContext): Future[ActorRef] =
    (supervisor
      .ask(AwaitActivation(endpoint))(timeout))
      .map[ActorRef]({
        case EndpointActivated(`endpoint`) ⇒ endpoint
        case EndpointFailedToActivate(`endpoint`, cause) ⇒ throw cause
      })
>>>
def activationFutureFor(
    endpoint: ActorRef
)(implicit timeout: Timeout, executor: ExecutionContext): Future[ActorRef] =
  (supervisor.ask(AwaitActivation(endpoint))(timeout)).map[ActorRef]({
    case EndpointActivated(`endpoint`) ⇒
      endpoint
    case EndpointFailedToActivate(`endpoint`, cause) ⇒
      throw cause
  })
<<< 3.27 enclosed in block, def, chain follows
maxColumn = 80
===
  def activationFutureFor(endpoint: ActorRef)(implicit
      timeout: Timeout,
      executor: ExecutionContext): Future[ActorRef] =
    {supervisor
      .ask(AwaitActivation(endpoint))(timeout)}
      .map[ActorRef]({
        case EndpointActivated(`endpoint`) ⇒ endpoint
        case EndpointFailedToActivate(`endpoint`, cause) ⇒ throw cause
      })
>>>
def activationFutureFor(
    endpoint: ActorRef
)(implicit timeout: Timeout, executor: ExecutionContext): Future[ActorRef] = {
  supervisor.ask(AwaitActivation(endpoint))(timeout)
}.map[ActorRef]({
  case EndpointActivated(`endpoint`) ⇒
    endpoint
  case EndpointFailedToActivate(`endpoint`, cause) ⇒
    throw cause
})
<<< 3.28 apply with optimal token
maxColumn = 80
danglingParentheses = false
===
case class AttributeInfo(symbol : Symbol, typeRef : Type, value : Option[Any],
  values : Seq[String ~ Any]) // sym_Ref info_Ref {constant_Ref} {nameRef constantRef}
>>>
case class AttributeInfo(
    symbol: Symbol,
    typeRef: Type,
    value: Option[Any],
    values: Seq[
      String ~ Any]) // sym_Ref info_Ref {constant_Ref} {nameRef constantRef}
<<< 3.29 apply with optimal token
maxColumn = 80
===
object a {
Multipart.FormData.BodyPart.Strict(
  "userfile",
  HttpEntity(`application/pdf`, ByteString("filecontent")),
  Map("filename" -> "test€.dat"),
  List(
    RawHeader("Content-Transfer-Encoding", "binary"),
    RawHeader("Content-Additional-1", "anything"),
    RawHeader("Content-Additional-2", "really-anything"))
)
}
>>>
object a {
  Multipart
    .FormData
    .BodyPart
    .Strict(
      "userfile",
      HttpEntity(`application/pdf`, ByteString("filecontent")),
      Map("filename" -> "test€.dat"),
      List(
        RawHeader("Content-Transfer-Encoding", "binary"),
        RawHeader("Content-Additional-1", "anything"),
        RawHeader("Content-Additional-2", "really-anything")
      )
    )
}
<<< 3.30: apply with single-arg assign; open nl, close nonl
object foo {
val a = b(c = d)
val a = b(c =
  d)
val a = b(
  c =  d)
val a = b(
  c =  d
  )
}
>>>
object foo {
  val a = b(c = d)
  val a = b(c = d)
  val a = b(c = d)
  val a = b(c = d)
}
<<< 3.31
object a {
  val b: Bbbbb[Seq[Ccccc]] = writable[Seq[Ccccc]]
}
>>>
object a {
  val b: Bbbbb[Seq[Ccccc]] = writable[
    Seq[Ccccc]
  ]
}
<<< 4.1: annotation with newlines
maxColumn = 50
optIn.annotationNewlines = true
===
object WrapperToHaveStatTestCaseParserWorking {
  @annot   @deprecated   class B(@annot @deprecated private implicit val x: Int) extends A {
    @annot override def foo = 1

    @annot
    override def bar = {   1 }

    @annot @annot2 @annot3 @annot4 /*comment4*/ @annot5 @deprecated def foo2(@annot @deprecated x: Int) = 1

    // in case of annotations with params located in many lines
    // let's live with changed lines of params
    @annot @annot2(value =
    "foo", someInt = 5) @annot3
    @deprecated(value =
    "bar") def bar2  =  1
  }

  @annot @annot2
  @annot3
  @annot4 @deprecated class C

  @annot
  @deprecated
  class D
}
>>>
object WrapperToHaveStatTestCaseParserWorking {
  @annot
  @deprecated
  class B(
      @annot
      @deprecated
      private implicit val x: Int
  ) extends A {
    @annot
    override def foo = 1

    @annot
    override def bar = {
      1
    }

    @annot
    @annot2
    @annot3
    @annot4 /*comment4*/
    @annot5
    @deprecated
    def foo2(
        @annot
        @deprecated
        x: Int
    ) = 1

    // in case of annotations with params located in many lines
    // let's live with changed lines of params
    @annot
    @annot2(value = "foo", someInt = 5)
    @annot3
    @deprecated(value = "bar")
    def bar2 = 1
  }

  @annot
  @annot2
  @annot3
  @annot4
  @deprecated
  class C

  @annot
  @deprecated
  class D
}
<<< 4.2: annotation without newlines
maxColumn = 50
optIn.annotationNewlines = false
===
object WrapperToHaveStatTestCaseParserWorking {
  @annot   @deprecated   class B(@annot @deprecated private implicit val x: Int) extends A {
    @annot override def foo = 1

    @annot
    override def bar = {   1 }

    @annot @annot2 @annot3 @annot4 /*comment4*/ @annot5 @deprecated def foo2(@annot @deprecated x: Int) = 1

    // in case of annotations with params located in many lines
    // let's live with changed lines of params
    @annot @annot2(value =
    "foo", someInt = 5) @annot3
    @deprecated(value =
    "bar") def bar2  =  1
  }

  @annot @annot2
  @annot3
  @annot4 @deprecated class C

  @annot
  @deprecated
  class D
}
>>>
object WrapperToHaveStatTestCaseParserWorking {
  @annot @deprecated
  class B(
      @annot @deprecated
      private implicit val x: Int
  ) extends A {
    @annot
    override def foo = 1

    @annot
    override def bar = {
      1
    }

    @annot @annot2 @annot3 @annot4 /*comment4*/
    @annot5 @deprecated
    def foo2(
        @annot @deprecated
        x: Int
    ) = 1

    // in case of annotations with params located in many lines
    // let's live with changed lines of params
    @annot @annot2(value = "foo", someInt = 5)
    @annot3 @deprecated(value = "bar")
    def bar2 = 1
  }

  @annot @annot2 @annot3 @annot4 @deprecated
  class C

  @annot @deprecated
  class D
}
<<< 4.3: #938 flag false, newline no
optIn.selfAnnotationNewline = false
maxColumn = 20
===
trait a { self =>
    blah
}
>>>
trait a { self =>
  blah
}
<<< 4.4: #938 flag true, newline no
optIn.selfAnnotationNewline = true
maxColumn = 20
===
trait a { self =>
    blah
}
>>>
trait a {
  self =>
  blah
}
<<< 4.5: #938 flag false, newline yes
optIn.selfAnnotationNewline = false
maxColumn = 20
===
trait a {
  self =>
    blah
}
>>>
trait a { self =>
  blah
}
<<< 4.6: #938 flag true, newline yes
optIn.selfAnnotationNewline = true
maxColumn = 20
===
trait a {
 self =>
    blah
}
>>>
trait a {
  self =>
  blah
}
<<< 4.7: #938 flag true, newline no, line too long
optIn.selfAnnotationNewline = true
maxColumn = 20
===
trait a { selfaaaaaaaaaaaaaaaa =>
    blah
}
>>>
trait a {
  selfaaaaaaaaaaaaaaaa =>
  blah
}
<<< 4.8 flag true, annot in param
optIn.annotationNewlines = true
===
@ foobar("annot", {
  val x = 2
  val y = 2 // y=2
  x + y
})
 object
  a  extends b with c {

   def
   foo[T: Int#Double#Triple,
       R <% String](
    @annot1
    x
    : Int @annot2 = 2
    , y: Int = 3): Int = {
    "match" match {
      case 1 | 2 =>   3
      case <A>2</A> => 2
    }
   }
}
>>>
@foobar(
  "annot", {
    val x = 2
    val y = 2 // y=2
    x + y
  }
)
object a extends b with c {

  def foo[
      T: Int#Double#Triple,
      R <% String
  ](
      @annot1
      x: Int @annot2 = 2,
      y: Int = 3
  ): Int = {
    "match" match {
      case 1 | 2 =>
        3
      case <A>2</A> =>
        2
    }
  }
}
<<< 4.9 flag false, annot in param
optIn.annotationNewlines = false
===
@ foobar("annot", {
  val x = 2
  val y = 2 // y=2
  x + y
})
 object
  a  extends b with c {

   def
   foo[T: Int#Double#Triple,
       R <% String](
    @annot1
    x
    : Int @annot2 = 2
    , y: Int = 3): Int = {
    "match" match {
      case 1 | 2 =>   3
      case <A>2</A> => 2
    }
   }
}
>>>
@foobar(
  "annot", {
    val x = 2
    val y = 2 // y=2
    x + y
  }
)
object a extends b with c {

  def foo[
      T: Int#Double#Triple,
      R <% String
  ](
      @annot1
      x: Int @annot2 = 2,
      y: Int = 3
  ): Int = {
    "match" match {
      case 1 | 2 =>
        3
      case <A>2</A> =>
        2
    }
  }
}
<<< 4.10
maxColumn = 80
===
class Engine[TD, EI, PD, Q, P, A](
    val dataSourceClassMap: Map[String, Class[
      _ <: BaseDataSource[TD, EI, Q, A]]],
     val preparatorClassMap: Map[String, Class[_ <: BasePreparator[TD, PD]]],
     val algorithmClassMap: Map[String, Class[_ <: BaseAlgorithm[PD, _, Q, P]]],
     val servingClassMap: Map[String, Class[_ <: BaseServing[Q, P]]])
     extends BaseEngine[EI, Q, P, A]
>>>
class Engine[TD, EI, PD, Q, P, A](
    val dataSourceClassMap: Map[String, Class[
      _ <: BaseDataSource[TD, EI, Q, A]
    ]],
    val preparatorClassMap: Map[String, Class[_ <: BasePreparator[TD, PD]]],
    val algorithmClassMap: Map[String, Class[_ <: BaseAlgorithm[PD, _, Q, P]]],
    val servingClassMap: Map[String, Class[_ <: BaseServing[Q, P]]]
) extends BaseEngine[EI, Q, P, A]
<<< 5.1: case statements
a match {
  case b =>
    bb
  case c => cc
   ccc
  case d =>
   dd
   ddd
  case e =>
  case f => ff
}
>>>
a match {
  case b =>
    bb
  case c =>
    cc
    ccc
  case d =>
    dd
    ddd
  case e =>
  case f =>
    ff
}
<<< 5.2 #1518
a match {
  case b: C => d.e match {
    case f => "g"
  }
}
>>>
a match {
  case b: C =>
    d.e match {
      case f =>
        "g"
    }
}
<<< 6.1: chain, no break
val a = b.c.d.e().f.g.h()
>>>
val a = b.c.d.e().f.g.h()
<<< 6.2: chain, break on =
val a =
 b.c
 .d.e(f)
 .g.h { i => j }
 .k().l({ m => n}, o)
>>>
val a = b
  .c
  .d
  .e(f)
  .g
  .h { i =>
    j
  }
  .k()
  .l(
    { m =>
      n
    },
    o
  )
<<< 6.3: chain, breaks in the middle
val a = b.c
 .d.e() .f
 .g .h()
>>>
val a = b.c.d.e().f.g.h()
<<< 6.4: chain without apply
maxColumn = 72
includeNoParensInSelectChains = true
===
object a {
created filter (ref ⇒
         !ref.isTerminated && !ref
          .asInstanceOf[ActorRefWithCell]
          .underlying.isInstanceOf[UnstartedCell]) should ===(
        Seq.empty[ActorRef])
}
>>>
object a {
  created filter (ref ⇒
    !ref.isTerminated && !ref
      .asInstanceOf[ActorRefWithCell]
      .underlying
      .isInstanceOf[UnstartedCell]
  ) should ===(Seq.empty[ActorRef])
}
<<< 6.5: chain with delayed indent after break
maxColumn = 70
===
object a {
  val unionAlgoPredicts: RDD[(QX, Seq[P])] = sc
    .union(algoPredicts).groupByKey().mapValues { ps =>
      {
        assert(
          ps.size == algoCount,
          "Must have same length as algoCount")
        // TODO. Check size == algoCount
        ps.toSeq.sortBy(_._1).map(_._2)
      }
    }
}
>>>
object a {
  val unionAlgoPredicts: RDD[(QX, Seq[P])] = sc
    .union(algoPredicts)
    .groupByKey()
    .mapValues { ps =>
      {
        assert(
          ps.size == algoCount,
          "Must have same length as algoCount"
        )
        // TODO. Check size == algoCount
        ps.toSeq.sortBy(_._1).map(_._2)
      }
    }
}
<<< 7.1: enumerator and guard short, for long
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if (b ++ b).length >= 2
    } yield a
}
>>>
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if (b ++ b).length >= 2
    } yield a
}
<<< 7.2: enumerator shoft, guard long
maxColumn = 28
===
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b if (b ++ b).length >= 2
    } yield a
}
>>>
object a {
  def c(
      b: List[Int]
  ): List[Int] =
    for {
      a <- b
      if (b ++ b)
        .length >= 2
    } yield a
}
<<< 7.3: enumerator and guard short, for short
for (a <- b.sortBy(c)
 if a > 0) yield x
>>>
for (a <- b.sortBy(c)
  if a > 0)
  yield x
<<< 7.4: enumerator and guard long
maxColumn = 17
===
val k = for {
  _ <- aa + bb
    if !onlyOne
  _ <- Future(aaa)
    if !onlyOne
  _ <- Future(2)
} yield ()
>>>
val k =
  for {
    _ <- aa + bb
    if !onlyOne
    _ <-
      Future(aaa)
    if !onlyOne
    _ <-
      Future(2)
  } yield ()
<<< 7.5: multiple consecutive guards
maxColumn = 80
===
val allOps = (
  for {
    c ← classes
    m ← c.getMethods if !Modifier.isStatic(m.getModifiers); if !ignore(m.getName)
    if !m.getName.contains("$"); if !materializing(m)
  } yield m.getName
).toSet
>>>
val allOps =
  (
    for {
      c ← classes
      m ← c.getMethods
      if !Modifier.isStatic(m.getModifiers);
      if !ignore(m.getName)
      if !m.getName.contains("$");
      if !materializing(m)
    } yield m.getName
  ).toSet
<<< 7.6: for-yield with select chain
maxColumn = 80
===
object a {
for {
       (listenAddress, listenerPromise) ← wrappedTransport.listen
       // Enforce ordering between the signalling of "listen ready" to upstream
       // and initialization happening in interceptListen
      _ ←
        listenerPromise
          .tryCompleteWith(
            interceptListen(listenAddress, upstreamListenerPromise.future1))
          .future2
     } yield (augmentScheme(listenAddress), upstreamListenerPromise)
        listenerPromise
          .tryCompleteWith(
            interceptListen(listenAddress, upstreamListenerPromise.future1))
          .future2
}
>>>
object a {
  for {
    (listenAddress, listenerPromise) ← wrappedTransport.listen
    // Enforce ordering between the signalling of "listen ready" to upstream
    // and initialization happening in interceptListen
    _ ←
      listenerPromise
        .tryCompleteWith(
          interceptListen(listenAddress, upstreamListenerPromise.future1)
        )
        .future2
  } yield (augmentScheme(listenAddress), upstreamListenerPromise)
  listenerPromise
    .tryCompleteWith(
      interceptListen(listenAddress, upstreamListenerPromise.future1)
    )
    .future2
}
<<< 7.7: for-yield enclosed in parens
for {
  nu <- rand.gaussian(0, 1)
  y = nu * nu
  x =
    (mean
        + mean * mean * y * 0.5 / shape
        - 0.5 * mean / shape * math
          .sqrt(4 * mean * shape * y + mean * mean * y * y)
    )
  z <- rand.uniform
} yield {
  if (z <= mean / (mean + x))
    x
  else
    mean * mean / x
}
>>>
for {
  nu <- rand.gaussian(0, 1)
  y = nu * nu
  x = (
      mean
        + mean * mean * y * 0.5 / shape
        - 0.5 * mean / shape * math.sqrt(
          4 * mean * shape * y + mean * mean * y * y
        )
  )
  z <- rand.uniform
} yield {
  if (z <= mean / (mean + x))
    x
  else
    mean * mean / x
}
<<< unfold ctor body with zero args
val foo = new Bar { () =>
  f(42)
}
>>>
val foo =
  new Bar { () =>
    f(42)
  }
<<< unfold ctor body with zero args
val foo = new Bar { () => f(42) }
>>>
val foo =
  new Bar { () =>
    f(42)
  }
<<< unfold ctor body with wildcard arg
val foo = Bar { _ =>
  println("a")
}
>>>
val foo = Bar { _ =>
  println("a")
}
<<< unfold apply with zero args
val foo = Bar { () =>
  f(42)
}
>>>
val foo = Bar { () =>
  f(42)
}
