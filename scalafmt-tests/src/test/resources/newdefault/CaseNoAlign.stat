preset = default
maxColumn = 80
align.preset = none
<<< Route partial function
val Route: PartialFunction[Decision, Decision] = {
  case FormatToken(_: Ident | _: `this` | _: `_ ` | _: `(`, _: `.` | _: `#`, _) =>
  List(
    NoSplit0
  )
}
>>>
val Route: PartialFunction[Decision, Decision] = {
  case FormatToken(
        _: Ident | _: `this` | _: `_ ` | _: `(`,
        _: `.` | _: `#`,
        _
      ) =>
    List(
      NoSplit0
    )
}
<<< What idiot wrote this code
List(Split(Space, 0).withPolicy {
            case Decision(t, s) if tok.right.end <= lastToken.end =>
              Decision(t, s.map {
                    case nl if nl.modification.isNewline =>
                      val result =
                        if (t.right.isInstanceOf[`if`] &&
                            owners(t.right) == owner) nl
                        else nl.withPenalty(1)
                      result.withPolicy(breakOnArrow)
                    case x => x
                  })
            })
>>>
List(Split(Space, 0).withPolicy {
  case Decision(t, s) if tok.right.end <= lastToken.end =>
    Decision(
      t,
      s.map {
        case nl if nl.modification.isNewline =>
          val result =
            if (
              t.right.isInstanceOf[`if`] &&
              owners(t.right) == owner
            ) nl
            else nl.withPenalty(1)
          result.withPolicy(breakOnArrow)
        case x => x
      }
    )
})
<<< chain of || and &&
x match {
  case tok if // TODO(olafur) DRY.
      (leftOwner.isInstanceOf[Term.Interpolate] &&
        rightOwner.isInstanceOf[Term.Interpolate]) ||
      (leftOwner.isInstanceOf[Pat.Interpolate] &&
        rightOwner.isInstanceOf[Pat.Interpolate]) =>
    Seq(Split(NoSplit, 0))
}
>>>
x match {
  case tok
      if // TODO(olafur) DRY.
      (leftOwner.isInstanceOf[Term.Interpolate] &&
        rightOwner.isInstanceOf[Term.Interpolate]) ||
        (leftOwner.isInstanceOf[Pat.Interpolate] &&
          rightOwner.isInstanceOf[Pat.Interpolate]) =>
    Seq(Split(NoSplit, 0))
}
<<< PrepJSInterop
x match {
      case cldef if true =>
        enterOwner(OwnerKind.EnumImpl) { super.transform(cldef) }

      // Catch Scala Enumerations to transform calls to scala.Enumeration.Value
      case i => x
}
>>>
x match {
  case cldef if true =>
    enterOwner(OwnerKind.EnumImpl) { super.transform(cldef) }

  // Catch Scala Enumerations to transform calls to scala.Enumeration.Value
  case i => x
}
<<< spark case dequeueAll bug
{
  def testZipPartitions4(rdd: RDD[Int]): Unit = {
    rdd.zipPartitions(rdd, rdd, rdd) { case (it1, it2, it3, it4) => return; it1 }.count()
  }
}
>>>
{
  def testZipPartitions4(rdd: RDD[Int]): Unit = {
    rdd
      .zipPartitions(rdd, rdd, rdd) { case (it1, it2, it3, it4) => return; it1 }
      .count()
  }
}
<<< #1244 1.1: one multiline pattern
x match {
  case Foo(
      a,
      b
      ) =>
        ???
}
>>>
x match {
  case Foo(
        a,
        b
      ) =>
    ???
}
<<< #1244 1.2: one multiline pattern, no cfg style
x match {
  case Foo(
      a,
      b) =>
        ???
}
>>>
x match {
  case Foo(a, b) =>
    ???
}
<<< #1244 1.3: two multiline patterns with infix and multiline guard
x match {
  case
    Foo(
      a,
      b
  ) infix Bar(
   c, d
   ) if bar(
       a,
       b
       ) =>
    ???
}
>>>
x match {
  case Foo(
        a,
        b
      ) infix Bar(
        c,
        d
      )
      if bar(
        a,
        b
      ) =>
    ???
}
<<< #1244 1.4: two multiline patterns with infix and multiline guard, no cfg style
x match {
  case
    Foo(
      a,
      b  ) infix Bar(
   c, d
   ) if bar(
       a,
       b       ) =>
    ???
}
>>>
x match {
  case Foo(a, b) infix Bar(
        c,
        d
      ) if bar(a, b) =>
    ???
}
<<< #1244 1.5: one single-line pattern and one multiline pattern with infix and guard
{
        if (
        x +
        y) 0 else 1

    if (qux(
     x,
     y
   )) 0 else 1

x match {
  case
    a@ Foo infix Bar(
   c, d
   ) if baz(
       a,
       b
       ) =>
        if (
        x +
        y) 0 else 1
    if (qux(
     x,
     y
   )) 0 else 1
}}
>>>
{
  if (
    x +
      y
  ) 0
  else 1

  if (
    qux(
      x,
      y
    )
  ) 0
  else 1

  x match {
    case a @ Foo infix Bar(
          c,
          d
        )
        if baz(
          a,
          b
        ) =>
      if (
        x +
          y
      ) 0
      else 1
      if (
        qux(
          x,
          y
        )
      ) 0
      else 1
  }
}
<<< #1244 1.6: one single-line pattern and one multiline pattern with infix and guard, no cfg style
{
        if (
        x +
        y) 0 else 1

    if (qux(
     x,
     y
   )) 0 else 1

x match {
  case
    a@ Foo infix Bar(
   c, d   ) if baz(
       a,
       b       ) =>
        if (
        x +        y) 0 else 1
    if (qux(
     x,
     y   )
     ) 0 else 1
}}
>>>
{
  if (
    x +
      y
  ) 0
  else 1

  if (
    qux(
      x,
      y
    )
  ) 0
  else 1

  x match {
    case a @ Foo infix Bar(c, d) if baz(a, b) =>
      if (x + y) 0 else 1
      if (qux(x, y)) 0 else 1
  }
}
<<< #1244 1.7: one multiline pattern and one single-line pattern with infix
x match {
  case
    Foo(
      a,
      b
  ) infix Bar
   =>
    ???
}
>>>
x match {
  case Foo(
        a,
        b
      ) infix Bar =>
    ???
}
<<< #1244 1.8: one multiline pattern and one single-line pattern with infix and multiline guard
x match {
  case
    Foo(
      a,
      b
  ) infix Bar if bar(
       a,
       b
       ) =>
    ???
}
>>>
x match {
  case Foo(
        a,
        b
      ) infix Bar
      if bar(
        a,
        b
      ) =>
    ???
}
<<< #1244 1.9: one multiline pattern and one single-line pattern with infix and single-line guard
x match {
  case
    Foo(
    a,
      b
      ) infix Bar if bar(       a,
       b       ) =>
    ???
}
>>>
x match {
  case Foo(
        a,
        b
      ) infix Bar if bar(a, b) =>
    ???
}
<<< #1244 2.1: long patterns: two single-line with infix and guard
x match {
  case
    VeryLongFirstPatExtractCall(      firstParameter,
      secondParameter
      )
       infix QuiteLongSecondPat if VeryLongAdditionalCheck(       a,
       b       ) =>
    ???
}
>>>
x match {
  case VeryLongFirstPatExtractCall(firstParameter, secondParameter)
      infix QuiteLongSecondPat if VeryLongAdditionalCheck(a, b) =>
    ???
}
<<< #1244 2.2: long patterns: multi-line and single-line with infix and guard
x match {
  case
    VeryLongFirstPatExtractCall(
          firstParameter,
      secondParameter
      )
   infix QuiteLongSecondPat if VeryLongAdditionalCheck(
              firstParameter,
       secondParameter       ) =>
    ???
}
>>>
x match {
  case VeryLongFirstPatExtractCall(
        firstParameter,
        secondParameter
      )
      infix QuiteLongSecondPat
      if VeryLongAdditionalCheck(firstParameter, secondParameter) =>
    ???
}
<<< #1244 2.3: long patterns: two multi-line with infix and guard
x match {
  case
    VeryLongFirstPatExtractCall(
          firstParameter,
      secondParameter
      )
   infix QuiteLongSecondPat(
   aaa, bbb
   ) if VeryLongAdditionalCheck(
              firstParameter,
       secondParameter       ) =>
    ???
}
>>>
x match {
  case VeryLongFirstPatExtractCall(
        firstParameter,
        secondParameter
      )
      infix QuiteLongSecondPat(
        aaa,
        bbb
      ) if VeryLongAdditionalCheck(firstParameter, secondParameter) =>
    ???
}
<<< #1244 2.4: long patterns: two multi-line with infix and select guard
x match {
  case
    VeryLongFirstPatExtractCall(
          firstParameter,
      secondParameter
      )
   infix QuiteLongSecondPat(
   aaa, bbb
   ) if VeryLongAdditionalCheckObject
   .checkMethod(firstParameter, secondParameter) =>    ???
}
>>>
x match {
  case VeryLongFirstPatExtractCall(
        firstParameter,
        secondParameter
      )
      infix QuiteLongSecondPat(
        aaa,
        bbb
      )
      if VeryLongAdditionalCheckObject
        .checkMethod(firstParameter, secondParameter) =>
    ???
}
<<< #1244 3.1 splitting on | and not on infix (infix short)
x match {
  case _: T.LeftBrace | _: T.RightBrace | _: T.LeftParen | a :: b :: c :: Nil | _: T.RightParen   |_: T.LeftBracket | _: T.RightBracket  if true =>
    ???
}
>>>
x match {
  case _: T.LeftBrace | _: T.RightBrace | _: T.LeftParen | a :: b :: c :: Nil |
      _: T.RightParen | _: T.LeftBracket | _: T.RightBracket if true =>
    ???
}
<<< #1244 3.2 splitting on | and not on infix (infix long)
x match {
  case _: T.LeftBrace | _: T.RightBrace | _: T.LeftParen | a :: b :: c :: d :: Nil | _: T.RightParen   | _: T.LeftBracket | _: T.RightBracket  if true =>
    ???
}
>>>
x match {
  case _: T.LeftBrace | _: T.RightBrace | _: T.LeftParen |
      a :: b :: c :: d :: Nil | _: T.RightParen | _: T.LeftBracket |
      _: T.RightBracket if true =>
    ???
}
<<< #1244 4.1
object a {
          expectMsgPF() {
            case SymbolSearchResults(
                List(
                  TypeSearchResult(
                    "scala.util.Random",
                    "Random",
                    DeclaredAs.Class,
                    Some(_)),
                  TypeSearchResult(
                    "scala.util.Random$",
                    "Random$",
                    DeclaredAs.Class,
                    Some(_)))) =>
            case SymbolSearchResults(
                List(
                  TypeSearchResult(
                    "java.util.Random",
                    "Random",
                    DeclaredAs.Class,
                    Some(_)),
                  TypeSearchResult(
                    "scala.util.Random",
                    "Random",
                    DeclaredAs.Class,
                    Some(_)))) =>
            // this is a pretty ropey test at the best of times
          }
          }
>>>
object a {
  expectMsgPF() {
    case SymbolSearchResults(
          List(
            TypeSearchResult(
              "scala.util.Random",
              "Random",
              DeclaredAs.Class,
              Some(_)
            ),
            TypeSearchResult(
              "scala.util.Random$",
              "Random$",
              DeclaredAs.Class,
              Some(_)
            )
          )
        ) =>
    case SymbolSearchResults(
          List(
            TypeSearchResult(
              "java.util.Random",
              "Random",
              DeclaredAs.Class,
              Some(_)
            ),
            TypeSearchResult(
              "scala.util.Random",
              "Random",
              DeclaredAs.Class,
              Some(_)
            )
          )
        ) =>
    // this is a pretty ropey test at the best of times
  }
}
<<< #1244 4.2
object a {
  private def typecheckAll(): Unit = {
    try {
      task.parse()
      task.analyze()
      log.info(
        "Parsed and analyzed: " + (System.currentTimeMillis() - t) + "ms")
    } catch {
      case e @ (_: Abort | _: ArrayIndexOutOfBoundsException |
          _: AssertionError) =>
        log.error("Javac error: " + e.getMessage())
      case (_: Abort | _: ArrayIndexOutOfBoundsException |_: Throwable |
          _: AssertionError) =>
        log.error("Javac error: " + e.getMessage())
    }
  }
}
>>>
object a {
  private def typecheckAll(): Unit = {
    try {
      task.parse()
      task.analyze()
      log.info(
        "Parsed and analyzed: " + (System.currentTimeMillis() - t) + "ms"
      )
    } catch {
      case e @ (_: Abort | _: ArrayIndexOutOfBoundsException |
          _: AssertionError) =>
        log.error("Javac error: " + e.getMessage())
      case (_: Abort | _: ArrayIndexOutOfBoundsException | _: Throwable |
          _: AssertionError) =>
        log.error("Javac error: " + e.getMessage())
    }
  }
}
<<< #1244 5.1: nested block in body, verify correct indentation
object a {
  b match {
    case c => {}
     d
     case e => {
      f
     }
     g
  }
}
>>>
object a {
  b match {
    case c =>
      {}
      d
    case e =>
      {
        f
      }
      g
  }
}
