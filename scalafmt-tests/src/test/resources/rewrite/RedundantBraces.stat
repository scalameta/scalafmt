rewrite.rules = [RedundantBraces]
rewrite.redundantBraces.maxLines = 1
rewrite.redundantBraces.generalExpressions = true
<<< basic
object a {
  def x(i: Int): Int = {
    2
  }

  def y(i: Int): Int = {
    3
  }
  def z(i: Int): Int = {
    4
  }
}
>>>
object a {
  def x(i: Int): Int =
    2

  def y(i: Int): Int =
    3
  def z(i: Int): Int =
    4
}
<<< basic (format:off)
object a {
// format: off
  def x(i: Int): Int = {
    2
  }

  def y(i: Int): Int = {
    3
  }
  def z(i: Int): Int = {
    4
  }
}

>>>
object a {
// format: off
  def x(i: Int): Int = {
    2
  }

  def y(i: Int): Int = {
    3
  }
  def z(i: Int): Int = {
    4
  }
}
<<< respect max lines
object a {
  def x(i: Int): Int = {
    List.filter { x =>
      x > 1
    }
  }
}
>>>
object a {
  def x(i: Int): Int = {
    List.filter { x =>
      x > 1
    }
  }
}
<<< single line block
object a {
  def x(i: Int): Int = { 2 }
  def y(i: Int): Int = { 3 }
}
>>>
object a {
  def x(i: Int): Int = 2
  def y(i: Int): Int = 3
}
<<< empty expression
object a {
  def x: Unit = { }
}
>>>
object a {
  def x: Unit = {}
}
<<< right brace on same line as expression
object a {
  def x(i: Int): Int = {
    2 }
  def y(i: Int): Int = { 3 }
}
>>>
object a {
  def x(i: Int): Int =
    2
  def y(i: Int): Int = 3
}
<<< has comment
object a {
  def x(i: Int): Int = { // comment
    2
  }
}
>>>
object a {
  def x(i: Int): Int = // comment
    2
}
<<< has comment 2
object a {
  def x(i: Int): Int = {
    // comment
    2
  }
}
>>>
object a {
  def x(i: Int): Int =
    // comment
    2
}
<<< multiple stats
object a {
  def x(i: Int) = {
    2
    2
  }
}
>>>
object a {
  def x(i: Int) = {
    2
    2
  }
}
<<< procedure syntax
object a {
  def main(args: Seq[Int]) {
    2
  }
}
>>>
object a {
  def main(args: Seq[Int]) {
    2
  }
}
<<< procedure syntax 2
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
>>>
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
<<< no return type
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
>>>
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
<<< fixes your nested blocks
object a {
  def x: Int = {{ // comment
      2 } }
}
>>>
object a {
  def x: Int = // comment
    2
}
<<< fixes nested block in multi-line lambda 1
object a {
  method { x => { // 1
        2
        3
        4
     }
  }
}
>>>
object a {
  method { x => // 1
    2
    3
    4
  }
}
<<< fixes nested block in multi-line lambda 2
object a {
  method { x =>
     { // 1
        2
        3
        4
     }
  }
}
>>>
object a {
  method { x =>
    // 1
    2
    3
    4
  }
}
<<< turn block in multi-line paren lambda into curly lambda
object a {
  method ( x =>
     {
        2
        3
        4
     }
  )
}
>>>
object a {
  method { x =>
    2
    3
    4
  }
}
<<< #1631
class Test extends AnyWordSpec {
  "SUT" when {
    "statement about test" should {
      "some test" in {
        val s = 1
      }
    }
  }
}
>>>
class Test extends AnyWordSpec {
  "SUT" when {
    "statement about test" should {
      "some test" in {
        val s = 1
      }
    }
  }
}
<<< #1633 1.1: multiline infix
    "properly extract the value of www-urlencoded form fields" in {
      println
      Post("/", urlEncodedForm) ~> {
        formFields('firstName, "age".as[Int], 'sex.?, "VIP" ? false) {
          (firstName, age, sex, vip) ⇒
            complete(firstName + age + sex + vip)
        }
      } ~> check { responseAs[String] shouldEqual "Mike42Nonefalse" }
    }
>>>
"properly extract the value of www-urlencoded form fields" in {
  println
  Post("/", urlEncodedForm) ~> {
    formFields('firstName, "age".as[Int], 'sex.?, "VIP" ? false) {
      (firstName, age, sex, vip) ⇒
        complete(firstName + age + sex + vip)
    }
  } ~> check { responseAs[String] shouldEqual "Mike42Nonefalse" }
}
<<< #1633 1.2: func with placeholder and select
object a {
  def findAccountByAPIKey(apiKey: APIKey) = byKeyCache.get(apiKey) match {
    case None =>
      delegate.findAccountByAPIKey(apiKey) map {
         _ map _ tap (add(apiKey, _)) unsafePerformIO
      }
  }
}
>>>
object a {
  def findAccountByAPIKey(apiKey: APIKey) = byKeyCache.get(apiKey) match {
    case None =>
      delegate.findAccountByAPIKey(apiKey) map {
        _ map _ tap (add(apiKey, _)) unsafePerformIO
      }
  }
}
<<< #1633 1.3: func with placeholder and infix
object a {
  def findAccountByAPIKey(apiKey: APIKey) = byKeyCache.get(apiKey) match {
    case None =>
      delegate.findAccountByAPIKey(apiKey) map {
         _ map(_) tap (add(apiKey, _)) unsafePerformIO(foo)
      }
  }
}
>>>
object a {
  def findAccountByAPIKey(apiKey: APIKey) = byKeyCache.get(apiKey) match {
    case None =>
      delegate.findAccountByAPIKey(apiKey) map {
        _ map (_) tap (add(apiKey, _)) unsafePerformIO (foo)
      }
  }
}
<<< #1633 1.4: func
object a {
  def findAccountByAPIKey(apiKey: APIKey) = byKeyCache.get(apiKey) match {
    case None =>
      delegate.findAccountByAPIKey(apiKey) map { x =>
         x._1 map x._2 tap (add(apiKey, _)) unsafePerformIO
      }
  }
}
>>>
object a {
  def findAccountByAPIKey(apiKey: APIKey) = byKeyCache.get(apiKey) match {
    case None =>
      delegate.findAccountByAPIKey(apiKey) map { x =>
        x._1 map x._2 tap (add(apiKey, _)) unsafePerformIO
      }
  }
}
<<< #1633 1.5: partial func
object a {
  def findAccountByAPIKey(apiKey: APIKey) = byKeyCache.get(apiKey) match {
    case None =>
      delegate.findAccountByAPIKey(apiKey) map { case (x,y) =>
         x map y tap (add(apiKey, _)) unsafePerformIO
      }
  }
}
>>>
object a {
  def findAccountByAPIKey(apiKey: APIKey) = byKeyCache.get(apiKey) match {
    case None =>
      delegate.findAccountByAPIKey(apiKey) map {
        case (x, y) =>
          x map y tap (add(apiKey, _)) unsafePerformIO
      }
  }
}
<<< #1633 2.1: function block in an if-statement
object a {
    val select = if (max) { (a: CTuple, b: CTuple) =>
      (a.compareTo(b) >= 0)
    } else { (a: CTuple, b: CTuple) =>
      (a.compareTo(b) <= 0)
    }
}
>>>
object a {
  val select =
    if (max)(a: CTuple, b: CTuple) => (a.compareTo(b) >= 0)
    else (a: CTuple, b: CTuple) => (a.compareTo(b) <= 0)
}
<<< #1633 2.2: function block in a val statement
object a {
    val select = { (a: CTuple, b: CTuple) =>
      (a.compareTo(b) >= 0)
    }
}
>>>
object a {
  val select = { (a: CTuple, b: CTuple) =>
    (a.compareTo(b) >= 0)
  }
}
<<< #1633 3.1: function block in a val statement
object a {
  b getOrElse { c(d) }
}
>>>
object a {
  b getOrElse { c(d) }
}
<<< #1633 3.2: function block in a val statement
object a {
  b getOrElse { c.d {e} }
}
>>>
object a {
  b getOrElse { c.d { e } }
}
<<< #1633 3.3: function block in a val statement
object a {
  b getOrElse { c }
}
>>>
object a {
  b getOrElse c
}
<<< #1633 3.4: function block in a val statement
object a {
  b map { _.select }
}
>>>
object a {
  b map { _.select }
}
<<< #1633 3.5: function block in a val statement
object a {
  b map { _.apply(_) }
}
>>>
object a {
  b map { _.apply(_) }
}
<<< #1633 4.1: infix with literal
object a {
  1 + {
    2
  } + 3
}
>>>
object a {
  1 +
    2
  +3
}
<<< #1633 4.2: infix with literal and no break before
object a {
  1 + {
    2  } + 3
}
>>>
object a {
  1 +
    2 + 3
}
<<< #1633 4.3: infix with literal and comment
object a {
  1 + {
    2 // comment
  } + 3
}
>>>
object a {
  1 +
    2 // comment
  +3
}
<<< #1633 4.4: infix with literal and two comments
object a {
  1 + {
    2 // comment
  } + // comment
   3
}
>>>
test does not parse
object a {
  1 +
    2 // comment
  + // comment
  3
}
<<< #1633 4.5: infix with apply
object a {
  1 + {
    a(b)
  } + 3
}
>>>
object a {
  1 + {
    a(b)
  } + 3
}
<<< #1633 4.6: infix with apply and no break before
object a {
  1 + {
    a(b)  } + 3
}
>>>
object a {
  1 + {
    a(b)
  } + 3
}
<<< #1633 4.7: infix with apply and comment
object a {
  1 + {
    a(b) // comment
  } + 3
}
>>>
object a {
  1 + {
    a(b) // comment
  } + 3
}
<<< #1633 4.8: infix with apply and two comments
object a {
  1 + {
    a(b) // comment
  } + // comment
   3
}
>>>
object a {
  1 + {
    a(b) // comment
  } + // comment
    3
}
<<< #1633 5.1: verify correct newline removal
object a {
  val b = c(d => {
    e } // comment1
    /* comment2 */ )
    /* comment3 */
}
>>>
object a {
  val b = c { d =>
    e
  } // comment1
  /* comment2 */ /* comment3 */
}
<<< #1633 5.2: keep config style
object a {
  val b = c(
    d,
    e => {
     f }
  )
}
>>>
object a {
  val b = c(d, e => f)
}
