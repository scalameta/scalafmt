rewrite.rules = [RedundantBraces]
rewrite.redundantBraces.maxLines = 1
rewrite.redundantBraces.generalExpressions = true
<<< basic
object a {
  def x(i: Int): Int = {
    2
  }

  def y(i: Int): Int = {
    3
  }
  def z(i: Int): Int = {
    4
  }
}
>>>
object a {
  def x(i: Int): Int =
    2

  def y(i: Int): Int =
    3
  def z(i: Int): Int =
    4
}
<<< basic (format:off)
object a {
// format: off
  def x(i: Int): Int = {
    2
  }

  def y(i: Int): Int = {
    3
  }
  def z(i: Int): Int = {
    4
  }
}

>>>
object a {
// format: off
  def x(i: Int): Int = 
    2
  
  def y(i: Int): Int = 
    3
    def z(i: Int): Int = 
    4
  }
<<< respect max lines
object a {
  def x(i: Int): Int = {
    List.filter { x =>
      x > 1
    }
  }
}
>>>
object a {
  def x(i: Int): Int = {
    List.filter { x =>
      x > 1
    }
  }
}
<<< single line block
object a {
  def x(i: Int): Int = { 2 }
  def y(i: Int): Int = { 3 }
}
>>>
object a {
  def x(i: Int): Int = 2
  def y(i: Int): Int = 3
}
<<< empty expression
object a {
  def x: Unit = { }
}
>>>
object a {
  def x: Unit = {}
}
<<< right brace on same line as expression
object a {
  def x(i: Int): Int = {
    2 }
  def y(i: Int): Int = { 3 }
}
>>>
object a {
  def x(i: Int): Int =
    2
  def y(i: Int): Int = 3
}
<<< has comment
object a {
  def x(i: Int): Int = { // comment
    2
  }
}
>>>
object a {
  def x(i: Int): Int = // comment
    2
}
<<< has comment 2
object a {
  def x(i: Int): Int = {
    // comment
    2
  }
}
>>>
object a {
  def x(i: Int): Int =
    // comment
    2
}
<<< multiple stats
object a {
  def x(i: Int) = {
    2
    2
  }
}
>>>
object a {
  def x(i: Int) = {
    2
    2
  }
}
<<< procedure syntax
object a {
  def main(args: Seq[Int]) {
    2
  }
}
>>>
object a {
  def main(args: Seq[Int]) {
    2
  }
}
<<< procedure syntax 2
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
>>>
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
<<< no return type
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
>>>
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
<<< fixes your nested blocks
object a {
  def x: Int = {{ // comment
      2 } }
}
>>>
object a {
  def x: Int = // comment
    2
}
<<< fixes nested block in multi-line lambda 1
object a {
  method { x => { // 1
        2
        3
        4
     }
  }
}
>>>
object a {
  method { x => // 1
    2
    3
    4
  }
}
<<< fixes nested block in multi-line lambda 2
object a {
  method { x =>
     { // 1
        2
        3
        4
     }
  }
}
>>>
object a {
  method { x =>
    // 1
    2
    3
    4
  }
}
<<< turn block in multi-line paren lambda into curly lambda
object a {
  method ( x =>
     {
        2
        3
        4
     }
  )
}
>>>
object a {
  method { x =>
    2
    3
    4
  }
}
