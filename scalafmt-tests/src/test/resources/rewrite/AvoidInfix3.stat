maxColumn = 160
rewrite.rules = [AvoidInfix]
<<< already in parens
(NotQuoted ~ any.*) map { x =>
  x
}
>>>
(NotQuoted ~ any.*).map { x =>
  x
}
<<< settings
Project("sub", file("sub")) delegateTo (root) settings (check <<= checkTask)
>>>
Project("sub", file("sub")).delegateTo(root).settings(check <<= checkTask)
<<< #739 AvoidInfix Bug
onLoad in Global := (Command.process("project server", _: State)) compose (onLoad in Global).value
>>>
onLoad in Global := (Command.process("project server", _: State)).compose((onLoad in Global).value)
<<< #934 !allowInfixPlaceholderArg
rewrite.allowInfixPlaceholderArg = false
===
object a {
  b.c(_ foo 0)
  b.c(foo bar _)
  b.c(foo _ bar 0)
  b.c((foo _) bar 0)
  b.c(_ foo bar baz 0)
  b.c(foo bar _ baz 0)
  b.c(foo bar _ * 1 baz 0)
}
>>>
object a {
  b.c(_.foo(0))
  b.c(foo.bar(_))
  b.c((foo _).bar(0))
  b.c((foo _).bar(0))
  b.c(_.foo(bar).baz(0))
  b.c(foo.bar(_).baz(0))
  b.c(foo bar _ * 1 baz 0)
}
<<< #934 allowInfixPlaceholderArg
rewrite.allowInfixPlaceholderArg = true
===
object a {
  b.c(_ foo 0)
  b.c(foo bar _)
  b.c(foo _ bar 0)
  b.c((foo _) bar 0)
  b.c(_ foo bar baz 0)
  b.c(foo bar _ baz 0)
  b.c(foo bar _ * 1 baz 0)
}
>>>
object a {
  b.c(_.foo(0))
  b.c(foo bar _)
  b.c((foo _).bar(0))
  b.c((foo _).bar(0))
  b.c(_.foo(bar).baz(0))
  b.c(foo bar _ baz 0)
  b.c(foo bar _ * 1 baz 0)
}
<<< #2830 1
object a {
  new Foo run bar
  (new Foo) run bar
}
>>>
object a {
  (new Foo).run(bar)
  (new Foo).run(bar)
}
<<< #2830 2
object a {
  new Foo run new Bar
}
>>>
object a {
  (new Foo).run(new Bar)
}
<<< #2830 3
object a {
  new Foo(a, b) run new Bar
}
>>>
object a {
  (new Foo(a, b)).run(new Bar)
}
<<< #1047 1
val i: Ordering[I] = Ordering.fromLessThan(_.i isAfter _.i)
>>>
val i: Ordering[I] = Ordering.fromLessThan(_.i isAfter _.i)
<<< #1141 1
object a {
  implicit val locationReads: Reads[Location] = (
    (JsPath \ "lat").read[Double] and
    (JsPath \ "long").read[Double]
  )(Location.apply _)
}
>>>
object a {
  implicit val locationReads: Reads[Location] = (
    (JsPath \ "lat").read[Double].and((JsPath \ "long").read[Double])
  )(Location.apply _)
}
<<< #1141 2
maxColumn = 80
===
object a {
  implicit val locationReads: Reads[Location] = (
    (JsPath \ "lat").read[Double] and
    ((JsPath \ "long").read[Double]) and
    ((JsPath \ "anotherField").read[String])
  )(Location.apply _)
}
>>>
object a {
  implicit val locationReads: Reads[Location] = (
    (JsPath \ "lat")
      .read[Double]
      .and((JsPath \ "long").read[Double])
      .and((JsPath \ "anotherField").read[String])
  )(Location.apply _)
}
<<< #842 1
maxColumn = 80
===
object a {
  implicit val locationReads: Reads[Location] = (
    (JsPath \ "lat").read[Double] and
    ((JsPath \ "long").read[Double]) and // comment
    ((JsPath \ "anotherField").read[String])
  )(Location.apply _)
}
>>>
object a {
  implicit val locationReads: Reads[Location] = (
    (JsPath \ "lat")
      .read[Double]
      .and((JsPath \ "long").read[Double])
      .and( // comment
        (JsPath \ "anotherField").read[String]
      )
  )(Location.apply _)
}
<<< args with parens
object a {
  b c
    ()
  b c
    (())
  b c
    (d, e)
  b c
    ((d, e))
  b c
    (c + d).foo
}
>>>
object a {
  b.c(
  )
  b.c(())
  b.c(d, e)
  b.c((d, e))
  b.c((c + d).foo)
}
<<< args with parens and comments
object a {
  b c /* c1 */
    ( /* c2 */ )
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ ))
  b c /* c1 */
    ( /* c2 */ d, e)
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ d, e))
  b c /* c1 */
    ( /* c2 */ c + d /* c3 */ ).foo
}
>>>
object a {
  b.c( /* c1 */
    /* c2 */
  )
  b.c( /* c1 */
    /* c2 */ ( /* c3 */ )
  )
  b.c( /* c1 */
    /* c2 */ d,
    e
  )
  b.c( /* c1 */
    /* c2 */ ( /* c3 */ d, e)
  )
  b.c( /* c1 */
    ( /* c2 */ c + d /* c3 */ ).foo
  )
}
<<< args with parens, targs and comments
object a {
  b c /* c1 */
    [A] /* c2 */
    ( /* c3 */ )
  b c /* c1 */
    [A] /* c2 */
    ( /* c3 */ d, e)
}
>>>
object a {
  b.c[ /* c1 */
    A
  ]( /* c2 */
    /* c3 */
  )
  b.c[ /* c1 */
    A
  ]( /* c2 */
    /* c3 */ d,
    e
  )
}
<<< args with unit, targs and comments
object a {
  b c [A] /* c1 */
    ( /* c2 */ ( /* c3 */ ))
}
>>>
object a {
  b.c[A]( /* c1 */
    /* c2 */ ( /* c3 */ )
  )
}
<<< args with tuple, targs and comments
object a {
  b c [A] /* c1 */
    ( /* c2 */ ( /* c3 */ d, e))
}
>>>
object a {
  b.c[A]( /* c1 */
    /* c2 */ ( /* c3 */ d, e)
  )
}
