rewrite.rules = [PreferCurlyFors]
<<< replaces parens with braces and removes semi-colons on single line multi generator for expression
object a {
  for(a <- as; b <- bs if b > 2) {
    println(a + b)
  }
}
>>>
object a {
  for {
    a <- as
    b <- bs if b > 2
  } {
    println(a + b)
  }
}
<<< replaces parens with braces and removes semi-colons on single line multi generator for expression (format:off)
object a {
// format: off
  for(a <- as; b <- bs if b > 2) {
    println(a + b)
  }
}

>>>
object a {
// format: off
  for(a <- as; b <- bs if b > 2) {
    println(a + b)
  }
}
<<< doesn't change single generator for expression that uses parens
object a {
  for (a <- as) {
    println(a)
  }
}
>>>
object a {
  for (a <- as) {
    println(a)
  }
}
<<< doesn't change single generator for expression with guard that uses parens
object a {
  for (a <- as if a < 5) yield a
}
>>>
object a {
  for (a <- as if a < 5) yield a
}
<<< replaces parens with braces and removes semi-colons on multi line multi generator for expression
object a {
  for (
    a <- as;
    b <- bs
  ) {
    println(a + b)
  }
}
>>>
object a {
  for {
    a <- as
    b <- bs
  } {
    println(a + b)
  }
}
<<< doesn't change for expression that already has braces
object a {
  for {
    a <- as
  } {
    println(a)
  }
}
>>>
object a {
  for {
    a <- as
  } {
    println(a)
  }
}
<<< removes only trailing semi-colons 1
rewrite.preferCurlyFors.removeTrailingSemicolonsOnly = true
===
object a {
  for (
    a <- as; // comment
    b <- bs;
    c <- cs; d <- ds
  ) {
    println(a + b)
  }
}
>>>
object a {
  for {
    a <- as // comment
    b <- bs
    c <- cs; d <- ds
  } {
    println(a + b)
  }
}
<<< removes only trailing semi-colons 2
rewrite.preferCurlyFors.removeTrailingSemicolonsOnly = false
===
object a {
  for (
    a <- as; // comment
    b <- bs;
    c <- cs; d <- ds
  ) {
    println(a + b)
  }
}
>>>
object a {
  for {
    a <- as // comment
    b <- bs
    c <- cs
    d <- ds
  } {
    println(a + b)
  }
}
<<< #2695 generator and val
object O {
  for (pos <- "a->1|b->2".split('|'); c = pos.split("->"))
  yield ()
}
>>>
object O {
  for {
    pos <- "a->1|b->2".split('|')
    c = pos.split("->")
  } yield ()
}
<<< #2695 generator and multiple guards, braces but semicolons
object O {
  for { a <- b; if c; if d } yield ()
}
>>>
object O {
  for {
    a <- b if c
    if d
  } yield ()
}
<<< #2695 generator and multiple guards, parens and semicolons
object O {
  for (a <- b; if c; if d) yield ()
}
>>>
object O {
  for (
    a <- b if c
    if d
  ) yield ()
}
