rewrite.rules = [RedundantParens]
<<< basic
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if ((a))
    } yield a
}
>>>
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if a
    } yield a
}
<<< basic (format:off)
object a {
// format: off
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if ((a))
    } yield a
}

>>>
object a {
// format: off
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if ((a))
    } yield a
}
<<< imbalanced sides
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if ((b ++ b).length >= 2)
    } yield a
}
>>>
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if (b ++ b).length >= 2
    } yield a
}
<<< compound statement
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if (a) || (a)
    } yield a
}
>>>
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if a || a
    } yield a
}
<<< nested compound statement
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if ((a)) || ((a))
    } yield a
}
>>>
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if a || a
    } yield a
}
<<< basic match
object a {
  b match { case _ if (a) => b }
}
>>>
object a {
  b match { case _ if a => b }
}
<<< compound match
object a {
  b match { case _ if (a) || (a) => b }
}
>>>
object a {
  b match { case _ if a || a => b }
}
<<< nested compound match
object a {
  b match { case _ if ((a) || (a)) => b }
}
>>>
object a {
  b match { case _ if a || a => b }
}
<<< single-arg apply of a block 1
object a {
  a({ b => c })
}
>>>
object a {
  a { b => c }
}
<<< single-arg apply of a block 2
object a {
  a({ b; c })
}
>>>
object a {
  a { b; c }
}
<<< single-arg apply of a block 3
object a {
  (
  a
   { b; c }
   )
}
>>>
object a {
  a { b; c }
}
<<< #1895 1
object a {
  val x = ((1))
}
>>>
object a {
  val x = 1
}
<<< #1895 2
object a {
  val z = ((insertData *> readDatabase(id)))
}
>>>
object a {
  val z = insertData *> readDatabase(id)
}
<<< #1895 3
rewrite.rules = [AvoidInfix, RedundantParens]
===
object a {
  val z = (((insertData) op (readDatabase(id))))
  val z = (((insertData)
   op (readDatabase(id))))
}
>>>
object a {
  val z = insertData.op(readDatabase(id))
  val z = insertData
    .op(readDatabase(id))
}
<<< #1895 4
object a {
  val a: (String, String) = ("abcde", "idfa")
  val a: ((String, String)) = (("abcde", "idfa"))
  val a = (("abcde", "idfa"))
  val a = ((("abcde", "idfa")))
  val (a, b) = ("abcde", "idfa")
}
>>>
object a {
  val a: (String, String) = ("abcde", "idfa")
  val a: ((String, String)) = (("abcde", "idfa"))
  val a = (("abcde", "idfa"))
  val a = (("abcde", "idfa"))
  val (a, b) = ("abcde", "idfa")
}
<<< #1895 5
object a {
  def a: (String, String) = ("abcde", "idfa")
  def a: ((String, String)) = (("abcde", "idfa"))
  def a = (("abcde", "idfa"))
  def a = ((("abcde", "idfa")))
}
>>>
object a {
  def a: (String, String) = ("abcde", "idfa")
  def a: ((String, String)) = (("abcde", "idfa"))
  def a = (("abcde", "idfa"))
  def a = (("abcde", "idfa"))
}
<<< #1895 6
object a {
  (a eq b) && (c match {
    case d => true
  })
}
>>>
object a {
  (a eq b) && (c match {
    case d => true
  })
}
<<< #1895 7
object a {
  b((a, b, c))
}
>>>
object a {
  b((a, b, c))
}
<<< #1903 1
object a {
  a == ((b, c, d))
}
>>>
object a {
  a == ((b, c, d))
}
<<< don't rewrite infix when AvoidInfix
rewrite.rules = [AvoidInfix, RedundantParens]
===
object a {
  join(a, b)(
        (x, y) =>
          where(
            x.foo < maxRetry and
              y.retryCount === x.bar and
              task.status === Failed
          )
            select (task)
            on (x.id === key and
              y.id === key)
      ).toList
}
>>>
object a {
  join(a, b)((x, y) =>
    where(
      (x.foo < maxRetry).and(y.retryCount === x.bar).and(task.status === Failed)
    )
      .select(task)
      .on((x.id === key).and(y.id === key))
  ).toList
}
<<< don't rewrite infix as rhs
object a {
  private val foo = ((bar == baz
     || bar == baz)
      || bar == baz)
}
>>>
object a {
  private val foo = ((bar == baz
    || bar == baz)
    || bar == baz)
}
<<< #1953
object a {
  scalacOptions ~= (_ filterNot (_ startsWith "-Xlint"))
}
>>>
object a {
  scalacOptions ~= (_ filterNot (_ startsWith "-Xlint"))
}
<<< Lit.Unit preserved
object a {
  print("") shouldBe (())
}
>>>
object a {
  print("") shouldBe (())
}
<<< yield without a space
object a {
  val x = for {
    a <- b
  } yield(a)
}
>>>
object a {
  val x = for {
    a <- b
  } yield a
}
<<< #2117 if without a space
object a {
  a match {
    case a if(((a))) =>
  }
}
>>>
object a {
  a match {
    case a if a =>
  }
}
<<< #2163
val map = (Map("A" -> 1) - "Test" - "Test" - "Test" - "Test" - "Test"
    - "Test" - "Test" - "Test" - "Test" - "Test" - "Test" - "Test" + "B" -> 2)
>>>
val map = (Map("A" -> 1) - "Test" - "Test" - "Test" - "Test" - "Test"
  - "Test" - "Test" - "Test" - "Test" - "Test" - "Test" - "Test" + "B" -> 2)
<<< #2194 1 match
object a {
  val b = c match {
    case true if (d match {
      case true  => true
      case false => false
    }) =>
  }
}
>>>
object a {
  val b = c match {
    case true if (d match {
          case true  => true
          case false => false
        }) =>
  }
}
<<< #2194 2 infix
object a {
  val b = c match {
    case true if (d map {
      case true  => true
      case false => false
    }) =>
    case true if (d
      map {
        case true  => true
        case false => false
      }) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d map {
          case true  => true
          case false => false
        } =>
    case true
        if d
          map {
            case true  => true
            case false => false
          } =>
  }
}
<<< #2194 3 apply with brace
object a {
  val b = c match {
    case true if (d.map {
      case true  => true
      case false => false
    }) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d.map {
          case true  => true
          case false => false
        } =>
  }
}
<<< #2194 4 apply with paren
object a {
  val b = c match {
    case true if (d.map({
      case true  => true
      case false => false
    })) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d.map {
          case true  => true
          case false => false
        } =>
  }
}
<<< #2194 5 infix with parens
object a {
  val b = c match {
    case true if (d map(({
      case true  => true
      case false => false
    }))) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d map {
          case true  => true
          case false => false
        } =>
  }
}
<<< #2194 5 infix with parens and extra term
object a {
  val b = c match {
    case true if true && (d map({
      case true  => true
      case false => false
    })) =>
  }
}
>>>
object a {
  val b = c match {
    case true if true && (d map {
          case true  => true
          case false => false
        }) =>
  }
}
<<< #2194 6 match with parens and scala2
object a {
  val b = c match {
    case true if (d match {
      case true  => true
      case false => false
    }) =>
  }
}
>>>
object a {
  val b = c match {
    case true if (d match {
          case true  => true
          case false => false
        }) =>
  }
}
<<< #2194 6 match with parens and scala3
runner.dialect = scala3
===
object a {
  val b = c match {
    case true if (d match (({
      case true  => true
      case false => false
    }))) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d match {
          case true  => true
          case false => false
        } =>
  }
}
<<< #2194 6 match with parens and no braces
runner.dialect = scala3
===
object a {
  val b = c match {
    case true if (d match
      case true  => true
      case false => false
    ) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d match
          case true  => true
          case false => false
        =>
  }
}
<<< #2194 6 match with parens and dot
runner.dialect = scala3
===
object a {
  val b = c + (d.match{
      case true  => true
      case false => false
  })
  val b = c + (d.match{
      case true  => true
      case false => false
  }) + e
  val b = c + (d match{
      case true  => true
      case false => false
  })
}
>>>
object a {
  val b = c + d.match {
    case true  => true
    case false => false
  }
  val b = c + d.match {
    case true  => true
    case false => false
  } + e
  val b = c + (d match {
    case true  => true
    case false => false
  })
}
<<< #2194 6 match with parens, dot and no braces
runner.dialect = scala3
===
object a {
  val b = c + (d.match
      case true  => true
      case false => false)
  val b = c + (d.match
      case true  => true
      case false => false) + e
  val b = c + (d match
      case true  => true
      case false => false
  )
}
>>>
object a {
  val b = c + (d.match
    case true  => true
    case false => false
  )
  val b = c + (d.match
    case true  => true
    case false => false
  ) + e
  val b = c + (d match
    case true  => true
    case false => false
  )
}
<<< #2194 5 unary
object a {
  val b = c match {
    case false if (+1) =>
    case false if (-1) =>
    case false if (~1) =>
    case false if (!1) =>
  }
}
>>>
object a {
  val b = c match {
    case false if +1 =>
    case false if -1 =>
    case false if ~1 =>
    case false if !1 =>
  }
}
<<< parens for infix with interpolate
object a {
  the[Exception] thrownBy a should have message("b")
  the[Exception] thrownBy a should have message(s"b")
  the[Exception] thrownBy a should have message(f"b")
}
>>>
object a {
  the[Exception] thrownBy a should have message "b"
  the[Exception] thrownBy a should have message s"b"
  the[Exception] thrownBy a should have message f"b"
}
<<< parens for infix with interpolate with AvoidInfix
rewrite.rules = [RedundantParens, AvoidInfix]
rewrite.neverInfix.excludeFilters = [message]
===
object a {
  the[Exception] thrownBy a should have message("b")
  the[Exception] thrownBy a should have message(s"b")
  the[Exception] thrownBy a should have message(f"b")
}
>>>
object a {
  the[Exception].thrownBy(a).should(have) message "b"
  the[Exception].thrownBy(a).should(have) message s"b"
  the[Exception].thrownBy(a).should(have) message f"b"
}
<<< parens for infix with interpolate with AvoidInfix/neverInfix
rewrite.rules = [RedundantParens, AvoidInfix]
rewrite.neverInfix.excludeFilters = [message, thrownBy, should]
===
object a {
  the[Exception] thrownBy a should have message("b")
  the[Exception] thrownBy a should have message(s"b")
  the[Exception] thrownBy a should have message(f"b")
}
>>>
object a {
  the[Exception] thrownBy a should have message "b"
  the[Exception] thrownBy a should have message s"b"
  the[Exception] thrownBy a should have message f"b"
}
<<< #2495 partial function
val a = List(Some(1), None, Some(3), Some(4)).map({
  case Some(x) => x match {
    case 1 => "one"
    case _ => "more than one"
  }
  case _ => "none"
})
>>>
val a = List(Some(1), None, Some(3), Some(4)).map {
  case Some(x) =>
    x match {
      case 1 => "one"
      case _ => "more than one"
    }
  case _ => "none"
}
<<< #2612 1
maxColumn = 120
binPack.unsafeCallSite = Always
rewrite.rules = [RedundantParens]
===
object Application {
  val app = reactiveWebApplication((a) =>
    a.beans((b) => b.bean(classOf[SampleHandler]).bean(classOf[SampleService]))
      .enable(
        webFlux((server) =>
          server
            .port(if (server.profiles().contains("test")) 8181 else 8080)
            .router((app) => {
              val handler = server.ref(classOf[SampleHandler])

        app.GET("/", (req) => {
          app.GET("/new", (req) => {
              ServerResponse.ok().bodyValue("dynamically created during GET / index request")
          })
            handler.hello(req)
        })
        app.GET("/api", handler.json)


            })
            .codecs(_.string().jackson())
        )
      )
  )

  def main(args: Array[String]): Unit = app.run(args)
}
>>>
object Application {
  val app = reactiveWebApplication(a =>
    a.beans(b => b.bean(classOf[SampleHandler]).bean(classOf[SampleService]))
      .enable(
        webFlux(server =>
          server
            .port(if (server.profiles().contains("test")) 8181 else 8080)
            .router(app => {
              val handler = server.ref(classOf[SampleHandler])

              app.GET("/",
                req => {
                  app.GET("/new",
                    req => {
                      ServerResponse.ok().bodyValue("dynamically created during GET / index request")
                    })
                  handler.hello(req)
                })
              app.GET("/api", handler.json)

            })
            .codecs(_.string().jackson())
        )
      )
  )

  def main(args: Array[String]): Unit = app.run(args)
}
<<< #2612 2
maxColumn = 120
binPack.unsafeCallSite = Oneline
rewrite.rules = [RedundantParens]
===
object Application {
  val app = reactiveWebApplication((a) =>
    a.beans((b) => b.bean(classOf[SampleHandler]).bean(classOf[SampleService]))
      .enable(
        webFlux((server) =>
          server
            .port(if (server.profiles().contains("test")) 8181 else 8080)
            .router((app) => {
              val handler = server.ref(classOf[SampleHandler])

        app.GET("/", (req) => {
          app.GET("/new", (req) => {
              ServerResponse.ok().bodyValue("dynamically created during GET / index request")
          })
            handler.hello(req)
        })
        app.GET("/api", handler.json)


            })
            .codecs(_.string().jackson())
        )
      )
  )

  def main(args: Array[String]): Unit = app.run(args)
}
>>>
object Application {
  val app = reactiveWebApplication(a =>
    a.beans(b => b.bean(classOf[SampleHandler]).bean(classOf[SampleService]))
      .enable(
        webFlux(server =>
          server
            .port(if (server.profiles().contains("test")) 8181 else 8080)
            .router(app => {
              val handler = server.ref(classOf[SampleHandler])

              app.GET("/",
                req => {
                  app.GET("/new",
                    req => {
                      ServerResponse.ok().bodyValue("dynamically created during GET / index request")
                    })
                  handler.hello(req)
                })
              app.GET("/api", handler.json)

            })
            .codecs(_.string().jackson())
        )
      )
  )

  def main(args: Array[String]): Unit = app.run(args)
}
<<< #2712 literal
class Toto() {
  private def myScalaFmtTest(): String = {
    val test = new Toto
    ("test")
  }
}
>>>
class Toto() {
  private def myScalaFmtTest(): String = {
    val test = new Toto
    "test"
  }
}
<<< #2712 name
class Toto() {
  private def myScalaFmtTest(): String = {
    val test = new Toto
    (a)
  }
}
>>>
class Toto() {
  private def myScalaFmtTest(): String = {
    val test = new Toto
    a
  }
}
<<< #3105
foo >>= (_.http(registry, port).map(Option.apply(_)).catchSome {
    bar
})
>>>
foo >>= (_.http(registry, port).map(Option.apply(_)).catchSome {
  bar
})
<<< infix with parens and comments
object a {
  b c /* c1 */
    ( /* c2 */ )
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ ))
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ ( /* c4 */ )  ))
  b c /* c1 */
    ( /* c2 */ d, e)
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ d, e))
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ ( /* c4 */ d, e)))
  b c /* c1 */
    ( /* c2 */ c + d /* c3 */ ).foo
}
>>>
object a {
  b c /* c1 */
    (/* c2 */ )
  b c /* c1 */
    (/* c2 */ (/* c3 */ ))
  b c /* c1 */
    (/* c2 */ (/* c3 */ (/* c4 */ )))
  b c /* c1 */
    (/* c2 */ d, e)
  b c /* c1 */
    (/* c2 */ ( /* c3 */ d, e))
  b c /* c1 */
    (/* c2 */ ( /* c3 */ ( /* c4 */ d, e)))
  b c /* c1 */
    (/* c2 */ c + d /* c3 */ ).foo
}
<<< infix with parens, targs and comments
object a {
  b c /* c1 */
    [A] /* c2 */
    ( /* c3 */ )
  b c /* c1 */
    [A] /* c2 */
    ( /* c3 */ d, e)
}
>>>
object a {
  b c /* c1 */
    [A] /* c2 */
    (/* c3 */ )
  b c /* c1 */
    [A] /* c2 */
    (/* c3 */ d, e)
}
