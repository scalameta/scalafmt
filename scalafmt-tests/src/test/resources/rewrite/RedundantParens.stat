rewrite.rules = [RedundantParens]
<<< basic
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if ((a))
    } yield a
}
>>>
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if a
    } yield a
}
<<< basic (format:off)
object a {
// format: off
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if ((a))
    } yield a
}

>>>
object a {
// format: off
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if ((a))
    } yield a
}
<<< imbalanced sides
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if ((b ++ b).length >= 2)
    } yield a
}
>>>
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if (b ++ b).length >= 2
    } yield a
}
<<< compound statement
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if (a) || (a)
    } yield a
}
>>>
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if a || a
    } yield a
}
<<< nested compound statement
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if ((a)) || ((a))
    } yield a
}
>>>
object a {
  def c(b: List[Int]): List[Int] =
    for {
      a <- b
      if a || a
    } yield a
}
<<< basic match
object a {
  b match { case _ if (a) => b }
}
>>>
object a {
  b match { case _ if a => b }
}
<<< compound match
object a {
  b match { case _ if (a) || (a) => b }
}
>>>
object a {
  b match { case _ if a || a => b }
}
<<< nested compound match
object a {
  b match { case _ if ((a) || (a)) => b }
}
>>>
object a {
  b match { case _ if a || a => b }
}
<<< single-arg apply of a function not in block
object a {
  (a(b => c))
  (a((b) => c))
  (a(((b)) => c))
  (a((b: Int) => c))
  (a(((b): Int) => c))
  (a(((b: Int)) => c))
}
>>>
object a {
  a(b => c)
  a(b => c)
  a(b => c)
  a((b: Int) => c)
  a((b: Int) => c)
  a((b: Int) => c)
}
<<< apply of a block or partial function
object a {
  a({ b => c })
  (a({ b => c }))
  (a({ (b) => c }))
  (a({ (b: Int) => c }))
  a({ b; c })
  (a({ b; c }))
  a(({ b => c }), ({ b; c }))
  (a(({ b => c }), ({ b; c })))
}
>>>
object a {
  a { b => c }
  a { b => c }
  a { b => c }
  a { (b: Int) => c }
  a { b; c }
  a { b; c }
  a({ b => c }, { b; c })
  a({ b => c }, { b; c })
}
<<< block/partial func
def a = {
  foo
  ({ bar + baz })
  foo
  ({ bar => baz })
  foo = ({ bar + baz })
  foo = ({ bar => baz })
}
>>>
def a = {
  foo
  ({ bar + baz })
  foo
  ({ bar => baz })
  foo = { bar + baz }
  foo = { bar => baz }
}
<<< single-arg apply of a block 3
object a {
  (
  a
   { b; c }
   )
}
>>>
object a {
  a { b; c }
}
<<< #1895 1
object a {
  val x = ((1))
}
>>>
object a {
  val x = 1
}
<<< #1895 2
object a {
  val z = ((insertData *> readDatabase(id)))
}
>>>
object a {
  val z = insertData *> readDatabase(id)
}
<<< #1895 3
rewrite.rules = [AvoidInfix, RedundantParens]
===
object a {
  val z = (((insertData) op (readDatabase(id))))
  val z = (((insertData)
   op (readDatabase(id))))
}
>>>
object a {
  val z = insertData.op(readDatabase(id))
  val z = insertData
    .op(readDatabase(id))
}
<<< #1895 4
object a {
  val a: (String, String) = ("abcde", "idfa")
  val a: ((String, String)) = (("abcde", "idfa"))
  val a = (("abcde", "idfa"))
  val a = ((("abcde", "idfa")))
  val (a, b) = ("abcde", "idfa")
}
>>>
object a {
  val a: (String, String) = ("abcde", "idfa")
  val a: ((String, String)) = (("abcde", "idfa"))
  val a = (("abcde", "idfa"))
  val a = (("abcde", "idfa"))
  val (a, b) = ("abcde", "idfa")
}
<<< #1895 5
object a {
  def a: (String, String) = ("abcde", "idfa")
  def a: ((String, String)) = (("abcde", "idfa"))
  def a = (("abcde", "idfa"))
  def a = ((("abcde", "idfa")))
}
>>>
object a {
  def a: (String, String) = ("abcde", "idfa")
  def a: ((String, String)) = (("abcde", "idfa"))
  def a = (("abcde", "idfa"))
  def a = (("abcde", "idfa"))
}
<<< #1895 6
object a {
  (a eq b) && (c match {
    case d => true
  })
}
>>>
object a {
  (a eq b) && (c match {
    case d => true
  })
}
<<< #1895 7
object a {
  b((a, b, c))
}
>>>
object a {
  b((a, b, c))
}
<<< #1903 1
object a {
  a == ((b, c, d))
}
>>>
object a {
  a == ((b, c, d))
}
<<< don't rewrite infix when AvoidInfix
rewrite.rules = [AvoidInfix, RedundantParens]
===
object a {
  join(a, b)(
        (x, y) =>
          where(
            x.foo < maxRetry and
              y.retryCount === x.bar and
              task.status === Failed
          )
            select (task)
            on (x.id === key and
              y.id === key)
      ).toList
}
>>>
object a {
  join(a, b)((x, y) =>
    where(
      (x.foo < maxRetry).and(y.retryCount === x.bar).and(task.status === Failed)
    )
      .select(task)
      .on((x.id === key).and(y.id === key))
  ).toList
}
<<< don't rewrite infix as rhs
object a {
  private val foo = ((bar == baz
     || bar == baz)
      || bar == baz)
}
>>>
object a {
  private val foo = ((bar == baz
    || bar == baz)
    || bar == baz)
}
<<< #1953
object a {
  scalacOptions ~= (_ filterNot (_ startsWith "-Xlint"))
}
>>>
object a {
  scalacOptions ~= (_ filterNot (_ startsWith "-Xlint"))
}
<<< Lit.Unit preserved
object a {
  print("") shouldBe (())
}
>>>
object a {
  print("") shouldBe (())
}
<<< yield without a space
object a {
  val x = for {
    a <- b
  } yield(a)
}
>>>
object a {
  val x = for {
    a <- b
  } yield a
}
<<< #2117 if without a space
object a {
  a match {
    case a if(((a))) =>
  }
}
>>>
object a {
  a match {
    case a if a =>
  }
}
<<< #2163
val map = (Map("A" -> 1) - "Test" - "Test" - "Test" - "Test" - "Test"
    - "Test" - "Test" - "Test" - "Test" - "Test" - "Test" - "Test" + "B" -> 2)
>>>
val map = (Map("A" -> 1) - "Test" - "Test" - "Test" - "Test" - "Test"
  - "Test" - "Test" - "Test" - "Test" - "Test" - "Test" - "Test" + "B" -> 2)
<<< #2194 1 match
object a {
  val b = c match {
    case true if (d match {
      case true  => true
      case false => false
    }) =>
  }
}
>>>
object a {
  val b = c match {
    case true if (d match {
          case true  => true
          case false => false
        }) =>
  }
}
<<< #2194 2 infix
object a {
  val b = c match {
    case true if (d map {
      case true  => true
      case false => false
    }) =>
    case true if (d
      map {
        case true  => true
        case false => false
      }) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d map {
          case true  => true
          case false => false
        } =>
    case true
        if d
          map {
            case true  => true
            case false => false
          } =>
  }
}
<<< #2194 3 apply with brace
object a {
  val b = c match {
    case true if (d.map {
      case true  => true
      case false => false
    }) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d.map {
          case true  => true
          case false => false
        } =>
  }
}
<<< #2194 4 apply with paren
object a {
  val b = c match {
    case true if (d.map({
      case true  => true
      case false => false
    })) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d.map {
          case true  => true
          case false => false
        } =>
  }
}
<<< #2194 5 infix with parens
object a {
  val b = c match {
    case true if (d map(({
      case true  => true
      case false => false
    }))) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d map {
          case true  => true
          case false => false
        } =>
  }
}
<<< #2194 5 infix with parens and extra term
object a {
  val b = c match {
    case true if true && (d map({
      case true  => true
      case false => false
    })) =>
  }
}
>>>
object a {
  val b = c match {
    case true if true && (d map {
          case true  => true
          case false => false
        }) =>
  }
}
<<< #2194 6 match with parens and scala2
object a {
  val b = c match {
    case true if (d match {
      case true  => true
      case false => false
    }) =>
  }
}
>>>
object a {
  val b = c match {
    case true if (d match {
          case true  => true
          case false => false
        }) =>
  }
}
<<< #2194 6 match with parens and no braces
runner.dialect = scala3
===
object a {
  val b = c match {
    case true if (d match
      case true  => true
      case false => false
    ) =>
  }
}
>>>
object a {
  val b = c match {
    case true if d match
          case true  => true
          case false => false
        =>
  }
}
<<< #2194 6 match with parens and dot
runner.dialect = scala3
===
object a {
  val b = c + (d.match{
      case true  => true
      case false => false
  })
  val b = c + (d.match{
      case true  => true
      case false => false
  }) + e
  val b = c + (d match{
      case true  => true
      case false => false
  })
}
>>>
object a {
  val b = c + d.match {
    case true  => true
    case false => false
  }
  val b = c + d.match {
    case true  => true
    case false => false
  } + e
  val b = c + (d match {
    case true  => true
    case false => false
  })
}
<<< #2194 6 match with parens, dot and no braces
runner.dialect = scala3
===
object a {
  val b = c + (d.match
      case true  => true
      case false => false)
  val b = c + (d.match
      case true  => true
      case false => false) + e
  val b = c + (d match
      case true  => true
      case false => false
  )
}
>>>
object a {
  val b = c + (d.match
    case true  => true
    case false => false
  )
  val b = c + (d.match
    case true  => true
    case false => false
  ) + e
  val b = c + (d match
    case true  => true
    case false => false
  )
}
<<< #2194 5 unary
object a {
  val b = c match {
    case false if (+1) =>
    case false if (-1) =>
    case false if (~1) =>
    case false if (!1) =>
  }
}
>>>
object a {
  val b = c match {
    case false if +1 =>
    case false if -1 =>
    case false if ~1 =>
    case false if !1 =>
  }
}
<<< parens for infix with interpolate
object a {
  the[Exception] thrownBy a should have message("b")
  the[Exception] thrownBy a should have message(s"b")
  the[Exception] thrownBy a should have message(f"b")
}
>>>
object a {
  the[Exception] thrownBy a should have message "b"
  the[Exception] thrownBy a should have message s"b"
  the[Exception] thrownBy a should have message f"b"
}
<<< parens for infix with interpolate with AvoidInfix
rewrite.rules = [RedundantParens, AvoidInfix]
rewrite.neverInfix.excludeFilters = [message]
===
object a {
  the[Exception] thrownBy a should have message("b")
  the[Exception] thrownBy a should have message(s"b")
  the[Exception] thrownBy a should have message(f"b")
}
>>>
object a {
  the[Exception].thrownBy(a).should(have) message "b"
  the[Exception].thrownBy(a).should(have) message s"b"
  the[Exception].thrownBy(a).should(have) message f"b"
}
<<< parens for infix with interpolate with AvoidInfix/neverInfix
rewrite.rules = [RedundantParens, AvoidInfix]
rewrite.neverInfix.excludeFilters = [message, thrownBy, should]
===
object a {
  the[Exception] thrownBy a should have message("b")
  the[Exception] thrownBy a should have message(s"b")
  the[Exception] thrownBy a should have message(f"b")
}
>>>
object a {
  the[Exception] thrownBy a should have message "b"
  the[Exception] thrownBy a should have message s"b"
  the[Exception] thrownBy a should have message f"b"
}
<<< #2495 partial function
val a = List(Some(1), None, Some(3), Some(4)).map({
  case Some(x) => x match {
    case 1 => "one"
    case _ => "more than one"
  }
  case _ => "none"
})
>>>
val a = List(Some(1), None, Some(3), Some(4)).map {
  case Some(x) =>
    x match {
      case 1 => "one"
      case _ => "more than one"
    }
  case _ => "none"
}
<<< #2612 1
maxColumn = 120
binPack.unsafeCallSite = Always
rewrite.rules = [RedundantParens]
===
object Application {
  val app = reactiveWebApplication((a) =>
    a.beans((b) => b.bean(classOf[SampleHandler]).bean(classOf[SampleService]))
      .enable(
        webFlux((server) =>
          server
            .port(if (server.profiles().contains("test")) 8181 else 8080)
            .router((app) => {
              val handler = server.ref(classOf[SampleHandler])

        app.GET("/", (req) => {
          app.GET("/new", (req) => {
              ServerResponse.ok().bodyValue("dynamically created during GET / index request")
          })
            handler.hello(req)
        })
        app.GET("/api", handler.json)


            })
            .codecs(_.string().jackson())
        )
      )
  )

  def main(args: Array[String]): Unit = app.run(args)
}
>>>
object Application {
  val app = reactiveWebApplication(a =>
    a.beans(b => b.bean(classOf[SampleHandler]).bean(classOf[SampleService]))
      .enable(
        webFlux(server =>
          server
            .port(if (server.profiles().contains("test")) 8181 else 8080)
            .router(app => {
              val handler = server.ref(classOf[SampleHandler])

              app.GET("/",
                req => {
                  app.GET("/new",
                    req => {
                      ServerResponse.ok().bodyValue("dynamically created during GET / index request")
                    })
                  handler.hello(req)
                })
              app.GET("/api", handler.json)

            })
            .codecs(_.string().jackson())
        )
      )
  )

  def main(args: Array[String]): Unit = app.run(args)
}
<<< #2612 2
maxColumn = 120
binPack.unsafeCallSite = Oneline
rewrite.rules = [RedundantParens]
===
object Application {
  val app = reactiveWebApplication((a) =>
    a.beans((b) => b.bean(classOf[SampleHandler]).bean(classOf[SampleService]))
      .enable(
        webFlux((server) =>
          server
            .port(if (server.profiles().contains("test")) 8181 else 8080)
            .router((app) => {
              val handler = server.ref(classOf[SampleHandler])

        app.GET("/", (req) => {
          app.GET("/new", (req) => {
              ServerResponse.ok().bodyValue("dynamically created during GET / index request")
          })
            handler.hello(req)
        })
        app.GET("/api", handler.json)


            })
            .codecs(_.string().jackson())
        )
      )
  )

  def main(args: Array[String]): Unit = app.run(args)
}
>>>
object Application {
  val app = reactiveWebApplication(a =>
    a.beans(b => b.bean(classOf[SampleHandler]).bean(classOf[SampleService]))
      .enable(
        webFlux(server =>
          server
            .port(if (server.profiles().contains("test")) 8181 else 8080)
            .router(app => {
              val handler = server.ref(classOf[SampleHandler])

              app.GET("/",
                req => {
                  app.GET("/new",
                    req => {
                      ServerResponse.ok().bodyValue("dynamically created during GET / index request")
                    })
                  handler.hello(req)
                })
              app.GET("/api", handler.json)

            })
            .codecs(_.string().jackson())
        )
      )
  )

  def main(args: Array[String]): Unit = app.run(args)
}
<<< #2712 literal
class Toto() {
  private def myScalaFmtTest(): String = {
    val test = new Toto
    ("test")
  }
}
>>>
class Toto() {
  private def myScalaFmtTest(): String = {
    val test = new Toto
    "test"
  }
}
<<< #2712 name
class Toto() {
  private def myScalaFmtTest(): String = {
    val test = new Toto
    (a)
  }
}
>>>
class Toto() {
  private def myScalaFmtTest(): String = {
    val test = new Toto
    a
  }
}
<<< #3105
foo >>= (_.http(registry, port).map(Option.apply(_)).catchSome {
    bar
})
>>>
foo >>= (_.http(registry, port).map(Option.apply(_)).catchSome {
  bar
})
<<< infix with parens and comments
object a {
  b c /* c1 */
    ( /* c2 */ )
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ ))
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ ( /* c4 */ )  ))
  b c /* c1 */
    ( /* c2 */ d, e)
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ d, e))
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ ( /* c4 */ d, e)))
  b c /* c1 */
    ( /* c2 */ c + d /* c3 */ ).foo
}
>>>
object a {
  b c /* c1 */
    ( /* c2 */ )
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ ))
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ /* c4 */ ))
  b c /* c1 */
    ( /* c2 */ d, e)
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ d, e))
  b c /* c1 */
    ( /* c2 */ ( /* c3 */ /* c4 */ d, e))
  b c /* c1 */
    ( /* c2 */ c + d /* c3 */ ).foo
}
<<< infix with parens, targs and comments
object a {
  b c /* c1 */
    [A] /* c2 */
    ( /* c3 */ )
  b c /* c1 */
    [A] /* c2 */
    ( /* c3 */ d, e)
}
>>>
object a {
  b c /* c1 */
    [A] /* c2 */
    ( /* c3 */ )
  b c /* c1 */
    [A] /* c2 */
    ( /* c3 */ d, e)
}
<<< if with/without then
runner.dialect = scala3
===
object a {
  if (a > 0) then {
    foo
  }
  if (a > 0) {
    foo
  }
}
>>>
object a {
  if a > 0 then {
    foo
  }
  if (a > 0) {
    foo
  }
}
<<< if with nested if
object a {
  if (foo) (
    if (bar) (baz)
  )
  else (
    if (bar) (baz)
  )
}
>>>
object a {
  if (foo)
    (
      if (bar) baz
    )
  else if (bar) baz
}
<<< while with/without do
runner.dialect = scala3
===
object a {
  while (a > 0) do {
    foo
  }
  while (a > 0) {
    foo
  }
}
>>>
object a {
  while a > 0 do {
    foo
  }
  while (a > 0) {
    foo
  }
}
<<< tuple pattern
object a {
  foo match {
    case bar((baz, qux)) =>
    case bar(((baz, qux))) =>
    case bar((((baz, qux)))) =>
  }
}
>>>
object a {
  foo match {
    case bar((baz, qux)) =>
    case bar((baz, qux)) =>
    case bar((baz, qux)) =>
  }
}
<<< infix as new anonymous
object a {
  new (F ~> F) { foo }
}
>>>
object a {
  new (F ~> F) { foo }
}
<<< infix with new
object a {
  foo * (new bar)
  foo * (new bar(baz).qux)
  (new foo) * bar
  (new foo(bar).baz) * qux
}
>>>
object a {
  foo * (new bar)
  foo * (new bar(baz).qux)
  (new foo) * bar
  (new foo(bar).baz) * qux
}
<<< infix with anonymous function
object a {
  foo map (_.foo[A])
  foo map (new foo(_).bar)
}
>>>
object a {
  foo map (_.foo[A])
  foo map (new foo(_).bar)
}
<<< infix with anonymous function, infixSide = some
rewrite.redundantParens.infixSide = some
===
object a {
  foo map (_.foo[A])
  foo map (new foo(_).bar)
}
>>>
object a {
  foo map (_.foo[A])
  foo map (new foo(_).bar)
}
<<< empty parens
object a {
  new foo()
  case class foo[bar]()(implicit baz: qux)
}
>>>
object a {
  new foo()
  case class foo[bar]()(implicit baz: qux)
}
<<< casting
object a {
  new foo((bar: baz))
}
>>>
object a {
  new foo(bar: baz)
}
<<< infix expressions with infixSide = null
object a {
  // null+
  foo & (0) // literal
  foo & (bar) // identifier
  // some+
  foo & (bar.baz) // non-infix
  foo & (bar + baz) // very high precedence infix
  foo or (bar < baz) // non-symbolic outer op, medium precedence infix
}
>>>
object a {
  // null+
  foo & 0 // literal
  foo & bar // identifier
  // some+
  foo & (bar.baz) // non-infix
  foo & (bar + baz) // very high precedence infix
  foo or (bar < baz) // non-symbolic outer op, medium precedence infix
}
<<< infix expressions with infixSide = some
rewrite.redundantParens.infixSide = some
===
object a {
  // some+
  foo & (bar.baz) // non-infix
  foo & (bar + baz) // very high precedence infix
  foo or (bar < baz) // non-symbolic outer op, medium precedence infix
  // many+
  foo || (bar == baz) // high precedence infix
  foo or (bar || baz) // non-symbolic outer op; low precedence infix
  foo |: (bar |: baz) // identical op: non-symbolic; right infix, right assoc
  (foo :| bar) :| baz // identical op: symbolic; left infix, left assoc
  (foo or bar) or baz // identical op: non-symbolic; left infix, left assoc
}
>>>
object a {
  // some+
  foo & bar.baz // non-infix
  foo & bar + baz // very high precedence infix
  foo or bar < baz // non-symbolic outer op, medium precedence infix
  // many+
  foo || (bar == baz) // high precedence infix
  foo or (bar || baz) // non-symbolic outer op; low precedence infix
  foo |: (bar |: baz) // identical op: non-symbolic; right infix, right assoc
  (foo :| bar) :| baz // identical op: symbolic; left infix, left assoc
  (foo or bar) or baz // identical op: non-symbolic; left infix, left assoc
}
<<< infix expressions with infixSide = many
rewrite.redundantParens.infixSide = many
===
object a {
  // many+
  foo || (bar == baz) // high precedence infix
  foo or (bar || baz) // non-symbolic outer op; low precedence infix
  foo |: (bar |: baz) // identical op: non-symbolic; right infix, right assoc
  (foo :| bar) :| baz // identical op: symbolic; left infix, left assoc
  (foo or bar) or baz // identical op: non-symbolic; left infix, left assoc
  // all
  foo || (bar && baz) // low precedence infix
}
>>>
object a {
  // many+
  foo || bar == baz // high precedence infix
  foo or bar || baz // non-symbolic outer op; low precedence infix
  foo |: bar |: baz // identical op: non-symbolic; right infix, right assoc
  foo :| bar :| baz // identical op: symbolic; left infix, left assoc
  foo or bar or baz // identical op: non-symbolic; left infix, left assoc
  // all
  foo || (bar && baz) // low precedence infix
}
<<< infix expressions with infixSide = all
rewrite.redundantParens.infixSide = all
===
object a {
  // all
  foo || (bar && baz) // low precedence infix
}
>>>
object a {
  // all
  foo || bar && baz // low precedence infix
}
<<< infix expressions with infixSide = all and breaks
rewrite.redundantParens.infixSide = all
===
object a {
  foo and (
    bar
    + baz
  )
}
>>>
object a {
  foo and (
    bar
      + baz
  )
}
<<< apply with multiple args
object a {
  foo(bar, (baz.qux))
  foo(bar, (
    baz
    + qux
  ))
}
>>>
object a {
  foo(bar, baz.qux)
  foo(
    bar,
    baz
      + qux
  )
}
<<< #3222 do-while
object a {
  do foo while (true)
}
>>>
object a {
  do foo while (true)
}
<<< body: if
object a {
  if (true) (foo)
  if (true)
    (
      a
      + b
    )
}
>>>
object a {
  if (true) foo
  if (true)
    (
      a
        + b
    )
}
<<< body: while
object a {
  while (true) (foo)
  while (true)
    (
      a
      + b
    )
}
>>>
object a {
  while (true) foo
  while (true)
    (
      a
        + b
    )
}
<<< body: do-while
object a {
  do (foo) while (true)
  do
    (
      a
      + b
    )
  while (true)
}
>>>
object a {
  do foo while (true)
  do (
    a
      + b
  ) while (true)
}
<<< body: case
object a {
  foo match {
    case bar => (baz)
    case bar => (
      a
      + b
    )
  }
}
>>>
object a {
  foo match {
    case bar => baz
    case bar => (
      a
        + b
    )
  }
}
<<< body: try, try-with-handler
object a {
  try (foo + bar)
  catch { case _ => }
  try (foo + bar)
  catch (bar)
  finally (foo + bar)
}
>>>
object a {
  try foo + bar
  catch { case _ => }
  try foo + bar
  catch bar
  finally foo + bar
}
<<< body: for, for-yield
object a {
  for {
    foo <- (foo + bar)
    foo = (foo + bar)
  } yield (foo + bar)
  for {
    foo <- (foo + bar)
    foo = (foo + bar)
  } (foo + bar)
}
>>>
object a {
  for {
    foo <- foo + bar
    foo = foo + bar
  } yield foo + bar
  for {
    foo <- foo + bar
    foo = foo + bar
  } foo + bar
}
<<< body: return, throw
object a {
  def foo = {
    throw (foo + bar)
    return (foo + bar)
  }
}
>>>
object a {
  def foo = {
    throw foo + bar
    return foo + bar
  }
}
<<< body: function
object a {
  foo map ((x: Int) => (foo + bar))
}
>>>
object a {
  foo map ((x: Int) => foo + bar)
}
<<< postfix select, without a dot
object a {
  assertEquals((f _ applyIso uncurry get)(1, 2), 3)
}
>>>
object a {
  assertEquals((f _ applyIso uncurry get)(1, 2), 3)
}
<<< stat: block + select
object a {
  def foo = {
    (bar.baz)
    (foo.bar).baz
  }
}
>>>
object a {
  def foo = {
    bar.baz
    foo.bar.baz
  }
}
<<< infix within apply in rhs of infix
object a {
  foo == (a + b).c
  foo == (a + b).c(d)
  foo == (a + b).c(d).e
}
>>>
object a {
  foo == (a + b).c
  foo == (a + b).c(d)
  foo == (a + b).c(d).e
}
<<< avoid function types
object a {
  val compose: (B => C) => (A => B) => (A => C) = _.compose
}
>>>
object a {
  val compose: (B => C) => (A => B) => (A => C) = _.compose
}
<<< #3238 match with opt braces in select
runner.dialect = scala3
===
object a:
  (foo match
    case bar => baz
  ).qux
>>>
object a:
  (foo match
    case bar => baz
  ).qux
<<< rewrite entire stat
(a + b)
>>>
a + b
<<< #3241
object a {
  (Box.apply(_: Int, _: String)).tupled
}
>>>
object a {
  (Box.apply(_: Int, _: String)).tupled
}
<<< #3438
object A {
  val a = new A({ case x => x })
}
>>>
object A {
  val a = new A({ case x => x })
}
<<< #3743 trailingCommas = always
rewrite.trailingCommas.style = always
===
object A {
  def test =
    (
      foo,
    )
  def test =
    (
      Option(""),
    ).map(identity)}
>>>
test does not parse
object A {
  def test =
    foo,
  def test =
    Option(""), .map(identity)
}
<<< #3743 trailingCommas = never
rewrite.trailingCommas.style = never
===
object A {
  def test =
    (
      foo,
    )
  def test =
    (
      Option(""),
    ).map(identity)}
>>>
test does not parse
object A {
  def test =
    foo,
  def test =
    Option(""), .map(identity)
}
<<< #3743 trailingCommas = keep
rewrite.trailingCommas.style = keep
===
object A {
  def test =
    (
      foo,
    )
  def test =
    (
      Option(""),
    ).map(identity)}
>>>
test does not parse
object A {
  def test =
    foo,
  def test =
    Option(""), .map(identity)
}
