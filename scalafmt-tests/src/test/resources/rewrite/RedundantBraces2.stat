rewrite.rules = [RedundantBraces]
rewrite.redundantBraces.includeUnitMethods = false
rewrite.redundantBraces.maxLines = 1000
<<< unit return type
object a {
  def x(): Unit = {
    println(1)
  }
}
>>>
object a {
  def x(): Unit = {
    println(1)
  }
}
<<< example 1
object a {
   def buildMerchantDna(subsDna: Option[SubsDna],
                        cu: Option[String],
                      iv: Option[String]): dim.MerchantDna = {
   dim.MerchantDna(
     primaryRecurPeriod = subsDna.flatMap { _.primary },
     weekly = subsDna.map { _.weekly }.getOrElse(false),
     monthly = subsDna.map { _.monthly }.getOrElse(false),
     quarterly = subsDna.map { _.quarterly }.getOrElse(false),
     annual = subsDna.map { _.annual }.getOrElse(false),
     platformConnectUsage = cu,
     industryVertical = iv
   )
 }
}
>>>
object a {
  def buildMerchantDna(subsDna: Option[SubsDna],
                       cu: Option[String],
                       iv: Option[String]): dim.MerchantDna =
    dim.MerchantDna(
      primaryRecurPeriod = subsDna.flatMap { _.primary },
      weekly = subsDna.map { _.weekly }.getOrElse(false),
      monthly = subsDna.map { _.monthly }.getOrElse(false),
      quarterly = subsDna.map { _.quarterly }.getOrElse(false),
      annual = subsDna.map { _.annual }.getOrElse(false),
      platformConnectUsage = cu,
      industryVertical = iv
    )
}
<<< example 2
object a {
  def filterPA(pa: BfCFE2ProjectedPaymentAction): Boolean = {
    // nb: the ruby code doesn't explicitly filter on charge being nonEmpty, but its absence would trigger an error
    pa.`type`.nonEmpty && wantedTypes.contains(pa.`type`.get) && pa.charge.nonEmpty
  }
}
>>>
object a {
  def filterPA(pa: BfCFE2ProjectedPaymentAction): Boolean =
    // nb: the ruby code doesn't explicitly filter on charge being nonEmpty, but its absence would trigger an error
    pa.`type`.nonEmpty && wantedTypes.contains(pa.`type`.get) && pa.charge.nonEmpty
}
<<< function
object A {
  def validStringLength(min: Int, max: Int): String => Boolean = { s =>
    val len: Int = s.length
      (min <= len) && (len <= max)
  }
  def x = { 2 }
}
>>>
object A {
  def validStringLength(min: Int, max: Int): String => Boolean = { s =>
    val len: Int = s.length
    (min <= len) && (len <= max)
  }
  def x = 2
}
