80 columns                                                                     |
<<< with
{ def getAnnotationOwner(
       annotationOwnerLookUp: ScLiteral => Option[
         PsiAnnotationOwner with PsiElement]): Option[PsiAnnotationOwner] = 1 }
>>>
{
  def getAnnotationOwner(
      annotationOwnerLookUp: ScLiteral => Option[
          PsiAnnotationOwner with PsiElement]): Option[PsiAnnotationOwner] = 1
}
<<< #1133
indent.main = 4
===
implicit val catsStdInstancesForOption
   : Traverse[Option] with MonadError[Option, Unit] with Alternative[Option]
       with CommutativeMonad[Option] with CoflatMap[Option] = ???
>>>
implicit val catsStdInstancesForOption: Traverse[Option]
    with MonadError[Option, Unit]
    with Alternative[Option]
    with CommutativeMonad[Option]
    with CoflatMap[Option] = ???
<<< with-chain types #1125
type RequiredServices = Bag with
  SomeOtherService.RequiredServices
    with HasDynamicConfig with HasThrottles
    with HasThrowableNotifier
>>>
type RequiredServices = Bag
  with SomeOtherService.RequiredServices
  with HasDynamicConfig
  with HasThrottles
  with HasThrowableNotifier
<<< abstract def #1125
trait NeedsServices {
  def services:  Bag with
    SomeOtherService.RequiredServices
      with HasDynamicConfig with HasThrottles
      with HasThrowableNotifier
}
>>>
trait NeedsServices {
  def services: Bag
    with SomeOtherService.RequiredServices
    with HasDynamicConfig
    with HasThrottles
    with HasThrowableNotifier
}
<<< class param #1125
class NeedsServices(
   services:  Bag with
    SomeOtherService.RequiredServices
      with HasDynamicConfig with HasThrottles
      with HasThrowableNotifier
)
>>>
class NeedsServices(
    services: Bag
      with SomeOtherService.RequiredServices
      with HasDynamicConfig
      with HasThrottles
      with HasThrowableNotifier
)
<<< def param #1125
def sendRequest(services:  Bag with
    SomeOtherService.RequiredServices
      with HasDynamicConfig with HasHttpService, request: Request
): Future[Response] = ???
>>>
def sendRequest(services: Bag
                  with SomeOtherService.RequiredServices
                  with HasDynamicConfig
                  with HasHttpService,
                request: Request): Future[Response] = ???
<<< def param negative #1125
def sendRequest(services:  Bag with Foo with Bar, request: Request): Future[Response] = ???
>>>
def sendRequest(services: Bag with Foo with Bar,
                request: Request): Future[Response] = ???
