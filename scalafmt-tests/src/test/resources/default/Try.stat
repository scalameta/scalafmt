80 columns                                                                     |
<<< finally
object Foo {
  try loop(blocks, startingImports, Imports(), wrapperIndex = 1 )
  finally scriptImportCallback = outerScriptImportCallback
}
>>>
object Foo {
  try loop(blocks, startingImports, Imports(), wrapperIndex = 1)
  finally scriptImportCallback = outerScriptImportCallback
}
<<< catch/finally no curly
object Foo {
  try loop(blocks, startingImports, Imports(), wrapperIndex = 1 )
  catch fallback
  finally scriptImportCallback = outerScriptImportCallback
}
>>>
object Foo {
  try loop(blocks, startingImports, Imports(), wrapperIndex = 1)
  catch fallback
  finally scriptImportCallback = outerScriptImportCallback
}
<<< catch/finally with curly
object Foo {
  try {
  loop(blocks, startingImports, Imports(), wrapperIndex = 1 )
  } catch fallback
  finally scriptImportCallback = outerScriptImportCallback
}
>>>
object Foo {
  try {
    loop(blocks, startingImports, Imports(), wrapperIndex = 1)
  } catch fallback
  finally scriptImportCallback = outerScriptImportCallback
}
<<< #350 2
object Foo {
  try proc.waitFor()
  catch {case e: Throwable => run() }
}
>>>
object Foo {
  try proc.waitFor()
  catch { case e: Throwable => run() }
}
<<< #350 try/catch in parens
object Foo {
  (try proc.waitFor()
  catch {case e: Throwable => run() }   )
}
>>>
object Foo {
  (try proc.waitFor()
  catch { case e: Throwable => run() })
}
<<< try/finally curly no single line blocks
object Foo {
  try { foo()  }
  finally {  bar()  }
}
>>>
object Foo {
  try { foo() }
  finally { bar() }
}
<<< try/catch/finally curly no single line blocks
object Foo {
   try{foo()}
  catch { case bar => baz }
 finally {qux()  }
}
>>>
object Foo {
  try { foo() }
  catch { case bar => baz }
  finally { qux() }
}
<<< try/catch with handler
try { foo()  } catch handler
>>>
try { foo() }
catch handler
<<< #350 assignment: short single line
val template: String = try source.mkString finally source.close()
>>>
val template: String =
  try source.mkString
  finally source.close()
<<< #350 assignment: long single line with catch handler and finally
val template: String = try source.mkString catch veryLongHandlerToExceedLineLength finally source.close()
>>>
val template: String =
  try source.mkString
  catch veryLongHandlerToExceedLineLength
  finally source.close()
<<< #350 assignment: long single line with catch and finally
val template: String = try source.mkString catch { case e if NonFatal(e) => log.error("failed to make string", e) } finally source.close()
>>>
val template: String =
  try source.mkString
  catch { case e if NonFatal(e) => log.error("failed to make string", e) }
  finally source.close()
<<< #350 assignment: short single line with catch handler and finally
val template: String = try foo catch bar finally baz
>>>
val template: String =
  try foo
  catch bar
  finally baz
<<< #350 assignment: short single line with catch and finally
val template: String = try foo catch { case e => bar } finally baz
>>>
val template: String =
  try foo
  catch { case e => bar }
  finally baz
<<< #350 assignment: short single line with multi-catch and parens
val template: String = ( try foo catch { case e => bar; case c => baz } )
>>>
val template: String =
  (try foo
  catch { case e => bar; case c => baz })
<<< #350 assignment: short single line with multi-catch and finally
val template: String = try foo catch { case e => bar; case c => baz } finally qux
>>>
val template: String =
  try foo
  catch { case e => bar; case c => baz }
  finally qux
<<< #350 statement: short single line with multi-catch and finally
try foo catch { case e => bar; case c => baz } finally qux
>>>
try foo
catch { case e => bar; case c => baz }
finally qux
<<< #350 statement: short single line with multi-catch and comment
try foo catch { case e => bar; case c if { true } => baz } // comment
>>>
try foo
catch { case e => bar; case c if { true } => baz } // comment
<<< #350 statement: multi-line with catch and semicolon
object a {
try foo catch { case e => "very long statement, needs to split line very soon" }; x = 43
try {
  foo
   } catch { case e => "very long statement, needs to split line very soon" }
   ; x = 43
}
>>>
object a {
  try foo
  catch { case e => "very long statement, needs to split line very soon" };
  x = 43
  try {
    foo
  } catch { case e => "very long statement, needs to split line very soon" };
  x = 43
}
