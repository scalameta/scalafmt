80 columns                                                                     |
<<< Route partial function
val Route: PartialFunction[Decision, Decision] = {
  case FormatToken(_: Ident | _: `this` | _: `_ ` | _: `(`, _: `.` | _: `#`, _) =>
  List(
    NoSplit0
  )
}
>>>
val Route: PartialFunction[Decision, Decision] = {
  case FormatToken(_: Ident | _: `this` | _: `_ ` | _: `(`,
                   _: `.` | _: `#`,
                   _) =>
    List(
        NoSplit0
    )
}
<<< What idiot wrote this code
List(Split(Space, 0).withPolicy {
            case Decision(t, s) if tok.right.end <= lastToken.end =>
              Decision(t, s.map {
                    case nl if nl.modification.isNewline =>
                      val result =
                        if (t.right.isInstanceOf[`if`] &&
                            owners(t.right) == owner) nl
                        else nl.withPenalty(1)
                      result.withPolicy(breakOnArrow)
                    case x => x
                  })
            })
>>>
List(Split(Space, 0).withPolicy {
  case Decision(t, s) if tok.right.end <= lastToken.end =>
    Decision(t, s.map {
      case nl if nl.modification.isNewline =>
        val result =
          if (t.right.isInstanceOf[`if`] &&
              owners(t.right) == owner) nl
          else nl.withPenalty(1)
        result.withPolicy(breakOnArrow)
      case x => x
    })
})
<<< chain of || and &&
x match {
  case tok if // TODO(olafur) DRY.
      (leftOwner.isInstanceOf[Term.Interpolate] &&
        rightOwner.isInstanceOf[Term.Interpolate]) ||
      (leftOwner.isInstanceOf[Pat.Interpolate] &&
        rightOwner.isInstanceOf[Pat.Interpolate]) =>
    Seq(Split(NoSplit, 0))
}
>>>
x match {
  case tok
      if // TODO(olafur) DRY.
      (leftOwner.isInstanceOf[Term.Interpolate] &&
        rightOwner.isInstanceOf[Term.Interpolate]) ||
        (leftOwner.isInstanceOf[Pat.Interpolate] &&
          rightOwner.isInstanceOf[Pat.Interpolate]) =>
    Seq(Split(NoSplit, 0))
}
<<< PrepJSInterop
x match {
      case cldef if true =>
        enterOwner(OwnerKind.EnumImpl) { super.transform(cldef) }

      // Catch Scala Enumerations to transform calls to scala.Enumeration.Value
      case i => x
}
>>>
x match {
  case cldef if true =>
    enterOwner(OwnerKind.EnumImpl) { super.transform(cldef) }

  // Catch Scala Enumerations to transform calls to scala.Enumeration.Value
  case i => x
}
<<< spark case dequeueAll bug
{
  def testZipPartitions4(rdd: RDD[Int]): Unit = {
    rdd.zipPartitions(rdd, rdd, rdd) { case (it1, it2, it3, it4) => return; it1 }.count()
  }
}
>>>
{
  def testZipPartitions4(rdd: RDD[Int]): Unit = {
    rdd
      .zipPartitions(rdd, rdd, rdd) {
        case (it1, it2, it3, it4) => return; it1
      }
      .count()
  }
}
