80 columns                                                                     |
<<< URI state explosion (for performance only, output is ugly as hell)
    "(?:" +
    lelem+"{7}"+block+"|"+                 // 1:2:3:4:5:6:7:8
    lelem+"{1,7}:|"+                       // 1::                                        1:2:3:4:5:6:7::
    lelem+"{1,6}"+relem+"|"+               // 1::8                  1:2:3:4:5:6::8       1:2:3:4:5:6::8
    lelem+"{1,5}"+relem+"{1,2}|"+          // 1::7:8                1:2:3:4:5::7:8       1:2:3:4:5::8
    lelem+"{1,4}"+relem+"{1,3}|"+          // 1::6:7:8              1:2:3:4::6:7:8       1:2:3:4::8
    lelem+"{1,3}"+relem+"{1,4}|"+          // 1::5:6:7:8            1:2:3::5:6:7:8       1:2:3::8
    lelem+"{1,2}"+relem+"{1,5}|"+          // 1::4:5:6:7:8          1:2::4:5:6:7:8       1:2::8
    lelem        +relem+"{1,6}|"+          // 1::3:4:5:6:7:8        1::3:4:5:6:7:8       1::8
    ":(?:"+relem+"{1,7}|:)|" +             // ::2:3:4:5:6:7:8       ::2:3:4:5:6:7:8      ::8       ::
    lelem+"{6}"+ipv4+"|"+                  // 1:2:3:4:5:6:10.0.0.1
    lelem+"{1,5}:"+ipv4+"|"+               // 1::10.0.0.1           1:2:3:4:5::10.0.0.1
    lelem+"{1,4}"+relem+":"+ipv4+"|"+      // 1::6:10.0.0.1         1:2:3:4::6:10.0.0.1
    lelem+"{1,3}"+relem+"{1,2}:"+ipv4+"|"+ // 1::5:6:10.0.0.1       1:2:3::5:6:10.0.0.1  1:2:3::6:10.0.0.1
    lelem+"{1,2}"+relem+"{1,3}:"+ipv4+"|"+ // 1::4:5:6:10.0.0.1     1:2::4:5:6:10.0.0.1  1:2::6:10.0.0.1
    lelem        +relem+"{1,4}:"+ipv4+"|"+ // 1::3:4:5:6:10.0.0.1   1::3:4:5:6:10.0.0.1  1::6:10.0.0.1
    "::"+lelem+"{1,5}"+ipv4+               // ::2:3:4:5:10.0.0.1    ::5:10.0.0.1         ::10.0.0.1
    ")(?:%[0-9a-z]+)?"
>>>
"(?:" +
  lelem + "{7}" + block + "|" + // 1:2:3:4:5:6:7:8
  lelem + "{1,7}:|" + // 1::                                        1:2:3:4:5:6:7::
  lelem + "{1,6}" + relem + "|" + // 1::8                  1:2:3:4:5:6::8       1:2:3:4:5:6::8
  lelem + "{1,5}" + relem + "{1,2}|" + // 1::7:8                1:2:3:4:5::7:8       1:2:3:4:5::8
  lelem + "{1,4}" + relem + "{1,3}|" + // 1::6:7:8              1:2:3:4::6:7:8       1:2:3:4::8
  lelem + "{1,3}" + relem + "{1,4}|" + // 1::5:6:7:8            1:2:3::5:6:7:8       1:2:3::8
  lelem + "{1,2}" + relem + "{1,5}|" + // 1::4:5:6:7:8          1:2::4:5:6:7:8       1:2::8
  lelem + relem + "{1,6}|" + // 1::3:4:5:6:7:8        1::3:4:5:6:7:8       1::8
  ":(?:" + relem + "{1,7}|:)|" + // ::2:3:4:5:6:7:8       ::2:3:4:5:6:7:8      ::8       ::
  lelem + "{6}" + ipv4 + "|" + // 1:2:3:4:5:6:10.0.0.1
  lelem + "{1,5}:" + ipv4 + "|" + // 1::10.0.0.1           1:2:3:4:5::10.0.0.1
  lelem + "{1,4}" + relem + ":" + ipv4 + "|" + // 1::6:10.0.0.1         1:2:3:4::6:10.0.0.1
  lelem + "{1,3}" + relem + "{1,2}:" + ipv4 + "|" + // 1::5:6:10.0.0.1       1:2:3::5:6:10.0.0.1  1:2:3::6:10.0.0.1
  lelem + "{1,2}" + relem + "{1,3}:" + ipv4 + "|" + // 1::4:5:6:10.0.0.1     1:2::4:5:6:10.0.0.1  1:2::6:10.0.0.1
  lelem + relem + "{1,4}:" + ipv4 + "|" + // 1::3:4:5:6:10.0.0.1   1::3:4:5:6:10.0.0.1  1::6:10.0.0.1
  "::" + lelem + "{1,5}" + ipv4 + // ::2:3:4:5:10.0.0.1    ::5:10.0.0.1         ::10.0.0.1
  ")(?:%[0-9a-z]+)?"
<<< infix should stay #219
      inits.map(materializer.materialize(_).toString) ++
      libs.map(dep => materializer.materialize(dep.lib).toString) :+
      code.path
>>>
inits.map(materializer.materialize(_).toString) ++
  libs.map(dep => materializer.materialize(dep.lib).toString) :+
  code.path
<<< json play parse
implicit val locationWrites: Writes[Location] = (
  (JsPath \ "lat").write[Double] and
  (JsPath \ "long").write[Double]
)(unlift(Location.unapply))
>>>
implicit val locationWrites: Writes[Location] = (
    (JsPath \ "lat").write[Double] and
      (JsPath \ "long").write[Double]
)(unlift(Location.unapply))
<<< lila #219
      (granted | isGranted(_.ModerateForum)) fold (
        a,
        fuccess(Forbidden("You cannot post to this category"))
      )
>>>
(granted | isGranted(_.ModerateForum)) fold (
    a,
    fuccess(Forbidden("You cannot post to this category"))
)
<<< lila 2 #219
    private[controllers] def doClose(user: UserModel) =
     (UserRepo disable user) >>-
       env.onlineUserIdMemo.remove(user.id) >>
       relationEnv.api.unfollowAll(user.id) >>
       Env.team.api.quitAll(user.id) >>-
       Env.challenge.api.removeByUserId(user.id) >>-
       Env.tournament.api.withdrawAll(user) >>
       (Env.security disconnect user.id)
>>>
private[controllers] def doClose(user: UserModel) =
  (UserRepo disable user) >>-
    env.onlineUserIdMemo.remove(user.id) >>
    relationEnv.api.unfollowAll(user.id) >>
    Env.team.api.quitAll(user.id) >>-
    Env.challenge.api.removeByUserId(user.id) >>-
    Env.tournament.api.withdrawAll(user) >>
    (Env.security disconnect user.id)
<<< space ok
{{{{{
val spaceCouldBeOk =
          oldNewlines == 0 && !left.isInstanceOf[Comment] &&
          right.isInstanceOf[Keyword] &&
          isSingleIdentifierAnnotation(prev(tok))
          }}}}}
>>>
{
  {
    {
      {
        {
          val spaceCouldBeOk =
            oldNewlines == 0 && !left.isInstanceOf[Comment] &&
              right.isInstanceOf[Keyword] &&
              isSingleIdentifierAnnotation(prev(tok))
        }
      }
    }
  }
}
<<< space ok 2
newlines.afterInfix = some
indentOperator.preset = akka
===
{{{{{
val spaceCouldBeOk =
          oldNewlines == 0 && !left.isInstanceOf[Comment] &&
          right.isInstanceOf[Keyword] &&
          isSingleIdentifierAnnotation(prev(tok))
          }}}}}
>>>
{
  {
    {
      {
        {
          val spaceCouldBeOk =
            oldNewlines == 0 && !left.isInstanceOf[Comment] &&
              right.isInstanceOf[Keyword] &&
              isSingleIdentifierAnnotation(prev(tok))
        }
      }
    }
  }
}
<<< penalty &&
{{
   def rhsIsCommentedOut(formatToken: FormatToken): Boolean =
      formatToken.right.isInstanceOf[Comment] &&
     formatToken.right.code.startsWith("//") &&
     endsWithNoIndent(formatToken.between)
     }}
>>>
{
  {
    def rhsIsCommentedOut(formatToken: FormatToken): Boolean =
      formatToken.right.isInstanceOf[Comment] &&
        formatToken.right.code.startsWith("//") &&
        endsWithNoIndent(formatToken.between)
  }
}
<<< bool weirdness #233
{{
!isDocstring(tok.left) && {
        val newlines = newlinesBetween(tok.between)
       newlines > 1 ||
       (isDocstring(tok.right) && !tok.left.isInstanceOf[Comment])
       }
       }}
>>>
{
  {
    !isDocstring(tok.left) && {
      val newlines = newlinesBetween(tok.between)
      newlines > 1 ||
      (isDocstring(tok.right) && !tok.left.isInstanceOf[Comment])
    }
  }
}
<<< top-level no indent
val isValidIdent = {
    ident != "" &&
  ident.charAt(0).isUnicodeIdentifierStart &&
  ident.tail.forall(_.isUnicodeIdentifierPart)
}
>>>
val isValidIdent = {
  ident != "" &&
  ident.charAt(0).isUnicodeIdentifierStart &&
  ident.tail.forall(_.isUnicodeIdentifierPart)
}
<<< #267
val x = {
params.size >= thatParams.size &&
        resultType <:< thatResultType &&
        unused.forall(_.isDefault) &&
        (used zip thatParams).forall { case (x, y) => x.conformsTo(y) }
        }
>>>
val x = {
  params.size >= thatParams.size &&
  resultType <:< thatResultType &&
  unused.forall(_.isDefault) &&
  (used zip thatParams).forall { case (x, y) => x.conformsTo(y) }
}
<<< #284
  def headerText(colBarcodes: Seq[String], compat: Boolean): String = {
    s"Sequence\tTotal\t${colBarcodes.mkString("\t")}\t" +
    (if (compat) "Construct IDs" else "Potential IDs")
  }
>>>
def headerText(colBarcodes: Seq[String], compat: Boolean): String = {
  s"Sequence\tTotal\t${colBarcodes.mkString("\t")}\t" +
    (if (compat) "Construct IDs" else "Potential IDs")
}
<<< #269 6
   val _areTypedArraysSupported = {
     // Here we use `assumingES6` to dce the 4 subsequent tests
    assumingES6 || js.DynamicImplicits.truthValue(
        global.ArrayBuffer && global.Int32Array &&
        global.Float32Array && global.Float64Array)
   }
>>>
val _areTypedArraysSupported = {
  // Here we use `assumingES6` to dce the 4 subsequent tests
  assumingES6 || js.DynamicImplicits.truthValue(
      global.ArrayBuffer && global.Int32Array &&
        global.Float32Array && global.Float64Array)
}
<<< #269 7 will not break after - fix it yourself
{
{
{
 var shift =
      inlineNumberOfLeadingZeros(blo, bhi) - inlineNumberOfLeadingZeros(alo, ahi)
      }
      }
      }
>>>
{
  {
    {
      var shift =
        inlineNumberOfLeadingZeros(blo, bhi) - inlineNumberOfLeadingZeros(alo,
                                                                          ahi)
    }
  }
}
<<< #269 8 will not break fix yourself
   if (other == null) {
       throw new NullPointerException()
    } else if (toffset < 0 || ooffset < 0 || toffset + len > thiz.length || ooffset + len >  other.length) {
       false
     } else if (len <= 0) {
       true
     }
>>>
if (other == null) {
  throw new NullPointerException()
} else if (
    toffset < 0 || ooffset < 0 || toffset + len > thiz.length || ooffset + len > other.length
) {
  false
} else if (len <= 0) {
  true
}
<<< #391
{{
      phrase(a ^^
      { case p1 =>
          Rowset(p1.toSeq map { fromXML[eveapi.xml.char.ContactList.Row](_, scalaxb.ElemName(node) ) },
            ListMap(List(
            (node \ "@name").headOption.map( x => DataRecord() )
            ).flatten: _*))
      })
}}
>>>
{
  {
    phrase(a ^^ { case p1 =>
      Rowset(
          p1.toSeq map {
            fromXML[eveapi.xml.char.ContactList.Row](_, scalaxb.ElemName(node))
          },
          ListMap(
              List(
                  (node \ "@name").headOption.map(x => DataRecord())
              ).flatten: _*))
    })
  }
}
<<< #336
    object ExternForwarder {
      def unapply(tree: Tree): Option[Symbol] = tree match {
        case DefDef()
            if isExternModule(from.symbol)
            && params.length == args.length
            && params.zip(args).forall {
                case _                     => false
              } =>
          Some(sel.symbol)
        case _ =>
          None
      }
    }
>>>
object ExternForwarder {
  def unapply(tree: Tree): Option[Symbol] = tree match {
    case DefDef()
        if isExternModule(from.symbol)
          && params.length == args.length
          && params.zip(args).forall { case _ =>
            false
          } =>
      Some(sel.symbol)
    case _ =>
      None
  }
}
<<< #408
1 match {
 case accountIdStr :: userIdStr :: connectorIdStr :: timestampStr :: eventClassStr :: contactIdStr
        :: contactPointIdStr :: contactPointValue :: remoteContactId :: to :: subject :: remoteId
        :: remoteGroupId :: timeZoneStr :: rest if "some lengthy condition is not empty".nonEmpty =>
}
>>>
1 match {
  case accountIdStr :: userIdStr :: connectorIdStr :: timestampStr :: eventClassStr :: contactIdStr
      :: contactPointIdStr :: contactPointValue :: remoteContactId :: to :: subject :: remoteId
      :: remoteGroupId :: timeZoneStr :: rest
      if "some lengthy condition is not empty".nonEmpty =>
}
<<< unfortunate side-effect of #740
{ lazy val propertyName =
     ("""[a-zA-Z_][a-zA-Z_0-9]*""".r | """`([^`\\]|\\.)+`""".r ^^ canonicalizePropertyName | """"([^"\\]|\\.)+"""".r ^^ canonicalizeStr //"
     )
}
>>>
{
  lazy val propertyName =
    ("""[a-zA-Z_][a-zA-Z_0-9]*""".r | """`([^`\\]|\\.)+`""".r ^^ canonicalizePropertyName | """"([^"\\]|\\.)+"""".r ^^ canonicalizeStr //"
    )
}
<<< #728
lazy val ReleaseCmd = Command.command("release") { state =>
  "set elideOptions in client := Seq(\"-Xelide-below\", \"WARNING\")" ::
    "client/clean" ::
      "client/test" ::
        "server/clean" ::
          "server/test" ::
            "server/dist" ::
              "set elideOptions in client := Seq()" ::
                state
}
>>>
lazy val ReleaseCmd = Command.command("release") { state =>
  "set elideOptions in client := Seq(\"-Xelide-below\", \"WARNING\")" ::
    "client/clean" ::
    "client/test" ::
    "server/clean" ::
    "server/test" ::
    "server/dist" ::
    "set elideOptions in client := Seq()" ::
    state
}
<<< With tuples
val overrides =
      "logconfigonstart" ::
      "quorumsize" ::
        "hostname" ::
        "port" ::
        Nil

>>>
val overrides =
  "logconfigonstart" ::
    "quorumsize" ::
    "hostname" ::
    "port" ::
    Nil
<<< #1608: apply with single too-long assign of infix
{
  Bbbbbbbbbbbbbbbbbbbbbbb(cccccccccccccccccc = dddddddd + eeeeeeee /* comment */)
}
>>>
{
  Bbbbbbbbbbbbbbbbbbbbbbb(cccccccccccccccccc =
    dddddddd + eeeeeeee /* comment */ )
}
<<< #1608: while with infix
object a {
        while (isEmptyChar(ext.getContainingFile.getText.charAt(end - 1))) end = end - 1
        }
>>>
object a {
  while (isEmptyChar(ext.getContainingFile.getText.charAt(end - 1)))
    end = end - 1
}
<<< #1604 1: apply with single too-long assign of trailing comment then infix
{
  Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb(ccccccccccccccccccccccccccccccccc = // comment
  dddddddd + eeeeeeee /* comment */)
}
>>>
{
  Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb(
      ccccccccccccccccccccccccccccccccc = // comment
        dddddddd + eeeeeeee /* comment */ )
}
<<< #1604 2: apply with single a bit long assign of trailing comment then block
{
  Bbbbbbbbbbbbb(cccccccccccc = // comment
{dddddddd + eeeeeeee  /* comment */ })
}
>>>
{
  Bbbbbbbbbbbbb(cccccccccccc = // comment
    { dddddddd + eeeeeeee /* comment */ })
}
<<< #1604 3: apply with single a bit long assign of block with trailing comment
{
  Bbbbbbbbbbbbb(cccccccccccc = { // comment
dddddddd + eeeeeeee /* comment */ })
}
>>>
{
  Bbbbbbbbbbbbb(cccccccccccc = { // comment
    dddddddd + eeeeeeee /* comment */
  })
}
<<< block followed by infix 1
object a {
    the[Exception] thrownBy { SizeUtils.calculate(segments, "user")
    } should have message """Cannot resolve column name "user" among (segment_id);"""
}
>>>
object a {
  the[Exception] thrownBy {
    SizeUtils.calculate(segments, "user")
  } should have message """Cannot resolve column name "user" among (segment_id);"""
}
<<< block followed by infix 2
object a {
      opt[String]("env") action { (x, c) =>
        c.copy(env = Some(x))
      } text ("Comma-separated list of environmental variables (in 'FOO=BAR' " +
         "format) to pass to the Spark execution environment.")
}
>>>
object a {
  opt[String]("env") action { (x, c) =>
    c.copy(env = Some(x))
  } text ("Comma-separated list of environmental variables (in 'FOO=BAR' " +
    "format) to pass to the Spark execution environment.")
}
<<< infix followed by block, and then another statement (endOfSingleLineBlock)
object a {
      (1 to demand3.toInt) foreach { _ ⇒ pSub.sendNext(input.next()) }
      ((demand1 + demand2 + 1).toInt to (demand1 + demand2 + demand3).toInt) foreach {
        n ⇒ c.expectNext(n)
      }
}
>>>
object a {
  (1 to demand3.toInt) foreach { _ ⇒ pSub.sendNext(input.next()) }
  ((demand1 + demand2 + 1).toInt to (demand1 + demand2 + demand3).toInt) foreach {
    n ⇒ c.expectNext(n)
  }
}
<<< block followed by infix 3 (BestFirstSearch shouldn't give up)
object a {
    intercept[MappingException] {
      ExpressionJsonSerializer.deserialize[Token](unknownJson)
    }.getMessage shouldBe s"Invalid feature tag `unknown`, supported tags: " +
      "tags..."
}
>>>
object a {
  intercept[MappingException] {
    ExpressionJsonSerializer.deserialize[Token](unknownJson)
  }.getMessage shouldBe s"Invalid feature tag `unknown`, supported tags: " +
    "tags..."
}
<<< block deep into an infix expression 1
object a {
        (intercept[IllegalStateException] { t.failingJOptionPigdog }).getMessage should ===(
          "expected")
}
>>>
object a {
  (intercept[IllegalStateException] {
    t.failingJOptionPigdog
  }).getMessage should ===("expected")
}
<<< block deep into an infix expression 2
object a {
           server.out1 ~> Flow[SslTlsOutbound]
            .collect { case SendBytes(x) ⇒ x }
             .buffer(1, OverflowStrategy.backpressure) ~> netOut.sink
}
>>>
object a {
  server.out1 ~> Flow[SslTlsOutbound].collect { case SendBytes(x) ⇒ x }
    .buffer(1, OverflowStrategy.backpressure) ~> netOut.sink
}
