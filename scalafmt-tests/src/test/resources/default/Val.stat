80 columns                                                                     |
<<< Long line
val newIndents: Vector[Indent[Num]]
      =
      nonExpiredIndents ++ split.indents.map(_ .withNum(column, indentation))
>>>
val newIndents: Vector[Indent[Num]] =
  nonExpiredIndents ++ split.indents.map(_.withNum(column, indentation))
<<< Don't break
var inside =
    false
>>>
var inside =
  false
<<< underscore assignment
var inside: Int   = _
>>>
var inside: Int = _
<<< && gets space
val attachedComment = !rightIsOnNewLine&& isInlineComment(right)
>>>
val attachedComment = !rightIsOnNewLine && isInlineComment(right)
<<< break in higher nesting
    val longHash: Long =
      (token.privateTag.toLong << (62 - 8)) |
        (token.start.toLong << (62 - (8 + 28))) | token.end
>>>
val longHash: Long =
  (token.privateTag.toLong << (62 - 8)) |
    (token.start.toLong << (62 - (8 + 28))) | token.end
<<< backticks get no space #95
  val `type`: String = js.native
>>>
val `type`: String = js.native
<<< Insane type
{
  implicit val enumeratorTMonadTrans: MonadTrans[λ[(β[_], α) => EnumeratorT[
              α, β]]] = new MonadTrans[λ[(β[_], α) => EnumeratorT[α, β]]] {
    def liftM[G[_]: Monad, E](ga: G[E]): EnumeratorT[E, G] =
      new EnumeratorT[E, G] {
        def apply[A] =
          (s: StepT[E, G, A]) =>
            iterateeT(
                Monad[G].bind(ga) { e =>
              s.mapCont(k => k(elInput(e))).value
            })
      }
      }
      }
>>>
{
  implicit val enumeratorTMonadTrans
    : MonadTrans[λ[(β[_], α) => EnumeratorT[α, β]]] =
    new MonadTrans[λ[(β[_], α) => EnumeratorT[α, β]]] {
      def liftM[G[_]: Monad, E](ga: G[E]): EnumeratorT[E, G] =
        new EnumeratorT[E, G] {
          def apply[A] =
            (s: StepT[E, G, A]) =>
              iterateeT(Monad[G].bind(ga) { e =>
                s.mapCont(k => k(elInput(e))).value
              })
        }
    }
}
<<< SKIP unfortunate = space
            val nextComma: Option[FormatToken] = next(
                leftTok2tok(nextArg.tokens.last)) match {
              case t @ FormatToken(left: `,`, _, _)
                  if owners(left) == leftOwner =>
                Some(t)
              case _ => None
            }
>>>
x
<<< #269
val ps = params map { p =>
     JSMethodParam(p.info, p.asTerm.isParamWithDefault)
   }
>>>
val ps = params map { p =>
  JSMethodParam(p.info, p.asTerm.isParamWithDefault)
}
<<< #269 2
val wasBOM = if (endianness == AutoEndian) {
  // Read BOM
  if (b1 == 0xfe && b2 == 0xff) {
    endianness = BigEndian
    true
  } else if (b1 == 0xff && b2 == 0xfe) {
    endianness = LittleEndian
    true
  } else {
    // Not a valid BOM: default to BigEndian and start reading
    endianness = BigEndian
    false
  }
} else false
>>>
val wasBOM = if (endianness == AutoEndian) {
  // Read BOM
  if (b1 == 0xfe && b2 == 0xff) {
    endianness = BigEndian
    true
  } else if (b1 == 0xff && b2 == 0xfe) {
    endianness = LittleEndian
    true
  } else {
    // Not a valid BOM: default to BigEndian and start reading
    endianness = BigEndian
    false
  }
} else false
<<< #269 3
 val route =
        scheme("https") { completeOk } ~
          scheme("http") { reject }
>>>
val route =
  scheme("https") { completeOk } ~
    scheme("http") { reject }
<<< #269 4

  private val _extractClientIP: Directive1[RemoteAddress] =
    headerValuePF { case `X-Forwarded-For`(Seq(address, _*)) ⇒ address } |
      headerValuePF { case `Remote-Address`(address) ⇒ address } |
      headerValuePF { case `X-Real-Ip`(address) ⇒ address }
>>>
private val _extractClientIP: Directive1[RemoteAddress] =
  headerValuePF { case `X-Forwarded-For`(Seq(address, _ *)) ⇒ address } |
    headerValuePF { case `Remote-Address`(address) ⇒ address } |
    headerValuePF { case `X-Real-Ip`(address) ⇒ address }
<<< #269 5
//to prevent situation where access modifiers print earlier then throw
    val sortModifiers = modifiers.collect { case m: Modifier if !modifiersConstruction.accessModifiers.contains(m.modificator) => m } ++
      modifiers.collect { case m: Modifier if modifiersConstruction.accessModifiers.contains(m.modificator) => m }
>>>
//to prevent situation where access modifiers print earlier then throw
val sortModifiers = modifiers.collect {
  case m: Modifier
      if !modifiersConstruction.accessModifiers.contains(m.modificator) =>
    m
} ++
  modifiers.collect {
    case m: Modifier
        if modifiersConstruction.accessModifiers.contains(m.modificator) =>
      m
  }
<<< #269 6
val predefinedType = if (clazz.getTypeParameters.length == 1) {
        ScParameterizedType(ScDesignatorType(clazz), undefines)
      }
      else
        ScDesignatorType(clazz)
>>>
val predefinedType = if (clazz.getTypeParameters.length == 1) {
  ScParameterizedType(ScDesignatorType(clazz), undefines)
} else
  ScDesignatorType(clazz)
<<< myRoute
  val myRoute =
    path("") {
    get {
      respondWithMediaType(`text/html`) {
        detach() {
          complete {
            html
          }
        }
      }
    }
  } ~ path("queries.json") {
      }
>>>
val myRoute =
  path("") {
    get {
      respondWithMediaType(`text/html`) {
        detach() {
          complete {
            html
          }
        }
      }
    }
  } ~ path("queries.json") {}
<<< myRoute  2
  val myRoute = path("") {
    get {
      respondWithMediaType(`text/html`) {
        detach() {
          complete {
            html
          }
        }
      }
    }
  } ~ path("queries.json") {
      }
>>>
val myRoute = path("") {
  get {
    respondWithMediaType(`text/html`) {
      detach() {
        complete {
          html
        }
      }
    }
  }
} ~ path("queries.json") {}
<<< vfile
      val vfile = options.jar map { jar =>
        readFromJar(jar, fileName)
      } getOrElse {
        readFromFile(fileName)
      }
>>>
val vfile = options.jar map { jar =>
  readFromJar(jar, fileName)
} getOrElse {
  readFromFile(fileName)
}
<<< vfile 2
      val vfile =
       options.jar map { jar =>
        readFromJar(jar, fileName)
      } getOrElse {
        readFromFile(fileName)
      }
>>>
val vfile =
  options.jar map { jar =>
    readFromJar(jar, fileName)
  } getOrElse {
    readFromFile(fileName)
  }
<<< #590
val component = // ← look, you can even use fancy names!
<div>
    <button onclick={ () => count.update(_ + 1) }>Click Me!</button>
  </div>
>>>
val component = // ← look, you can even use fancy names!
  <div>
    <button onclick={ () => count.update(_ + 1) }>Click Me!</button>
  </div>
<<< #741 def and val are the same
{
  val ScalafixRewrite: ((RewriteCtx[ScalafixMirror]) => Seq[Patch]) => Rewrite[
    ScalafixMirror] =
    Rewrite.apply[ScalafixMirror]
  def ScalafixRewrite: ((RewriteCtx[ScalafixMirror]) => Seq[Patch]) => Rewrite[
    ScalafixMirror] =
    Rewrite.apply[ScalafixMirror]
  def ScalafixRewrite(): ((RewriteCtx[ScalafixMirror]) => Seq[Patch]) => Rewrite[
    ScalafixMirror] =
    Rewrite.apply[ScalafixMirror]
}
>>>
{
  val ScalafixRewrite
    : ((RewriteCtx[ScalafixMirror]) => Seq[Patch]) => Rewrite[ScalafixMirror] =
    Rewrite.apply[ScalafixMirror]
  def ScalafixRewrite
    : ((RewriteCtx[ScalafixMirror]) => Seq[Patch]) => Rewrite[ScalafixMirror] =
    Rewrite.apply[ScalafixMirror]
  def ScalafixRewrite()
    : ((RewriteCtx[ScalafixMirror]) => Seq[Patch]) => Rewrite[ScalafixMirror] =
    Rewrite.apply[ScalafixMirror]
}
