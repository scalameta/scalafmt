80 columns                                                                     |
<<< align by superfluous (
     val weights: Map[Int, Double] = (for {
       group <- groupedWeights
       item <- group.items
       index <- model.itemStringIntMap.get(item)
     } yield (index, group.weight)).toMap.withDefaultValue(1.0)

>>>
val weights: Map[Int, Double] = (for {
  group <- groupedWeights
  item <- group.items
  index <- model.itemStringIntMap.get(item)
} yield (index, group.weight)).toMap.withDefaultValue(1.0)
<<< Keep multiline like if #256
for ((key, value) <- properties)
    result(key) = value
>>>
for ((key, value) <- properties)
  result(key) = value
<<< Keep multiline like if #256 yield
for ((key, value) <- properties)
    yield result(key) = value
>>>
for ((key, value) <- properties)
  yield result(key) = value
<<< multiline for
for ((l, r) ← /* c1 */ Seq(
    SelectString("a/b/c") -> None,
    SelectString("akka://all-systems/Nobody") -> None,
    SelectPath(system / "hallo") -> None,
    SelectPath(looker.path child "hallo") -> None, // test Java API
    SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
  ) // test Java API
) checkOne(looker, l, r)
>>>
for (
    (l, r) ← /* c1 */ Seq(
        SelectString("a/b/c") -> None,
        SelectString("akka://all-systems/Nobody") -> None,
        SelectPath(system / "hallo") -> None,
        SelectPath(looker.path child "hallo") -> None, // test Java API
        SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
    ) // test Java API
) checkOne(looker, l, r)
<<< multiline for with brace
for ((l, r) ← /* c1 */ { /* c2 */ Seq(
    SelectString("a/b/c") -> None,
    SelectString("akka://all-systems/Nobody") -> None,
    SelectPath(system / "hallo") -> None,
    SelectPath(looker.path child "hallo") -> None, // test Java API
    SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
  ) // test Java API
  }
) checkOne(looker, l, r)
>>>
for (
    (l, r) ← /* c1 */ { /* c2 */
      Seq(
          SelectString("a/b/c") -> None,
          SelectString("akka://all-systems/Nobody") -> None,
          SelectPath(system / "hallo") -> None,
          SelectPath(looker.path child "hallo") -> None, // test Java API
          SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
      ) // test Java API
    }
) checkOne(looker, l, r)
<<< multiline for with paren, no comments
for ((l, r) ← ( Seq(
    SelectString("a/b/c") -> None,
    SelectString("akka://all-systems/Nobody") -> None,
    SelectPath(system / "hallo") -> None,
    SelectPath(looker.path child "hallo") -> None, // test Java API
    SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
  )
  )
) checkOne(looker, l, r)
>>>
for (
    (l, r) ← (Seq(
        SelectString("a/b/c") -> None,
        SelectString("akka://all-systems/Nobody") -> None,
        SelectPath(system / "hallo") -> None,
        SelectPath(looker.path child "hallo") -> None, // test Java API
        SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
    ))
) checkOne(looker, l, r)
<<< multiline for with paren
for ((l, r) ← /* c1 */ ( /* c2 */ Seq(
    SelectString("a/b/c") -> None,
    SelectString("akka://all-systems/Nobody") -> None,
    SelectPath(system / "hallo") -> None,
    SelectPath(looker.path child "hallo") -> None, // test Java API
    SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
  ) // test Java API
  )
) checkOne(looker, l, r)
>>>
for (
    (l, r) ← /* c1 */ (/* c2 */ Seq(
          SelectString("a/b/c") -> None,
          SelectString("akka://all-systems/Nobody") -> None,
          SelectPath(system / "hallo") -> None,
          SelectPath(looker.path child "hallo") -> None, // test Java API
          SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
      ) // test Java API
    )
) checkOne(looker, l, r)
<<< multiline for with paren, no comments
for ((l, r) ← ( Seq(
    SelectString("a/b/c") -> None,
    SelectString("akka://all-systems/Nobody") -> None,
    SelectPath(system / "hallo") -> None,
    SelectPath(looker.path child "hallo") -> None, // test Java API
    SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
  )
  )
) checkOne(looker, l, r)
>>>
for (
    (l, r) ← (Seq(
        SelectString("a/b/c") -> None,
        SelectString("akka://all-systems/Nobody") -> None,
        SelectPath(system / "hallo") -> None,
        SelectPath(looker.path child "hallo") -> None, // test Java API
        SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
    ))
) checkOne(looker, l, r)
<<< multiline for with paren, no align
align.preset = none
===
for ((l, r) ← /* c1 */ ( /* c2 */Seq(
    SelectString("a/b/c") -> None,
    SelectString("akka://all-systems/Nobody") -> None,
    SelectPath(system / "hallo") -> None,
    SelectPath(looker.path child "hallo") -> None, // test Java API
    SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
  ) // test Java API
  )
) checkOne(looker, l, r)
>>>
for (
    (l, r) ← /* c1 */ (/* c2 */ Seq(
          SelectString("a/b/c") -> None,
          SelectString("akka://all-systems/Nobody") -> None,
          SelectPath(system / "hallo") -> None,
          SelectPath(looker.path child "hallo") -> None, // test Java API
          SelectPath(looker.path descendant Seq("a", "b").asJava) -> None
      ) // test Java API
    )
) checkOne(looker, l, r)
