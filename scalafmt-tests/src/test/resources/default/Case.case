80 columns                                                                     |
<<< Unindent singleline
case FormatToken(_: Ident | _: `this` | _: `_ ` | _: `(`, _: `.` | _: `#`, _) => List(
  NoSplit0
)
>>>
case FormatToken(_: Ident | _: `this` | _: `_ ` | _: `(`,
                 _: `.` | _: `#`,
                 _) =>
  List(
      NoSplit0
  )
<<< Long if
case tok if tok.left.name.startsWith("xml") && tok.right.name.startsWith("xml") => List( NoSplit0 )
>>>
case tok
    if tok.left.name.startsWith("xml") && tok.right.name.startsWith("xml") =>
  List(NoSplit0)
<<< Pathological if
case FormatToken(left, open: `(`, _)
    if owners(open).isInstanceOf[Term.Apply] ||
      owners(left).parent.exists(_.isInstanceOf[Defn.Def]) ||
      owners(left).parent.exists(_.isInstanceOf[Defn.Class]) =>
  List(
    NoSplit0
  )
>>>
case FormatToken(left, open: `(`, _)
    if owners(open).isInstanceOf[Term.Apply] ||
      owners(left).parent.exists(_.isInstanceOf[Defn.Def]) ||
      owners(left).parent.exists(_.isInstanceOf[Defn.Class]) =>
  List(
      NoSplit0
  )
<<< wrapped cond inside if
case Decision(t@FormatToken(comma: `,`, right, between), splits)
        if owners.get(open) == owners.get(comma) &&
        // If comment is bound to comma, see unit/Comment.
        (
          !right.isInstanceOf[Comment] ||
          between.exists(_.isInstanceOf[`\n`])) =>
      Decision(t, splits.filter(_.modification == Newline))
>>>
case Decision(t @ FormatToken(comma: `,`, right, between), splits)
    if owners.get(open) == owners.get(comma) &&
      // If comment is bound to comma, see unit/Comment.
      (!right.isInstanceOf[Comment] ||
        between.exists(_.isInstanceOf[`\n`])) =>
  Decision(t, splits.filter(_.modification == Newline))
<<< Bug
case FormatToken(open: `(`, right, _) if leftOwner.isInstanceOf[Term.ApplyInfix] =>
val close = matchingParentheses(hash(open))
val policy =
  if (right.isInstanceOf[`if`]) SingleLineBlock(close)
  else NoPolicy
Seq(
  Split(NoSplit, 0).withPolicy(policy).withIndent(2, matchingParentheses(hash(open)), Left),
  Split(Newline, 1).withIndent(2, matchingParentheses(hash(open)), Left)
)
>>>
case FormatToken(open: `(`, right, _)
    if leftOwner.isInstanceOf[Term.ApplyInfix] =>
  val close = matchingParentheses(hash(open))
  val policy =
    if (right.isInstanceOf[`if`]) SingleLineBlock(close)
    else NoPolicy
  Seq(
      Split(NoSplit, 0)
        .withPolicy(policy)
        .withIndent(2, matchingParentheses(hash(open)), Left),
      Split(Newline, 1).withIndent(2, matchingParentheses(hash(open)), Left)
  )
<<< bind @ to (
case   open@(_: `{` | _: `[` | _: `(`) => stack = open :: stack
>>>
case open @ (_: `{` | _: `[` | _: `(`) => stack = open :: stack
<<< or #177
   case NullTag
           | UnitTag
           | BooleanTag
           | ByteTag
           | ShortTag
           | CharTag
           | IntTag
           | LongTag
           | FloatTag
           | DoubleTag
           | StringTag =>
         focus withValue genLiteralValue(lit)
>>>
case NullTag | UnitTag | BooleanTag | ByteTag | ShortTag | CharTag | IntTag |
    LongTag | FloatTag | DoubleTag | StringTag =>
  focus withValue genLiteralValue(lit)
<<< quirk #233
      case FormatToken(_: `(` | _: `[`, _, between)
          if style.configStyleArguments &&
            (isDefnSite(leftOwner) || isCallSite(leftOwner)) &&
              opensConfigStyle(formatToken) =>
>>>
case FormatToken(_: `(` | _: `[`, _, between)
    if style.configStyleArguments &&
      (isDefnSite(leftOwner) || isCallSite(leftOwner)) &&
      opensConfigStyle(formatToken) =>
<<< gimme space with config style
      case e @ (
      _: NoSuchMethodException | _: SecurityException |
                _: IllegalAccessException | _: IllegalArgumentException |
                _: InvocationTargetException | _: NullPointerException |
                _: ClassNotFoundException
                ) =>
>>>
case e @ (
        _: NoSuchMethodException | _: SecurityException |
        _: IllegalAccessException | _: IllegalArgumentException |
        _: InvocationTargetException | _: NullPointerException |
        _: ClassNotFoundException
    ) =>
