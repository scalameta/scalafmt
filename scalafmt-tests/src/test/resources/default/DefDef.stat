80 columns                                                                     |
<<< Long line
object a {
  /**
    * Returns True is this state will always return better formatting than other.
    */
  def alwaysBetter(other: State): Boolean = this.cost <= other.cost &&
  this.indentation <= other.indentation
}
>>>
object a {

  /** Returns True is this state will always return better formatting than other.
    */
  def alwaysBetter(other: State): Boolean =
    this.cost <= other.cost &&
      this.indentation <= other.indentation
}
<<< context bound
def addDefn[T <: Keyword: ClassTag](mods: Seq[Mod], tree: Tree): Unit
>>>
def addDefn[T <: Keyword: ClassTag](mods: Seq[Mod], tree: Tree): Unit
<<< crazy signature
private def withNewLocalDefs(bindings: List[Binding]) (buildInner:(List[
        LocalDef],
    PreTransCont) => TailRec[Tree]) (cont: PreTransCont): TailRec[Tree]
>>>
private def withNewLocalDefs(bindings: List[Binding])(
    buildInner: (List[LocalDef], PreTransCont) => TailRec[Tree])(
    cont: PreTransCont): TailRec[Tree]
<<< slick joinFull
  def joinFull[E1 >: E, E2, U2, D[_], O1, U1, O2](q2: Query[E2, _, D])(implicit ol1: OptionLift[E1, O1], sh1: Shape[FlatShapeLevel, O1, U1, _], ol2: OptionLift[E2, O2], sh2: Shape[FlatShapeLevel, O2, U2, _])
>>>
def joinFull[E1 >: E, E2, U2, D[_], O1, U1, O2](q2: Query[E2, _, D])(
    implicit ol1: OptionLift[E1, O1],
    sh1: Shape[FlatShapeLevel, O1, U1, _],
    ol2: OptionLift[E2, O2],
    sh2: Shape[FlatShapeLevel, O2, U2, _])
<<< slick zipWith
  def zipWith[E2, U2, F, G, T, D[_]](q2: Query[E2, U2, D], f: (E, E2) => F)(implicit shape: Shape[_ <: FlatShapeLevel, F, T, G]): Query[G, T, C]
>>>
def zipWith[E2, U2, F, G, T, D[_]](q2: Query[E2, U2, D], f: (E, E2) => F)(
    implicit shape: Shape[_ <: FlatShapeLevel, F, T, G]): Query[G, T, C]
<<< slick groupBy
  def groupBy[K, T, G, P](f: E => K)(implicit kshape: Shape[_ <: FlatShapeLevel, K, T, G], vshape: Shape[_ <: FlatShapeLevel, E, _, P]): Query[(G, Query[P, U, Seq]), (T, Query[P, U, Seq]), C]
>>>
def groupBy[K, T, G, P](f: E => K)(
    implicit kshape: Shape[_ <: FlatShapeLevel, K, T, G],
    vshape: Shape[_ <: FlatShapeLevel, E, _, P])
  : Query[(G, Query[P, U, Seq]), (T, Query[P, U, Seq]), C]
<<< slick groupBy 2
  def groupBy[K, T, G, P](f: E => K)(implicit kshape: Shape[_ <: FlatShapeLevel, K, T, G], vshape: Shape[_ <: FlatShapeLevel, E, _, P]): Query[(G, Query[P, U, Seq]), (T, Query[P, U, Seq]), CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC, (T, Query[P, U, Seq]), (T, Query[P, U, Seq])]
>>>
def groupBy[K, T, G, P](f: E => K)(
    implicit kshape: Shape[_ <: FlatShapeLevel, K, T, G],
    vshape: Shape[_ <: FlatShapeLevel, E, _, P])
  : Query[(G, Query[P, U, Seq]),
          (T, Query[P, U, Seq]),
          CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC,
          (T, Query[P, U, Seq]),
          (T, Query[P, U, Seq])]

<<< slick queryShape
  @inline implicit def queryShape[Level >: NestedShapeLevel <: ShapeLevel, T, Q <: QueryBase[_]](implicit ev: Q <:< Rep[T]) = RepShape[Level, Q, T]
>>>
@inline implicit def queryShape[Level >: NestedShapeLevel <: ShapeLevel,
                                T,
                                Q <: QueryBase[_]](implicit ev: Q <:< Rep[T]) =
  RepShape[Level, Q, T]
<<< slick basequery
final class BaseJoinQuery[+E1, +E2, U1, U2, C[_], +B1, +B2](leftGen: TermSymbol, rightGen: TermSymbol, left: Node, right: Node, jt: JoinType, base: ShapedValue[_ <: (E1, E2), (U1, U2)], b1: B1, b2: B2)
>>>
final class BaseJoinQuery[+E1, +E2, U1, U2, C[_], +B1, +B2](
    leftGen: TermSymbol,
    rightGen: TermSymbol,
    left: Node,
    right: Node,
    jt: JoinType,
    base: ShapedValue[_ <: (E1, E2), (U1, U2)],
    b1: B1,
    b2: B2)
<<< Single line state column
  @tailrec
  final def getSelectChain(child: Term.Select,
                           accum: Vector[Term.Select] = Vector
                             .empty[Term.Select]): Vector[Term.Select] = {
    body
  }
>>>
@tailrec
final def getSelectChain(
    child: Term.Select,
    accum: Vector[Term.Select] = Vector.empty[Term.Select])
  : Vector[Term.Select] = {
  body
}
<<< hanging #127
 /**
   * If any errors happen below this line, but before a groupBy, write to a TypedSink
   */
  def addTrap[U >: T](trapSink: Source with TypedSink[T])(implicit conv: TupleConverter[U]): TypedPipe[U] =
    TypedPipeFactory(
    { (flowDef, mode) =>
      val fields = trapSink.sinkFields
      // TODO: with diamonds in the graph, this might not be correct
      val pipe = RichPipe.assignName(fork.toPipe[T](fields)(flowDef, mode, trapSink.setter))
      flowDef.addTrap(pipe, trapSink.createTap(Write)(mode))
      TypedPipe.from[U](pipe, fields)(flowDef, mode, conv)
    })
>>>
/** If any errors happen below this line, but before a groupBy, write to a TypedSink
  */
def addTrap[U >: T](trapSink: Source with TypedSink[T])(
    implicit conv: TupleConverter[U]): TypedPipe[U] =
  TypedPipeFactory({ (flowDef, mode) =>
    val fields = trapSink.sinkFields
    // TODO: with diamonds in the graph, this might not be correct
    val pipe = RichPipe.assignName(
        fork.toPipe[T](fields)(flowDef, mode, trapSink.setter))
    flowDef.addTrap(pipe, trapSink.createTap(Write)(mode))
    TypedPipe.from[U](pipe, fields)(flowDef, mode, conv)
  })
<<< config style at defn site #144
def point(
  x: Int,
  y: Int
): Point = {
Point(x, y)
                }
>>>
def point(
    x: Int,
    y: Int
): Point = {
  Point(x, y)
}
<<< macro #149
def callMain [T] (t: T): T = macro callMainImpl[T]
>>>
def callMain[T](t: T): T = macro callMainImpl[T]
<<< secondary constructor #168
def this(`type`: String, settings: js.Dynamic) = this(`type`, settings.asInstanceOf[Clipboard])
>>>
def this(`type`: String, settings: js.Dynamic) =
  this(`type`, settings.asInstanceOf[Clipboard])
<<< single expression body #171
def viewMethod: Gen[ViewClass.Op] = oneOf(
  lowHalf     ^^ lop(n => s"drop $n"   -> (_ drop n)),
  highHalf    ^^ lop(n => s"take $n"   -> (_ take n)),
  chooseRange ^^ lop(r => s"slice $r"  -> (_ slice r))
)
>>>
def viewMethod: Gen[ViewClass.Op] = oneOf(
    lowHalf ^^ lop(n => s"drop $n" -> (_ drop n)),
    highHalf ^^ lop(n => s"take $n" -> (_ take n)),
    chooseRange ^^ lop(r => s"slice $r" -> (_ slice r))
)
<<< typelevel/cats
  implicit def validatedInstances[E](implicit E: Semigroup[E]): Traverse[Validated[E, ?]] with ApplicativeError[Validated[E, ?], E] = 2
>>>
implicit def validatedInstances[E](implicit E: Semigroup[E])
  : Traverse[Validated[E, ?]] with ApplicativeError[Validated[E, ?], E] = 2
<<< #212 is last resort 0.2.3-RC1 bug
{
   def UnindentAtExclude(
       exclude: Set[Token],
       indent: Length): PartialFunction[Decision, Decision] = {
   println("hello")
 }
 }
>>>
{
  def UnindentAtExclude(
      exclude: Set[Token],
      indent: Length): PartialFunction[Decision, Decision] = {
    println("hello")
  }
}
<<< bad newline #198
object a {
  override def composeWithFunctor[G[_]: Functor]: Functor[Lambda[X => F[G[X]]]] = compose[G]
  }
>>>
object a {
  override def composeWithFunctor[G[_]: Functor]
    : Functor[Lambda[X => F[G[X]]]] = compose[G]
}
<<< #238
object a {
private def a012345678901234567(
      b01234567890123456789aaaaaaaaaaaaaaaaa: B01234567890123456789): Future[C012345678901[D012345678901]] = {
    ???
  }
}
>>>
object a {
  private def a012345678901234567(
      b01234567890123456789aaaaaaaaaaaaaaaaa: B01234567890123456789)
    : Future[C012345678901[D012345678901]] = {
    ???
  }
}
<<< type tuple type functions madness
{
  def conditionalUpdatePersistentPath(
           path: String,
           data: String,
           expectVersion: Int,
           optionalChecker: Option[(ZkUtils, String, String) => (Boolean, Int)] = None)
         : (Boolean, Int) = {
         ???
         }
           }
>>>
{
  def conditionalUpdatePersistentPath(
      path: String,
      data: String,
      expectVersion: Int,
      optionalChecker: Option[(ZkUtils, String, String) => (Boolean, Int)] =
        None): (Boolean, Int) = {
    ???
  }
}
<<< infix types
  def zip[C](x: A =>? C): A =>? (B, C) = 2
>>>
def zip[C](x: A =>? C): A =>? (B, C) = 2
<<< = { no format
{
  def defnSiteLastToken(tree: Tree): Token = {
    tree match {
      // TODO(olafur) scala.meta should make this easier.
      case procedure: Defn.Def
          if procedure.decltpe.isDefined &&
          procedure.decltpe.get.tokens.isEmpty =>
        procedure.body.tokens.find(_.isInstanceOf[`{`])
      case _ => tree.tokens.find(t => t.isInstanceOf[`=`] && owners(t) == tree)
    }
  }.getOrElse(tree.tokens.last)
  }
>>>
{
  def defnSiteLastToken(tree: Tree): Token = {
    tree match {
      // TODO(olafur) scala.meta should make this easier.
      case procedure: Defn.Def
          if procedure.decltpe.isDefined &&
            procedure.decltpe.get.tokens.isEmpty =>
        procedure.body.tokens.find(_.isInstanceOf[`{`])
      case _ => tree.tokens.find(t => t.isInstanceOf[`=`] && owners(t) == tree)
    }
  }.getOrElse(tree.tokens.last)
}
<<< #274
{
{
@inline def rawToInt(x: Double): Int =
      (x.asInstanceOf[js.Dynamic] | 0.asInstanceOf[js.Dynamic]).asInstanceOf[Int]
}
}
>>>
{
  {
    @inline def rawToInt(x: Double): Int =
      (x.asInstanceOf[js.Dynamic] | 0.asInstanceOf[js.Dynamic])
        .asInstanceOf[Int]
  }
}
<<< #360 macro
{
  implicit def adtSyntax[A](target: A): Any =
    macro LiftMacros.materializeADTSyntax[A]
  implicit def adtSyntax[A](target: A): Any =
    LiftMacros.materializeADTSyntax[A]
}
>>>
{
  implicit def adtSyntax[A](target: A): Any =
    macro LiftMacros.materializeADTSyntax[A]
  implicit def adtSyntax[A](target: A): Any =
    LiftMacros.materializeADTSyntax[A]
}
