80 columns                                                                     |
<<< val type apply formats too #117
val xxxxxxxxxxxxxxxxxxxxxxxxx:FooBarrrrrr[BaaaaaaaaaaaazBazzzKaaaaaaaaar[ String, Option[ List[Either[ Int, Option[String] ]]] ]]
>>>
val xxxxxxxxxxxxxxxxxxxxxxxxx: FooBarrrrrr[
    BaaaaaaaaaaaazBazzzKaaaaaaaaar[String,
                                   Option[List[Either[Int, Option[String]]]]]]
<<< var type apply formats too #117
var x:FooBarrrrrr[B[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]
>>>
var x: FooBarrrrrr[B[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,
                     AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]
<<< insane type apply from u/refriedi via reddit
def myMethod[F[_]:Functor, G[_]:Applicative, A:DecodeJson:TypeTag:Meta, B:DecodeJson:TypeTag:Meta, C:Meta:TypeTag:UrlParameterEncode](gfa: G[F[A]], b: B)(f: (A,B) => C): Foo[C]
>>>
def myMethod[F[_]: Functor,
             G[_]: Applicative,
             A: DecodeJson: TypeTag: Meta,
             B: DecodeJson: TypeTag: Meta,
             C: Meta: TypeTag: UrlParameterEncode](gfa: G[F[A]], b: B)(
    f: (A, B) => C): Foo[C]
<<< directembedding slick mega types
def compile[T, T2, C[_]](e: lifted.BaseJoinQuery[AbstractTable[T], AbstractTable[T2], AbstractTable[T]#TableElementType, AbstractTable[T2]#TableElementType, C, _, _]): direct.BaseJoinQuery[T, T2, T, T2, C]
>>>
def compile[T, T2, C[_]](
    e: lifted.BaseJoinQuery[AbstractTable[T],
                            AbstractTable[T2],
                            AbstractTable[T]#TableElementType,
                            AbstractTable[T2]#TableElementType,
                            C,
                            _,
                            _]): direct.BaseJoinQuery[T, T2, T, T2, C]
<<< slick BaseJoinQuery
new BaseJoinQuery[E, Rep[Long], U, Long, C, E, Rep[Long]](leftGen, rightGen, toNode, RangeFrom(0L), JoinType.Zip, aliased1.zip(aliased2), aliased1.value, aliased2.value)
>>>
new BaseJoinQuery[E, Rep[Long], U, Long, C, E, Rep[Long]](
    leftGen,
    rightGen,
    toNode,
    RangeFrom(0L),
    JoinType.Zip,
    aliased1.zip(aliased2),
    aliased1.value,
    aliased2.value)
<<< breaking cost #158
 object ReferrerPolicy {
  val `no-referrer-when-downgrade` = "no-referrer-when-downgrade".asInstanceOf[
      ReferrerPolicy]
  val `origin-when-cross-origin` = "origin-when-cross-origin".asInstanceOf[
      ReferrerPolicy]
 }
>>>
 object ReferrerPolicy {
  val `no-referrer-when-downgrade` =
    "no-referrer-when-downgrade".asInstanceOf[ReferrerPolicy]
  val `origin-when-cross-origin` =
    "origin-when-cross-origin".asInstanceOf[ReferrerPolicy]
}
<<< type.tuple
  def processTypeForUpdateOrApply(tp: ScType, call: MethodInvocation, isShape: Boolean):
      Option[(ScType, collection.Set[ImportUsed], Option[PsiNamedElement], Option[ScalaResolveResult])] = {
      println(1)
      }
>>>
def processTypeForUpdateOrApply(
    tp: ScType,
    call: MethodInvocation,
    isShape: Boolean): Option[(ScType,
                               collection.Set[ImportUsed],
                               Option[PsiNamedElement],
                               Option[ScalaResolveResult])] = {
  println(1)
}
<<< #1249 classic
maxColumn = 30
===
class Foo[
  F[_] : Bar : Sync
       : ExecuteUnsafe,
  T
]
>>>
class Foo[
    F[_]: Bar: Sync: ExecuteUnsafe,
    T
]
<<< #1249 fold
maxColumn = 30
newlines.beforeTypeBounds = fold
===
class Foo[
  F[_] : Bar
       : Sync : ExecuteUnsafe,
  T
]
>>>
class Foo[
    F[_]: Bar: Sync
      : ExecuteUnsafe,
    T
]
<<< #1249 unfold
maxColumn = 30
newlines.beforeTypeBounds = unfold
===
class Foo[
  F[_] : Bar
       : Sync : ExecuteUnsafe,
  T
]
>>>
class Foo[
    F[_]
      : Bar
      : Sync
      : ExecuteUnsafe,
    T
]
<<< #1249 keep
maxColumn = 30
newlines.beforeTypeBounds = keep
===
class Foo[
  F[_] : Bar
       : Sync : ExecuteUnsafe,
  T
]
>>>
class Foo[
    F[_]: Bar
      : Sync: ExecuteUnsafe,
    T
]
<<< #1342 classic
object TestScalafmt {
  def sayHi[
      T: HasContextA: HasContextB: HasContextB: HasContextB
      : HasContextB: HasContextB: HasContextB: HasContextB:
       HasContextB: HasContextB: HasContextB: HasContextB: HasContextB](
      name: String): Unit =
    s"my name is $name"
}
>>>
object TestScalafmt {
  def sayHi[
      T: HasContextA: HasContextB: HasContextB: HasContextB: HasContextB: HasContextB: HasContextB: HasContextB: HasContextB: HasContextB: HasContextB: HasContextB: HasContextB](
      name: String): Unit =
    s"my name is $name"
}
<<< #1342 fold
newlines.beforeTypeBounds = fold
===
object TestScalafmt {
  def sayHi[
      T: HasContextA: HasContextB: HasContextB: HasContextB
      : HasContextB: HasContextB: HasContextB: HasContextB:
       HasContextB: HasContextB: HasContextB: HasContextB: HasContextB](
      name: String): Unit =
    s"my name is $name"
}
>>>
object TestScalafmt {
  def sayHi[T: HasContextA: HasContextB: HasContextB: HasContextB: HasContextB
    : HasContextB: HasContextB: HasContextB: HasContextB: HasContextB
    : HasContextB: HasContextB: HasContextB](name: String): Unit =
    s"my name is $name"
}
<<< #1342 unfold
newlines.beforeTypeBounds = unfold
===
object TestScalafmt {
  def sayHi[
      T: HasContextA: HasContextB: HasContextB: HasContextB
      : HasContextB: HasContextB: HasContextB: HasContextB:
       HasContextB: HasContextB: HasContextB: HasContextB: HasContextB](
      name: String): Unit =
    s"my name is $name"
}
>>>
object TestScalafmt {
  def sayHi[T
    : HasContextA
    : HasContextB
    : HasContextB
    : HasContextB
    : HasContextB
    : HasContextB
    : HasContextB
    : HasContextB
    : HasContextB
    : HasContextB
    : HasContextB
    : HasContextB
    : HasContextB](name: String): Unit =
    s"my name is $name"
}
<<< #1342 keep
newlines.beforeTypeBounds = keep
===
object TestScalafmt {
  def sayHi[
      T: HasContextA: HasContextB: HasContextB: HasContextB
      : HasContextB: HasContextB: HasContextB: HasContextB:
       HasContextB: HasContextB: HasContextB: HasContextB: HasContextB](
      name: String): Unit =
    s"my name is $name"
}
>>>
object TestScalafmt {
  def sayHi[T: HasContextA: HasContextB: HasContextB: HasContextB
    : HasContextB: HasContextB: HasContextB: HasContextB: HasContextB
    : HasContextB: HasContextB: HasContextB: HasContextB](name: String): Unit =
    s"my name is $name"
}
<<< type inside block longer, classic
maxColumn = 60
align.preset = none
===
object a {
  def foo[
     AAAAAAAAAAAAA >: CCCCCC[cccccc] <: DDDDDD[dddddd] <% CCCCCC[cccccc]
       <% DDDDDD[dddddd] : CCCCCC[cccccc] : DDDDDD[dddddd],
     AAAAAAAAAAAAA >: CCCCCCCC[cccccccc]
       <: DDDDDDDD[dddddddd] <% CCCCCCCC[cccccccc] <% DDDDDDDD[dddddddd]
       : CCCCCCCC[cccccccc] : DDDDDDDD[dddddddd]
  ] = ???
}
>>>
object a {
  def foo[
      AAAAAAAAAAAAA >: CCCCCC[cccccc] <: DDDDDD[
          dddddd] <% CCCCCC[cccccc] <% DDDDDD[
          dddddd]: CCCCCC[cccccc]: DDDDDD[dddddd],
      AAAAAAAAAAAAA >: CCCCCCCC[cccccccc] <: DDDDDDDD[
          dddddddd] <% CCCCCCCC[cccccccc] <% DDDDDDDD[
          dddddddd]: CCCCCCCC[cccccccc]: DDDDDDDD[dddddddd]
  ] = ???
}
<<< type inside block longer, keep
maxColumn = 60
align.preset = none
newlines.beforeTypeBounds = keep
===
object a {
  def foo[
     AAAAAAAAAAAAA >: CCCCCC[cccccc] <: DDDDDD[dddddd] <% CCCCCC[cccccc]
       <% DDDDDD[dddddd] : CCCCCC[cccccc] : DDDDDD[dddddd],
     AAAAAAAAAAAAA >: CCCCCCCC[cccccccc]
       <: DDDDDDDD[dddddddd] <% CCCCCCCC[cccccccc] <% DDDDDDDD[dddddddd]
       : CCCCCCCC[cccccccc] : DDDDDDDD[dddddddd]
  ] = ???
}
>>>
object a {
  def foo[
      AAAAAAAAAAAAA >: CCCCCC[cccccc] <: DDDDDD[dddddd]
        <% CCCCCC[cccccc]
        <% DDDDDD[dddddd]: CCCCCC[cccccc]: DDDDDD[dddddd],
      AAAAAAAAAAAAA >: CCCCCCCC[cccccccc]
        <: DDDDDDDD[dddddddd] <% CCCCCCCC[cccccccc]
        <% DDDDDDDD[dddddddd]
        : CCCCCCCC[cccccccc]: DDDDDDDD[dddddddd]
  ] = ???
}
<<< type inside block longer, fold
maxColumn = 60
align.preset = none
newlines.beforeTypeBounds = fold
===
object a {
  def foo[
     AAAAAAAAAAAAA >: CCCCCC[cccccc] <: DDDDDD[dddddd] <% CCCCCC[cccccc]
       <% DDDDDD[dddddd] : CCCCCC[cccccc] : DDDDDD[dddddd],
     AAAAAAAAAAAAA >: CCCCCCCC[cccccccc]
       <: DDDDDDDD[dddddddd] <% CCCCCCCC[cccccccc] <% DDDDDDDD[dddddddd]
       : CCCCCCCC[cccccccc] : DDDDDDDD[dddddddd]
  ] = ???
}
>>>
object a {
  def foo[
      AAAAAAAAAAAAA >: CCCCCC[cccccc] <: DDDDDD[dddddd]
        <% CCCCCC[cccccc] <% DDDDDD[dddddd]: CCCCCC[cccccc]
        : DDDDDD[dddddd],
      AAAAAAAAAAAAA >: CCCCCCCC[cccccccc]
        <: DDDDDDDD[dddddddd] <% CCCCCCCC[cccccccc]
        <% DDDDDDDD[dddddddd]: CCCCCCCC[cccccccc]
        : DDDDDDDD[dddddddd]
  ] = ???
}
<<< type inside block longer, unfold
maxColumn = 60
align.preset = none
newlines.beforeTypeBounds = unfold
indent.main = 4
===
object a {
  def foo[
     AAAAAAAAAAAAA >: CCCCCC[cccccc] <: DDDDDD[dddddd] <% CCCCCC[cccccc]
       <% DDDDDD[dddddd] : CCCCCC[cccccc] : DDDDDD[dddddd],
     AAAAAAAAAAAAA >: CCCCCCCC[cccccccc]
       <: DDDDDDDD[dddddddd] <% CCCCCCCC[cccccccc] <% DDDDDDDD[dddddddd]
       : CCCCCCCC[cccccccc] : DDDDDDDD[dddddddd]
  ] = ???
}
>>>
object a {
    def foo[
        AAAAAAAAAAAAA
            >: CCCCCC[cccccc]
            <: DDDDDD[dddddd]
            <% CCCCCC[cccccc]
            <% DDDDDD[dddddd]
            : CCCCCC[cccccc]
            : DDDDDD[dddddd],
        AAAAAAAAAAAAA
            >: CCCCCCCC[cccccccc]
            <: DDDDDDDD[dddddddd]
            <% CCCCCCCC[cccccccc]
            <% DDDDDDDD[dddddddd]
            : CCCCCCCC[cccccccc]
            : DDDDDDDD[dddddddd]
    ] = ???
}
