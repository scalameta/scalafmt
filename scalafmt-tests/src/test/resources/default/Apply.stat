80 columns                                                                     |
<<< Massive 1
List(Split(Space, 0).withPolicy(SingleLineBlock(close)),
           Split(nl, 1).withPolicy({
             case Decision(t@FormatToken(_, `close`, _), s) =>
               Decision(t, List(Split(Newline, 0)))
           }).withIndent(2, close, Right))
>>>
List(Split(Space, 0).withPolicy(SingleLineBlock(close)),
     Split(nl, 1)
       .withPolicy({
         case Decision(t @ FormatToken(_, `close`, _), s) =>
           Decision(t, List(Split(Newline, 0)))
       })
       .withIndent(2, close, Right))
<<< Massive 2
 List(Split(Space,
            0,
            policy = SingleLineBlock(close),
            ignoreIf = blockSize > style.maxColumn),
      Split(nl,
            1,
            policy = {
            case Decision(t@FormatToken(_, `close`, _), s) =>
            Decision(t, List(Split(Newline, 0)))
            }))
>>>
List(Split(Space,
           0,
           policy = SingleLineBlock(close),
           ignoreIf = blockSize > style.maxColumn),
     Split(nl, 1, policy = {
       case Decision(t @ FormatToken(_, `close`, _), s) =>
         Decision(t, List(Split(Newline, 0)))
     }))
<<< Massive (good API) 3
Split(Space, 0).withPolicy {
    // Following case:
    // package foo // this is cool
    //
    // object a
    case Decision(t@FormatToken(`lastRef`, _: Comment, between), splits)
        if !between.exists(_.isInstanceOf[`\n`]) =>
      Decision(t, splits.map(_.withModification(Space)))
    case Decision(t@FormatToken(`lastRef`, _, _), splits) =>
      Decision(t, splits.map(_.withModification(Newline2x)))
}
>>>
Split(Space, 0).withPolicy {
  // Following case:
  // package foo // this is cool
  //
  // object a
  case Decision(t @ FormatToken(`lastRef`, _: Comment, between), splits)
      if !between.exists(_.isInstanceOf[`\n`]) =>
    Decision(t, splits.map(_.withModification(Space)))
  case Decision(t @ FormatToken(`lastRef`, _, _), splits) =>
    Decision(t, splits.map(_.withModification(Newline2x)))
}
<<< Massive (bad API) 3
Split(Space, 0, policy = {
    // Following case:
    // package foo // this is cool
    //
    // object a
    case Decision(t@FormatToken(`lastRef`, _: Comment, between), splits)
        if !between.exists(_.isInstanceOf[`\n`]) =>
      Decision(t, splits.map(_.withModification(Space)))
    case Decision(t@FormatToken(`lastRef`, _, _), splits) =>
      Decision(t, splits.map(_.withModification(Newline2x)))
})
>>>
Split(Space, 0, policy = {
  // Following case:
  // package foo // this is cool
  //
  // object a
  case Decision(t @ FormatToken(`lastRef`, _: Comment, between), splits)
      if !between.exists(_.isInstanceOf[`\n`]) =>
    Decision(t, splits.map(_.withModification(Space)))
  case Decision(t @ FormatToken(`lastRef`, _, _), splits) =>
    Decision(t, splits.map(_.withModification(Newline2x)))
})
<<< Looong
Seq(
  Split(modification, 0, policy = singleLine)
    .withIndent(indent, close, Left)
     .withOptimal(optimalTok),
  Split(Newline, 1 + nestedPenalty + lhsPenalty, policy = singleLine)
    .withIndent(indent, close, Left)
    .withOptimal(optimalTok),
  Split(modification, 2 + lhsPenalty, policy = oneArgOneLine, ignoreIf = singleArgument)
    .withIndent(StateColumn, close, Right)
    .withOptimal(optimalTok),
  Split(Newline,
    3 + nestedPenalty + lhsPenalty,
    policy = oneArgOneLine, ignoreIf = singleArgument)
    .withIndent(indent, close, Left)

)
>>>
Seq(
    Split(modification, 0, policy = singleLine)
      .withIndent(indent, close, Left)
      .withOptimal(optimalTok),
    Split(Newline, 1 + nestedPenalty + lhsPenalty, policy = singleLine)
      .withIndent(indent, close, Left)
      .withOptimal(optimalTok),
    Split(modification,
          2 + lhsPenalty,
          policy = oneArgOneLine,
          ignoreIf = singleArgument)
      .withIndent(StateColumn, close, Right)
      .withOptimal(optimalTok),
    Split(Newline,
          3 + nestedPenalty + lhsPenalty,
          policy = oneArgOneLine,
          ignoreIf = singleArgument).withIndent(indent, close, Left)
)
<<< continuation indent
Seq(
            // Either everything fits in one line or break on =>
            Split(Space, 0).withPolicy(SingleLineBlock(lastToken)),
            Split(Space, 1).withPolicy(Policy({
                  case Decision(t@FormatToken(`arrow`, _, _), s) =>
                    Decision(t, s.filter(_.modification.isNewline))
                },
                expire = lastToken.end))
              .withIndent(2, lastToken, Left) // case body indented by 2.
              .withIndent(2, arrow, Left) // cond body indented by 4.
        )
>>>
Seq(
    // Either everything fits in one line or break on =>
    Split(Space, 0).withPolicy(SingleLineBlock(lastToken)),
    Split(Space, 1)
      .withPolicy(Policy({
        case Decision(t @ FormatToken(`arrow`, _, _), s) =>
          Decision(t, s.filter(_.modification.isNewline))
      }, expire = lastToken.end))
      .withIndent(2, lastToken, Left) // case body indented by 2.
      .withIndent(2, arrow, Left) // cond body indented by 4.
)
<<< breaking on ( is cheaper than [
val ret = new mutable.MapBuilder[TokenHash, Tree, Map[TokenHash, Tree]](Map[TokenHash, Tree]())
>>>
val ret = new mutable.MapBuilder[TokenHash, Tree, Map[TokenHash, Tree]](
    Map[TokenHash, Tree]())
<<< . is cheaper
{{{{
        Seq(
            Split(
                  // This split needs to have an optimalAt field.
                  Space,
                  0,
                  ignoreIf = !spaceCouldBeOk,
                  optimalAt = Some(expire_______________a)).withPolicy(SingleLineBlockAAAA(
                expire))
        )
}}}}
>>>
{
  {
    {
      {
        Seq(
            Split(
                  // This split needs to have an optimalAt field.
                  Space,
                  0,
                  ignoreIf = !spaceCouldBeOk,
                  optimalAt = Some(expire_______________a))
              .withPolicy(SingleLineBlockAAAA(expire))
        )
      }
    }
  }
}
<<< penalize newlines inside apply 1
val ret = new mutable.MapBuilder[TokenHash, Token, Map[TokenHash, Token]](Map
             .empty[TokenHash, Token])
>>>
val ret = new mutable.MapBuilder[TokenHash, Token, Map[TokenHash, Token]](
    Map.empty[TokenHash, Token])
<<< penalize newlines inside apply 2
{{
val result = new scala.collection.mutable.SetBuilder[Token, Set[Token]](Set.empty[Token])
}}
>>>
{
  {
    val result = new scala.collection.mutable.SetBuilder[Token, Set[Token]](
        Set.empty[Token])
  }
}
<<< property scalding
  writeRead(
    // Use list because Array has a shitty toString
    { (b: List[Byte], os) => os.writePosVarInt(b.size); os.writeBytes(b.toArray) },
    { is =>
      val bytes = new Array[Byte](is.readPosVarInt)
      is.readFully(bytes)
      bytes.toList
    })
>>>
writeRead(
          // Use list because Array has a shitty toString
          { (b: List[Byte], os) =>
            os.writePosVarInt(b.size); os.writeBytes(b.toArray)
          }, { is =>
            val bytes = new Array[Byte](is.readPosVarInt)
            is.readFully(bytes)
            bytes.toList
          })
<<< SKIP spark configsWithAlternatives
{
val configsWithAlternatives = Map[String, Seq[AlternateConfig]](
    "spark.executor.userClassPathFirst" -> Seq(
      AlternateConfig("spark.files.userClassPathFirst", "1.3")),
    "spark.history.fs.cleaner.interval" -> Seq(

      AlternateConfig("spark.history.fs.cleaner.interval.seconds", "1.4")),
    "spark.history.fs.cleaner.maxAge" -> Seq(
      AlternateConfig("spark.history.fs.cleaner.maxAge.seconds", "1.4")),
    "spark.yarn.am.waitTime" -> Seq(
      AlternateConfig("spark.yarn.applicationMaster.waitTries", "1.3",
        // Translate old value to a duration, with 10s wait time per try.
        translation = s => s"${s.toLong * 10}s")),
    "spark.reducer.maxSizeInFlight" -> Seq(
      AlternateConfig("spark.reducer.maxMbInFlight", "1.4")),
    "spark.kryoserializer.buffer" -> Seq(AlternateConfig("spark.kryoserializer.buffer.mb", "1.4",
          translation = s => s"${(s.toDouble * 1000).toInt}k")),
    "spark.yarn.jars" -> Seq(
      AlternateConfig("spark.yarn.jar", "2.0"))
    )
    val  x = 1
    }
>>>
{
  val configsWithAlternatives = Map[String, Seq[AlternateConfig]](
    "spark.executor.userClassPathFirst" -> Seq(
      AlternateConfig("spark.files.userClassPathFirst", "1.3")),
    "spark.history.fs.cleaner.interval" -> Seq(

      AlternateConfig("spark.history.fs.cleaner.interval.seconds", "1.4")),
    "spark.history.fs.cleaner.maxAge" -> Seq(
      AlternateConfig("spark.history.fs.cleaner.maxAge.seconds", "1.4")),
    "spark.yarn.am.waitTime" -> Seq(
      AlternateConfig("spark.yarn.applicationMaster.waitTries", "1.3",
        // Translate old value to a duration, with 10s wait time per try.
        translation = s => s"${s.toLong * 10}s")),
    "spark.reducer.maxSizeInFlight" -> Seq(
      AlternateConfig("spark.reducer.maxMbInFlight", "1.4")),
    "spark.kryoserializer.buffer" -> Seq(AlternateConfig("spark.kryoserializer.buffer.mb", "1.4",
          translation = s => s"${(s.toDouble * 1000).toInt}k")),
    "spark.yarn.jars" -> Seq(
      AlternateConfig("spark.yarn.jar", "2.0"))
    )
    val x = 1
}
<<< SKIP spark comment explodes matrix
{
  test("add") {
    val blocks: Seq[((Int, Int), Matrix)] = Seq(
      ((0, 0), new DenseMatrix(2, 2, Array(1.0, 0.0, 0.0, 2.0))),
      ((0, 1), new DenseMatrix(2, 2, Array(0.0, 1.0, 0.0, 0.0))),
      ((1, 0), new DenseMatrix(2, 2, Array(3.0, 0.0, 1.0, 1.0))),
      ((1, 1), new DenseMatrix(2, 2, Array(1.0, 2.0, 0.0, 1.0))),

      ((2, 0), new DenseMatrix(1, 2, Array(1.0, 0.0))), // This comment will make scalafmt go crazy
      ((2, 1), new DenseMatrix(1, 2, Array(1.0, 5.0))))
  }
}
>>>
{
  test("add") {
    val blocks: Seq[((Int, Int), Matrix)] = Seq(
      ((0, 0), new DenseMatrix(2, 2, Array(1.0, 0.0, 0.0, 2.0))),
      ((0, 1), new DenseMatrix(2, 2, Array(0.0, 1.0, 0.0, 0.0))),
      ((1, 0), new DenseMatrix(2, 2, Array(3.0, 0.0, 1.0, 1.0))),
      ((1, 1), new DenseMatrix(2, 2, Array(1.0, 2.0, 0.0, 1.0))),

      ((2, 0), new DenseMatrix(1, 2, Array(1.0, 0.0))), // This comment will make scalafmt go crazy
      ((2, 1), new DenseMatrix(1, 2, Array(1.0, 5.0))))
  }
}
<<< resolution copier
class ResolutionCopier(x: Int) {

  def visitClassDeclaration(node: ClassDeclaration): Boolean = {
    val toNode = this._toNode.asInstanceOf[ClassDeclaration];
    javaBooleanAnd(
        javaBooleanAnd(
            javaBooleanAnd(
                javaBooleanAnd(javaBooleanAnd(javaBooleanAnd(
                        javaBooleanAnd(javaBooleanAnd(
                            javaBooleanAnd(javaBooleanAnd(javaBooleanAnd(
                                    _isEqualNodes(node.documentationComment,
                                        toNode.documentationComment),
                                    _isEqualNodeLists(
                                        node.metadata, toNode.metadata)),
                                _isEqualTokens(node.abstractKeyword,
                                    toNode.abstractKeyword)), _isEqualTokens(
                                node.classKeyword, toNode.classKeyword)),
                            _isEqualNodes(
                                node.name, toNode.name)), _isEqualNodes(
                            node.typeParameters, toNode.typeParameters)),
                        _isEqualNodes(
                            node.extendsClause, toNode.extendsClause)),
                    _isEqualNodes(
                        node.withClause, toNode.withClause)), _isEqualNodes(
                    node.implementsClause, toNode.implementsClause)),
                _isEqualTokens(node.leftBracket, toNode.leftBracket)),
            _isEqualNodeLists(
                node.members,
                toNode.members)),
        _isEqualTokens(
            node.rightBracket,
            toNode.rightBracket));
  }
}
>>>
class ResolutionCopier(x: Int) {

  def visitClassDeclaration(node: ClassDeclaration): Boolean = {
    val toNode = this._toNode.asInstanceOf[ClassDeclaration];
    javaBooleanAnd(
        javaBooleanAnd(
            javaBooleanAnd(
                javaBooleanAnd(
                    javaBooleanAnd(
                        javaBooleanAnd(
                            javaBooleanAnd(
                                javaBooleanAnd(
                                    javaBooleanAnd(
                                        javaBooleanAnd(
                                            javaBooleanAnd(
                                                _isEqualNodes(
                                                    node.documentationComment,
                                                    toNode.documentationComment),
                                                _isEqualNodeLists(
                                                    node.metadata,
                                                    toNode.metadata)),
                                            _isEqualTokens(
                                                node.abstractKeyword,
                                                toNode.abstractKeyword)),
                                        _isEqualTokens(node.classKeyword,
                                                       toNode.classKeyword)),
                                    _isEqualNodes(node.name, toNode.name)),
                                _isEqualNodes(node.typeParameters,
                                              toNode.typeParameters)),
                            _isEqualNodes(node.extendsClause,
                                          toNode.extendsClause)),
                        _isEqualNodes(node.withClause, toNode.withClause)),
                    _isEqualNodes(node.implementsClause,
                                  toNode.implementsClause)),
                _isEqualTokens(node.leftBracket, toNode.leftBracket)),
            _isEqualNodeLists(node.members, toNode.members)),
        _isEqualTokens(node.rightBracket, toNode.rightBracket));
  }
}
<<< single arg breaking #160
   implicit class IterableW[+A](it: JSIterable[A]) {
     def iterator(): Iterator[A] =
      toIterator(it
            .asInstanceOf[IteratorMethodAccess]
            .bracketCall[JSIterator[A]](iteratorSymbol)())
   }
>>>
implicit class IterableW[+A](it: JSIterable[A]) {
  def iterator(): Iterator[A] =
    toIterator(
        it.asInstanceOf[IteratorMethodAccess]
          .bracketCall[JSIterator[A]](iteratorSymbol)())
}
<<< => {, #224
        foo.fold(
            err =>
              {
                logger.warn(s"Malformed request: $err\n${req.body}")
                BadRequest(jsonError(JsError toJson err)).fuccess
            },
            data => data)
>>>
foo.fold(err => {
  logger.warn(s"Malformed request: $err\n${req.body}")
  BadRequest(jsonError(JsError toJson err)).fuccess
}, data => data)
<<< SKIP indent cats
    XorT(F.flatMap(fea.value) {
      case Xor.Left(e) => f(e).value
      case r @ Xor.Right(_) => F.pure(r)
    })
>>>
+    XorT(
+      F.flatMap(fea.value) {
+    case Xor.Left(e) => f(e).value
+    case r @ Xor.Right(_) => F.pure(r)
+  })
<<< quirk in 0.2.4-RC1, #233
{{{{{
          compileInputs in (It, compile) <<= (compileInputs in (It, compile)) dependsOn
          }}}}}
>>>
{
  {
    {
      {
        {
          compileInputs in (It, compile) <<= (compileInputs in (It, compile)) dependsOn
        }
      }
    }
  }
}
<<< SKIP freqItems
{
def singlePassFreqItems( ): DataFrame = {

    val freqItems = df.select(cols.map(Column(_)) : _*).rdd.aggregate(countMaps)(
      seqOp = (counts, row) => {
        var i = 0
        while (i < numCols) {
          val key = row.get(i)
          thisMap.add(key, 1L)
          i += 1
        }
        counts
      },
      combOp = (baseCounts, counts) => {
        var i = 0
        while (i < numCols) {
          baseCounts(i).merge(counts(i))
          i += 1
        }
        baseCounts
      }
    )
}
}
>>>
x
Defn
  .Object(Nil,
          Term.Name("State"),
          Template(Nil,
                   Seq(Ctor.Ref.Name("ScalaFmtLogger")),
                   Term.Param(Nil, Name.Anonymous(), None, None),
                   Some(
                       Seq(
                           Defn.Val(Nil,
                                    Seq(Pat.Var.Term(Term.Name("start"))),
                                    None,
                                    Term
                                      .Apply(Term.Name("State"),
                                             Seq(Lit(0),
                                                 Term.Name("identity"),
                                                 Term.ApplyType(
                                                     Term.Select(
                                                         Term.Name("Vector"),
                                                         Term.Name("empty")),
                                                     Seq(Type.Name("Split"))),
                                                 Term.ApplyType(
                                                     Term.Select(
                                                         Term.Name("Vector"),
                                                         Term.Name("empty")),
                                                     Seq(Type.Name("State"))),
                                                 Lit(0),
                                                 Term.ApplyType(
                                                     Term.Select(
                                                         Term.Name("Vector"),
                                                         Term.Name("empty")),
                                                     Seq(Type.Apply(
                                                             Type.Name(
                                                                 "Indent"),
                                                             Seq(Type.Name(
                                                                     "Num"))))),
                                                 Lit(0)))),
                           Defn.Def(
                               Nil,
                               Term.Name("reconstructPath"),
                               Nil,
                               Seq(Seq(Term.Param(
                                           Nil,
                                           Term.Name("toks"),
                                           Some(Type.Apply(Type.Name("Array"),
                                                           Seq(Type.Name(
                                                                   "FormatToken")))),
                                           None),
                                       Term.Param(
                                           Nil,
                                           Term.Name("splits"),
                                           Some(Type.Apply(Type.Name("Vector"),
                                                           Seq(Type.Name(
                                                                   "Split")))),
                                           None),
                                       Term.Param(
                                           Nil,
                                           Term.Name("style"),
                                           Some(Type.Name("ScalaStyle")),
                                           None),
                                       Term
                                         .Param(Nil,
                                                Term.Name("debug"),
                                                Some(Type.Name("Boolean")),
                                                Some(Lit(false))))),
                               Some(Type.Apply(
                                       Type.Name("Seq"),
                                       Seq(Type.Tuple(Seq(Type.Name("FormatToken"), Type.Name("String")))))), Term.Block(Seq(Defn.Var(Nil, Seq(Pat.Var.Term(Term.Name("state"))), None, Some(Term.Select(Term.Name("State"), Term.Name("start")))), Defn.Val(Nil, Seq(Pat.Var.Term(Term.Name("result"))), None, Term.Apply(Term.Select(Term.Apply(Term.Select(Term.Name("toks"), Term.Name("zip")), Seq(Term.Name("splits"))), Term.Name("map")), Seq(Term.PartialFunction(Seq(Case(Pat.Tuple(Seq(Pat.Var.Term(Term.Name("tok")), Pat.Var.Term(Term.Name("split")))), None, Term.Block(Seq(Term.If(Term.Name("debug"), Term.Block(Seq(Defn.Val(Nil, Seq(Pat.Var.Term(Term.Name("left"))), None, Term.Apply(Term.Name("small"), Seq(Term.Select(Term.Name("tok"), Term.Name("left"))))), Term.Apply(Term.Select(Term.Name("logger"), Term.Name("debug")), Seq(Term.Interpolate(Term.Name("f"), Seq(Lit(""), Lit("%-10s "), Lit("")), Seq(Term.Name("left"), Term.Name("split"))))))), Lit()), Term.Assign(Term.Name("state"), Term.Apply(Term.Select(Term.Name("state"), Term.Name("next")), Seq(Term.Name("style"), Term.Name("split"), Term.Name("tok")))), Defn.Val(Nil, Seq(Pat.Var.Term(Term.Name("whitespace"))), None, Term.Match(Term.Select(Term.Name("split"), Term.Name("modification")), Seq(Case(Term.Name("Space"), None, Lit(" ")), Case(Pat.Typed(Pat.Var.Term(Term.Name("nl")), Type.Name("NewlineT")), None, Term.Block(Seq(Defn.Val(Nil, Seq(Pat.Var.Term(Term.Name("newline"))), None, Term.If(Term.Select(Term.Name("nl"), Term.Name("isDouble")), Lit("\n\n"), Lit("\n"))), Defn.Val(Nil, Seq(Pat.Var.Term(Term.Name("indentation"))), None, Term.If(Term.Select(Term.Name("nl"), Term.Name("noIndent")), Lit(""), Term.ApplyInfix(Lit(" "), Term.Name("*"), Nil, Seq(Term.Select(Term.Name("state"), Term.Name("indentation")))))), Term.ApplyInfix(Term.Name("newline"), Term.Name("+"), Nil, Seq(Term.Name("indentation")))))), Case(Pat.Extract(Term.Name("Provided"), Nil, Seq(Pat.Var.Term(Term.Name("literal")))), None, Term.Name("literal")), Case(Term.Name("NoSplit"), None, Lit(""))))), Term.ApplyInfix(Term.Name("tok"), Term.Name("->"), Nil, Seq(Term.Name("whitespace"))))))))))), Term.If(Term.Name("debug"), Term.Apply(Term.Select(Term.Name("logger"), Term.Name("debug")), Seq(Term.Interpolate(Term.Name("s"), Seq(Lit("Total cost: "), Lit("")), Seq(Term.Select(Term.Name("state"), Term.Name("cost")))))), Lit()), Term.Name("result"))))))))
<<< dequeue on Case.body, prevent state explosion
        Seq(
            Split(Space, 0),
            Split(Newline, 1).withPolicy(Policy({
              // Force template to be multiline.
              case d @ Decision(FormatToken(open: `{`, right, _), splits)
                  if !right.isInstanceOf[`}`] && // corner case, body is {}
                  childOf(template, owners(open)) =>
                d.copy(splits = splits.filter(_.modification.isNewline))
            }, expire.end))
        )
>>>
Seq(
    Split(Space, 0),
    Split(Newline, 1).withPolicy(Policy({
      // Force template to be multiline.
      case d @ Decision(FormatToken(open: `{`, right, _), splits)
          if !right.isInstanceOf[`}`] && // corner case, body is {}
            childOf(template, owners(open)) =>
        d.copy(splits = splits.filter(_.modification.isNewline))
    }, expire.end))
)
<<< #310
CreditCard(customerId = customerId,
               gatewayCustomerId = sCust.getId,
               gatewayCardId = card.getId,
               holderName = p.holderName,
               lastFour = p.lastFour,
               expMonth = p.expMonth,
               expYear = p.expYear,
               isDefault = p.isDefault,
               address1Check = card.getAddressLine1Check.some,
               zipCheck = card.getAddressZipCheck.some,
               regionId = a.regionId,
               addressName = a.name,
               address1 = a.address1,
               address2 = a.address2,
               city = a.city,
               zip = a.zip,
               brand = card.getBrand)
>>>
CreditCard(customerId = customerId,
           gatewayCustomerId = sCust.getId,
           gatewayCardId = card.getId,
           holderName = p.holderName,
           lastFour = p.lastFour,
           expMonth = p.expMonth,
           expYear = p.expYear,
           isDefault = p.isDefault,
           address1Check = card.getAddressLine1Check.some,
           zipCheck = card.getAddressZipCheck.some,
           regionId = a.regionId,
           addressName = a.name,
           address1 = a.address1,
           address2 = a.address2,
           city = a.city,
           zip = a.zip,
           brand = card.getBrand)
<<< #318
foo(
    new Bar {
      def stuff = 42
    })
>>>
foo(new Bar {
  def stuff = 42
})
<<< wat #318
Ok(
      Json.obj("api" -> Json.obj("current" -> api.currentVersion,
                                 "olds" -> api.oldVersions.map { old =>
                           Json.obj("version" -> old.version,
                                    "deprecatedAt" -> old.deprecatedAt,
                                    "unsupportedAt" -> old.unsupportedAt)
                         }))) as JSON
>>>
Ok(
    Json.obj("api" -> Json.obj("current" -> api.currentVersion,
                               "olds" -> api.oldVersions.map { old =>
                                 Json.obj("version" -> old.version,
                                          "deprecatedAt" -> old.deprecatedAt,
                                          "unsupportedAt" -> old.unsupportedAt)
                               }))) as JSON
<<< router explosion
        Seq(
            Split(modification,
                  0,
                  policy = singleLine(6),
                  ignoreIf = !fitsOnOneLine)
              .withOptimalToken(expirationToken)
              .withIndent(indent, close, Left),
            Split(newlineModification,
                  (1 + nestedPenalty + lhsPenalty) * bracketMultiplier,
                  policy = singleLine(5),
                  ignoreIf = !fitsOnOneLine || isTuple)
              .withOptimalToken(expirationToken)
              .withIndent(indent, close, Left),
            // TODO(olafur) singleline per argument!
            Split(modification,
                  (2 + lhsPenalty) * bracketMultiplier,
                  policy = oneArgOneLine,
                  ignoreIf = singleArgument || tooManyArguments)
              .withOptimalToken(expirationToken)
              .withIndent(StateColumn, close, Right),
            Split(Newline,
                  (3 + nestedPenalty + lhsPenalty) * bracketMultiplier,
                  policy = oneArgOneLine,
                  ignoreIf = singleArgument || isTuple)
              .withOptimalToken(expirationToken)
              .withIndent(indent, close, Left)
        )
>>>
Seq(
    Split(modification, 0, policy = singleLine(6), ignoreIf = !fitsOnOneLine)
      .withOptimalToken(expirationToken)
      .withIndent(indent, close, Left),
    Split(newlineModification,
          (1 + nestedPenalty + lhsPenalty) * bracketMultiplier,
          policy = singleLine(5),
          ignoreIf = !fitsOnOneLine || isTuple)
      .withOptimalToken(expirationToken)
      .withIndent(indent, close, Left),
    // TODO(olafur) singleline per argument!
    Split(modification,
          (2 + lhsPenalty) * bracketMultiplier,
          policy = oneArgOneLine,
          ignoreIf = singleArgument || tooManyArguments)
      .withOptimalToken(expirationToken)
      .withIndent(StateColumn, close, Right),
    Split(Newline,
          (3 + nestedPenalty + lhsPenalty) * bracketMultiplier,
          policy = oneArgOneLine,
          ignoreIf = singleArgument || isTuple)
      .withOptimalToken(expirationToken)
      .withIndent(indent, close, Left)
)
<<< qualified super #275
   def fillInStackTrace(): Throwable =
    super[Error].fillInStackTrace()
>>>
def fillInStackTrace(): Throwable =
  super[Error].fillInStackTrace()
<<< #263
{
    val safeHasOwnProperty = Dynamic.global.Object.prototype.hasOwnProperty
        .asInstanceOf[ThisFunction1[Dictionary[_], String, Boolean]]
        }
>>>
{
  val safeHasOwnProperty = Dynamic.global.Object.prototype.hasOwnProperty
    .asInstanceOf[ThisFunction1[Dictionary[_], String, Boolean]]
}
<<< weird 0.2.9 fix
{{
    handlefiles(files, cache, logfun("formatting %s %s ..."), files =>
          files.par.foreach(handlefile(writeformatted)))
}}
>>>
{
  {
    handlefiles(files,
                cache,
                logfun("formatting %s %s ..."),
                files => files.par.foreach(handlefile(writeformatted)))
  }
}
<<< #323
def startSharding(system: ActorSystem, mediator: ActorRef, shardCount: Int): Unit = ClusterSharding(system).start(
  className[Flow],
  props(mediator),
  ClusterShardingSettings(system),
  { case (name: String, payload) => (name, payload) },
  { case (name: String, _) => (name.hashCode % shardCount).toString }
)
>>>
def startSharding(system: ActorSystem,
                  mediator: ActorRef,
                  shardCount: Int): Unit = ClusterSharding(system).start(
    className[Flow],
    props(mediator),
    ClusterShardingSettings(system),
    { case (name: String, payload) => (name, payload) },
    { case (name: String, _) => (name.hashCode % shardCount).toString }
)
<<< spray shit
{{{
      get {
        respondWithMediaType(MediaTypes.`application/json`) {
          complete {
            Map("plugins" -> Map(
                    "outputblockers" -> pluginContext.outputBlockers.map {
                  case (n, p) =>
                    n -> Map(
                        "name" -> p.pluginName,
                        "description" -> p.pluginDescription,
                        "class" -> p.getClass.getName,
                        "params" -> pluginContext.pluginParams(p.pluginName))
                },
                    "outputsniffers" -> pluginContext.outputSniffers.map {
                  case (n, p) =>
                    n -> Map(
                        "name" -> p.pluginName,
                        "description" -> p.pluginDescription,
                        "class" -> p.getClass.getName,
                        "params" -> pluginContext.pluginParams(p.pluginName))
                }
                ))
          }
        }
      }
}}}
>>>
{
  {
    {
      get {
        respondWithMediaType(MediaTypes.`application/json`) {
          complete {
            Map(
                "plugins" -> Map(
                    "outputblockers" -> pluginContext.outputBlockers.map {
                      case (n, p) =>
                        n -> Map("name" -> p.pluginName,
                                 "description" -> p.pluginDescription,
                                 "class" -> p.getClass.getName,
                                 "params" -> pluginContext.pluginParams(
                                     p.pluginName))
                    },
                    "outputsniffers" -> pluginContext.outputSniffers.map {
                      case (n, p) =>
                        n -> Map("name" -> p.pluginName,
                                 "description" -> p.pluginDescription,
                                 "class" -> p.getClass.getName,
                                 "params" -> pluginContext.pluginParams(
                                     p.pluginName))
                    }
                ))
          }
        }
      }
    }
  }
}
<<< SKIP fix with in template
{{
      val replier = system.actorOf(Props(new IntReplierActor(10)
      with EvenHalverInterceptor with OddDoublerInterceptor {
        override def unhandled(message: Any) = probeRef ! message
      }))
}}
>>>
x
