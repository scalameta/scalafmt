80 columns                                                                     |
<<< no indent multiline strings without margin
val x = """Formatter changed AST
                |=====================
                |$diff
              """
>>>
val x = """Formatter changed AST
                |=====================
                |$diff
              """
<<< column limit
val x = """Short line
  |Long line aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
              """
>>>
val x = """Short line
  |Long line aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
              """
<<< column limit 2
val x =
  """Short line
  |Long line aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
              """
>>>
val x =
  """Short line
  |Long line aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
              """
<<< Single line #285
object Foo{
  assert( keywordTokens.length % 2 == 0,
         s"""Only can `--`.
            |Invalid number of tokens: ${keywordTokens.length}""".stripMargin )
}
>>>
object Foo {
  assert(keywordTokens.length % 2 == 0,
         s"""Only can `--`.
            |Invalid number of tokens: ${keywordTokens.length}""".stripMargin)
}
<<< @285 2
object Foo {
  bar(
    """
    Hello
    """,
    "world" )
}
>>>
object Foo {
  bar("""
    Hello
    """,
      "world")
}
<<< 0.2.9 quirks
{{
    def render(wrapped: Boolean): Tree =
      if (wrapped) q"""
        val start = cursor
        try ${renderInner(wrapped)}
        catch { case e: akka.parboiled2.Parser#TracingBubbleException ⇒ $bubbleUp }"""
      else renderInner(wrapped)
}}
>>>
{
  {
    def render(wrapped: Boolean): Tree =
      if (wrapped) q"""
        val start = cursor
        try ${renderInner(wrapped)}
        catch { case e: akka.parboiled2.Parser#TracingBubbleException ⇒ $bubbleUp }"""
      else renderInner(wrapped)
  }
}
<<< #1640 class with multiline parent ctor
class A(a: Int, b: String) extends B("""
foo""") with C
>>>
class A(a: Int, b: String)
    extends B("""
foo""")
    with C
<<< #1640 select chain with multiline arg
object a {
  foo.B("""
        |foo""").bar
}
>>>
object a {
  foo
    .B("""
        |foo""")
    .bar
}
<<< #1640 single select with multiline arg
object a {
  foo.B("""
        |foo""")
}
>>>
object a {
  foo.B("""
        |foo""")
}
<<< #1640 yield with multiline arg
object a {
  for (n ← 1 to 30) yield """
    test-dispatcher-%s {
      type = "akka.actor.dispatch.DispatcherModelSpec$MessageDispatcherInterceptorConfigurator"
    }""".format(n).mkString
}
>>>
object a {
  for (n ← 1 to 30)
    yield """
    test-dispatcher-%s {
      type = "akka.actor.dispatch.DispatcherModelSpec$MessageDispatcherInterceptorConfigurator"
    }""".format(n).mkString
}
<<< #1505
newlines.avoidForSimpleOverflow = [toolong]
===
object a {
  foo_bar_baz("Qui et et consectetur atque. Ex blanditiis eius omnis id. Modi est quibusdam error inventore facere vero id. Inventore in sequi praesentium consequuntur ut. Ex mollitia recusandae.") {
    println("")
  }
}
>>>
object a {
  foo_bar_baz("Qui et et consectetur atque. Ex blanditiis eius omnis id. Modi est quibusdam error inventore facere vero id. Inventore in sequi praesentium consequuntur ut. Ex mollitia recusandae.") {
    println("")
  }
}
<<< #1505 1
newlines.avoidForSimpleOverflow = [toolong]
===
object a {
  system.log.warning(
    "Replicator points to dead letters: Make sure the cluster node is not terminated and has the proper role!")
}
>>>
object a {
  system.log.warning("Replicator points to dead letters: Make sure the cluster node is not terminated and has the proper role!")
}
<<< #1505 2
newlines.avoidForSimpleOverflow = [toolong]
===
object a {
  intercept[TestException] {
    val ct =
      Thread.currentThread() // Ensure that the thunk is executed in the tests thread
  }
}
>>>
object a {
  intercept[TestException] {
    val ct =
      Thread.currentThread() // Ensure that the thunk is executed in the tests thread
  }
}
<<< #1505 3
newlines.avoidForSimpleOverflow = [toolong]
===
object a {
  intercept[TestException] {
    val ct = Thread.currentThread() // Ensure that the thunk is executed in the tests thread
  }
}
>>>
object a {
  intercept[TestException] {
    val ct = Thread.currentThread() // Ensure that the thunk is executed in the tests thread
  }
}
<<< #1505 4
continuationIndent.callSite = 2
newlines.avoidForSimpleOverflow = [toolong]
===
object RemoteRestartedQuarantinedSpec extends MultiNodeConfig {
  commonConfig(debugConfig(on = false).withFallback(ConfigFactory.parseString("""
       // Important, otherwise it is very racy to get a non-writing endpoint: the only way to do it if the two nodes
       // associate to each other at the same time. Setting this will ensure that the right scenario happens.
                               """)))
}
>>>
object RemoteRestartedQuarantinedSpec extends MultiNodeConfig {
  commonConfig(debugConfig(on = false).withFallback(ConfigFactory.parseString("""
       // Important, otherwise it is very racy to get a non-writing endpoint: the only way to do it if the two nodes
       // associate to each other at the same time. Setting this will ensure that the right scenario happens.
                               """)))
}
<<< #1505 5
maxColumn = 60
newlines.avoidForSimpleOverflow = [toolong]
===
object a {
  x.responsePromise.failure(new BufferOverflowException(
    s"Exceeded configured max-open-requests value of [${inputBuffer.capacity}]"))
}
>>>
object a {
  x.responsePromise.failure(new BufferOverflowException(
      s"Exceeded configured max-open-requests value of [${inputBuffer.capacity}]"))
}
<<< #1505 6
maxColumn = 60
newlines.avoidForSimpleOverflow = [toolong]
===
object a {
  (
    StatusCodes.Forbidden,
    Map(
      "message" -> s"${event.event} events are not allowed ${c.d}"))
}
>>>
object a {
  (StatusCodes.Forbidden,
   Map("message" -> s"${event.event} events are not allowed ${c.d}"))
}
<<< #1505 7
maxColumn = 40
newlines.avoidForSimpleOverflow = [toolong]
===
object a {
  (
    StatusCodes.Forbidden,
    Map(s"${event.event} events are not allowed ${c.d}"))
}
>>>
object a {
  (StatusCodes.Forbidden,
   Map(s"${event.event} events are not allowed ${c.d}"))
}
<<< #1505 8
newlines.avoidForSimpleOverflow = [toolong]
===
object a {
  b match {
    case _ =>
      Future.failed[Any](new IllegalArgumentException(
        s"""Unsupported recipient ActorRef type, question not sent to [$actorSel]. Sender[$sender] sent the message of type "${message.getClass.getName}"."""))
  }
}
>>>
object a {
  b match {
    case _ =>
      Future.failed[Any](new IllegalArgumentException(
          s"""Unsupported recipient ActorRef type, question not sent to [$actorSel]. Sender[$sender] sent the message of type "${message.getClass.getName}"."""))
  }
}
<<< #1505 9
newlines.avoidForSimpleOverflow = [toolong]
===
object a {
  def b = {
    try {
      if (false) {}
      else {
         info("Uber JAR disabled, but current working directory does not look " +
           s"like an engine project directory. Please delete lib/${core.getName} manually.")
      }
    }
  }
}
>>>
object a {
  def b = {
    try {
      if (false) {} else {
        info("Uber JAR disabled, but current working directory does not look " +
          s"like an engine project directory. Please delete lib/${core.getName} manually.")
      }
    }
  }
}
<<< #2026 borrow example only; don't allow multiple delay
newlines.avoidForSimpleOverflow = [ tooLong ]
===
object X {
  def f(s: Any): X.type = this

  def run: Unit = {

    X
      .f("  sldkfjdslkf sdlkfj dslkfjds flkdsjf lsdkjf dslkfjds sdklfjsd sdlkjfdskj")
      .f {
        X
        .f("  sldkfjdslkf sdlkfj dslkfjds flkdsjf lsdkjf dslkfjds sdklfjsd sdlkjfdskj")
        .f("  sldkfjdslkf sdlkfj dslkfjds flkdsjf lsdkjf dslkfjds sdklfjsd sdlkjfdskj")
        .f("  sldkfjdslkf sdlkfj dslkfjds flkdsjf lsdkjf dslkfjds sdklfjsd sdlkjfdskj")
      }
      .f("  sldkfjdslkf sdlkfj dslkfjds flkdsjf lsdkjf dslkfjds sdklfjsd sdlkjfdskj")
  }
}
>>>
object X {
  def f(s: Any): X.type = this

  def run: Unit = {

    X.f("  sldkfjdslkf sdlkfj dslkfjds flkdsjf lsdkjf dslkfjds sdklfjsd sdlkjfdskj")
      .f {
        X.f("  sldkfjdslkf sdlkfj dslkfjds flkdsjf lsdkjf dslkfjds sdklfjsd sdlkjfdskj")
          .f("  sldkfjdslkf sdlkfj dslkfjds flkdsjf lsdkjf dslkfjds sdklfjsd sdlkjfdskj")
          .f("  sldkfjdslkf sdlkfj dslkfjds flkdsjf lsdkjf dslkfjds sdklfjsd sdlkjfdskj")
      }
      .f("  sldkfjdslkf sdlkfj dslkfjds flkdsjf lsdkjf dslkfjds sdklfjsd sdlkjfdskj")
  }
}
