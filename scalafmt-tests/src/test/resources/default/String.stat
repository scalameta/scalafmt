80 columns                                                                     |
<<< no indent multiline strings without margin
val x = """Formatter changed AST
                |=====================
                |$diff
              """
>>>
val x = """Formatter changed AST
                |=====================
                |$diff
              """
<<< column limit
val x = """Short line
  |Long line aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
              """
>>>
val x =
  """Short line
  |Long line aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
              """
<<< column limit 2
val x =
  """Short line
  |Long line aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
              """
>>>
val x =
  """Short line
  |Long line aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
              """
<<< Single line #285
object Foo{
  assert( keywordTokens.length % 2 == 0,
         s"""Only can `--`.
            |Invalid number of tokens: ${keywordTokens.length}""".stripMargin )
}
>>>
object Foo {
  assert(keywordTokens.length % 2 == 0,
         s"""Only can `--`.
            |Invalid number of tokens: ${keywordTokens.length}""".stripMargin)
}
<<< @285 2
object Foo {
  bar(
    """
    Hello
    """,
    "world" )
}
>>>
object Foo {
  bar("""
    Hello
    """,
      "world")
}
<<< 0.2.9 quirks
{{
    def render(wrapped: Boolean): Tree =
      if (wrapped) q"""
        val start = cursor
        try ${renderInner(wrapped)}
        catch { case e: akka.parboiled2.Parser#TracingBubbleException ⇒ $bubbleUp }"""
      else renderInner(wrapped)
}}
>>>
{
  {
    def render(wrapped: Boolean): Tree =
      if (wrapped) q"""
        val start = cursor
        try ${renderInner(wrapped)}
        catch { case e: akka.parboiled2.Parser#TracingBubbleException ⇒ $bubbleUp }"""
      else renderInner(wrapped)
  }
}
<<< #1640 class with multiline parent ctor
class A(a: Int, b: String) extends B("""
foo""") with C
>>>
class A(a: Int, b: String) extends B("""
foo""") with C
<<< #1640 select chain with multiline arg
object a {
  foo.B("""
        |foo""").bar
}
>>>
object a {
  foo.B("""
        |foo""").bar
}
<<< #1640 single select with multiline arg
object a {
  foo.B("""
        |foo""")
}
>>>
object a {
  foo.B("""
        |foo""")
}
<<< #1640 yield with multiline arg
object a {
  for (n ← 1 to 30) yield """
    test-dispatcher-%s {
      type = "akka.actor.dispatch.DispatcherModelSpec$MessageDispatcherInterceptorConfigurator"
    }""".format(n).mkString
}
>>>
object a {
  for (n ← 1 to 30)
    yield """
    test-dispatcher-%s {
      type = "akka.actor.dispatch.DispatcherModelSpec$MessageDispatcherInterceptorConfigurator"
    }""".format(n).mkString
}
