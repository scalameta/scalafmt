80 columns                                                                     |
<<< resolveLocalDef
    def withDedicatedVar: Unit = {
      def doBuildInner = {
        buildInner({ tinner =>
            tinner match {
              case _ =>
                rhsSideEfs match {
                  case _ =>  cont(PbreTransBlock(rhsSideEffects :: Nil, tinner))
                }
              }
        })
      }
    }
>>>
def withDedicatedVar: Unit = {
  def doBuildInner = {
    buildInner({ tinner =>
      tinner match {
        case _ =>
          rhsSideEfs match {
            case _ => cont(PbreTransBlock(rhsSideEffects :: Nil, tinner))
          }
      }
    })
  }
}
<<< missing 2 indent #209
{{ {
 preloads.foreach{p =>
      cache.getOrElseUpdate(p,
        futureStreams.map{r => r.streams.get(p)})
    }
    }}}
>>>
{
  {
    {
      preloads.foreach { p =>
        cache.getOrElseUpdate(p, futureStreams.map { r => r.streams.get(p) })
      }
    }
  }
}
<<< nested lambdas #195
(excty, { focus: Focus =>
      val enter = symopt.map { sym =>
        val cast = focus withOp Op.As(excty, exc.value)
        curEnv.enter(sym, cast.value)
        cast
      }.getOrElse(focus)
      val begin = enter withOp Nrt.call(Nrt.begin_catch, excwrap.value)
      val res   = genExpr(body, begin)
      val end   = res withOp Nrt.call(Nrt.end_catch)
      end withValue res.value
    })
>>>
(excty,
 { focus: Focus =>
   val enter = symopt.map { sym =>
     val cast = focus withOp Op.As(excty, exc.value)
     curEnv.enter(sym, cast.value)
     cast
   }.getOrElse(focus)
   val begin = enter withOp Nrt.call(Nrt.begin_catch, excwrap.value)
   val res = genExpr(body, begin)
   val end = res withOp Nrt.call(Nrt.end_catch)
   end withValue res.value
 })
<<< SKIP intellij bug
class ScProjectionType private () {
  def isAliasTypeInner = {
      x match {
        case ta: ScTypeAlias => //higher kind case
            typesCallSubstitutor(
            ta.typeParameters.map(tp => (tp.name, ScalaPsiUtil.getPsiElementId(tp))),
            ta.typeParameters.map(tp => {
              args = ScExistentialArgument()
              ScTypeVariable(name)
            }))
      }
    }
  }

>>>
class ScProjectionType private () {
  def isAliasTypeInner = {
    x match {
      case ta: ScTypeAlias => //higher kind case
        typesCallSubstitutor(
            ta.typeParameters.map(tp =>
                  (tp.name, ScalaPsiUtil.getPsiElementId(tp))),
            ta.typeParameters.map(tp => {
              args += new ScExistentialArgument()
              ScTypeVariable(name)
            }))
    }
  }
}
<<< SKIP #357 single line lambda
def foo(x: Int) = x match {
    case 1 => (y: Int) => y
    case _ => (y: Int) => -y
  }
>>>
def foo(x: Int) = x match {
  case 1 => (y: Int) => y
  case _ => (y: Int) => -y
}
<<< #357 break lambda
def foo(x: Int) = x match {
    case 1 =>
    (y: Int) => y
    case _ =>
    (y: Int) => -y
  }
>>>
def foo(x: Int) = x match {
  case 1 =>
    (y: Int) => y
  case _ =>
    (y: Int) => -y
}
<<< SKIP y u break line? Answer: Because optimizer.recurseOnBlocks
{
  def foo =
    T({ a =>
      valueSort.map {
        vs =>
          vs match {
            case ordser: OrderedSerialization[V1] =>
              Grouped.getBoxFnAndOrder[V1](ordser, fd)
              val valueF = new Fields("value")
              val ts2 = tupleSetter
                .asInstanceOf[TupleSetter[(K, Boxed[V1])]]
                .contraMap { kv1: (K, V1) =>
                  (kv1._1, boxfn(kv1._2))
                }
              (Some(valueF), ts2)
          }
      }
    })
}
>>>
{
}
<<< migrate2hocon
{{
opt[File]("migrate2hocon")
      .action((file, c, d, e, f, g) =>
          c.copy(migrate =
            Some(AbsoluteFile.fromFile(file, c.common.workingDirectory))))
        .text("""migrate .scalafmt CLI style configuration to hocon style configuration in .scalafmt.conf""")
}}
>>>
{
  {
    opt[File]("migrate2hocon")
      .action((file, c, d, e, f, g) =>
        c.copy(migrate =
          Some(AbsoluteFile.fromFile(file, c.common.workingDirectory))))
      .text("""migrate .scalafmt CLI style configuration to hocon style configuration in .scalafmt.conf""")
  }
}
<<< Don't config style me
pairList.map(pair => {
  val a = pair._1._1.toInt
  val b = pair._1._2.toInt
  val delta = pair._2
  val b_adj = g.edges.filter(e => e.dstId == b).map(x => x.srcId)
  val a_adj = g.edges.filter(e => e.dstId == a).map(x => x.srcId)

  val scorePairs = a_adj.cartesian(b_adj)
  scorePairs
    .filter(pair => pair._1 != pair._2) // a
    .map(pair => (pair, delta))
})
>>>
pairList.map(pair => {
  val a = pair._1._1.toInt
  val b = pair._1._2.toInt
  val delta = pair._2
  val b_adj = g.edges.filter(e => e.dstId == b).map(x => x.srcId)
  val a_adj = g.edges.filter(e => e.dstId == a).map(x => x.srcId)

  val scorePairs = a_adj.cartesian(b_adj)
  scorePairs
    .filter(pair => pair._1 != pair._2) // a
    .map(pair => (pair, delta))
})
<<< lambda break
val add = (x: Int) => x + 2
>>>
val add = (x: Int) => x + 2
<<< #965
preset = defaultWithAlign
maxColumn = 120
newlines.sometimesBeforeColonInMethodReturnType = false
align.openParenCallSite = false
rewrite.rules = [RedundantBraces, RedundantParens]
===
def test(dataFrame: DataFrame) = {
    val zeroAccumulator = Array.fill(1)(((0.0, 0)))

    dataFrame.rdd.aggregate(zeroAccumulator)({(acc, row) => acc.zip(row.toSeq).map{ case (x, y) => {
      if(true) (1, 2)
      else (x._1 + 2, x._2 + 1)
    }}},
      {(acc1, acc2) => acc1.zip(acc2).map{ case (x, y) => (x._1 + y._1, x._2 + y._2)}})
      .map{case (sum, count) => sum}
  }
>>>
def test(dataFrame: DataFrame) = {
  val zeroAccumulator = Array.fill(1)(((0.0, 0)))

  dataFrame.rdd
    .aggregate(zeroAccumulator)(
      (acc, row) =>
        acc.zip(row.toSeq).map { case (x, y) =>
          if (true) (1, 2)
          else (x._1 + 2, x._2 + 1)
        },
      (acc1, acc2) => acc1.zip(acc2).map { case (x, y) => (x._1 + y._1, x._2 + y._2) }
    )
    .map { case (sum, count) => sum }
}
<<< one-line lambda: make sure infix is handled correctly
object a {
val parser = new scopt.OptionParser[ServerConfig]("CreateServer") {
      opt[String]("batch") action { (x, c) =>
        c.copy(batch = x)
      } text ("Batch label of the deployment.")
      opt[String]("engineId") action { (x, c) =>
        c.copy(engineId = Some(x))
      } text ("Engine ID.")
  }
}
>>>
object a {
  val parser = new scopt.OptionParser[ServerConfig]("CreateServer") {
    opt[String]("batch") action { (x, c) =>
      c.copy(batch = x)
    } text ("Batch label of the deployment.")
    opt[String]("engineId") action { (x, c) =>
      c.copy(engineId = Some(x))
    } text ("Engine ID.")
  }
}
<<< one-line lambda: make sure infix is handled correctly 2
object a {
cmd("help").action {
 (_, c) => c.copy(commands = c.commands :+ "help")
  } children (
         arg[String]("<command>") optional ()
          action { (x, c) =>
            c.copy(commands = c.commands :+ x)
          }
       )
}
>>>
object a {
  cmd("help").action { (_, c) =>
    c.copy(commands = c.commands :+ "help")
  } children (
      arg[String]("<command>") optional ()
        action { (x, c) =>
          c.copy(commands = c.commands :+ x)
        }
  )
}
<<< one-line lambda: make sure multiline string is handled correctly
object a {
val b = c { d => """The quick brown fox jumps over the lazy dog
     | The quick brown fox jumps over the lazy dog
     | The quick brown fox jumps over the lazy dog
     |""".stripMargin }
}
>>>
object a {
  val b = c { d =>
    """The quick brown fox jumps over the lazy dog
     | The quick brown fox jumps over the lazy dog
     | The quick brown fox jumps over the lazy dog
     |""".stripMargin
  }
}
<<< one-line lambda: make sure multiline string is handled correctly 2
assumeStandardLibraryStripMargin = true
===
object a {
val b = c { d => """The quick brown fox jumps over the lazy dog
      | The quick brown fox jumps over the lazy dog
      | The quick brown fox jumps over the lazy dog
      |""".stripMargin }
}
>>>
object a {
  val b = c { d =>
    """The quick brown fox jumps over the lazy dog
      | The quick brown fox jumps over the lazy dog
      | The quick brown fox jumps over the lazy dog
      |""".stripMargin
  }
}
<<< #1714 1
testAsync("Resource.make is equivalent to a partially applied bracket") { implicit ec =>
    check { (acquire: IO[String], release: String => IO[Unit], f: String => IO[String]) =>
      acquire.bracket(f)(release) <-> Resource.make(acquire)(release).use(f)
    }
  }
>>>
testAsync("Resource.make is equivalent to a partially applied bracket") {
  implicit ec =>
    check {
      (acquire: IO[String],
       release: String => IO[Unit],
       f: String => IO[String]) =>
        acquire.bracket(f)(release) <-> Resource.make(acquire)(release).use(f)
    }
}
<<< #1714 2
align.preset = none
maxColumn = 120
danglingParentheses.preset = true
===
testAsync("Resource.make is equivalent to a partially applied bracket") { implicit ec =>
    check { (acquire: IO[String], release: String => IO[Unit], f: String => IO[String]) =>
      acquire.bracket(f)(release) <-> Resource.make(acquire)(release).use(f)
    }
  }
>>>
testAsync("Resource.make is equivalent to a partially applied bracket") { implicit ec =>
  check { (acquire: IO[String], release: String => IO[Unit], f: String => IO[String]) =>
    acquire.bracket(f)(release) <-> Resource.make(acquire)(release).use(f)
  }
}
<<< #1714 3
align.preset = none
maxColumn = 120
danglingParentheses.preset = true
===
testAsync("Resource.make is equivalent to a partially applied bracket") { implicit ec =>
    check { (acquire: IO[String], release: String => IO[Unit], f: String => IO[String]/* c1 */)/* c2 */=>
      /*c3*/ acquire.bracket(f)(release) <-> Resource.make(acquire)(release).use(f)
    }
  }
>>>
testAsync("Resource.make is equivalent to a partially applied bracket") { implicit ec =>
  check { (acquire: IO[String], release: String => IO[Unit], f: String => IO[String] /* c1 */ ) /* c2 */ =>
    /*c3*/
    acquire.bracket(f)(release) <-> Resource.make(acquire)(release).use(f)
  }
}
<<< #1714 4
align.preset = none
maxColumn = 120
danglingParentheses.preset = true
===
testAsync("Resource.make is equivalent to a partially applied bracket") { implicit ec =>
    check { (acquire: IO[String], release: String => IO[Unit], f: String => IO[String]/* c1 */)/* c2 */=>
      /*c3*/ { acquire.bracket(f)(release) <-> Resource.make(acquire)(release).use(f) }
    }
  }
>>>
testAsync("Resource.make is equivalent to a partially applied bracket") { implicit ec =>
  check { (acquire: IO[String], release: String => IO[Unit], f: String => IO[String] /* c1 */ ) /* c2 */ =>
    /*c3*/
    { acquire.bracket(f)(release) <-> Resource.make(acquire)(release).use(f) }
  }
}
<<< #1714 5
align.preset = none
maxColumn = 120
danglingParentheses.preset = true
===
testAsync("Resource.make is equivalent to a partially applied bracket") { implicit ec =>
    check { (acquire: IO[String], release: String => IO[Unit], f: String => IO[String]/* c1 */)/* c2 */=>
      { /*c3*/ acquire.bracket(f)(release) <-> Resource.make(acquire)(release).use(f) }
    }
  }
>>>
testAsync("Resource.make is equivalent to a partially applied bracket") { implicit ec =>
  check { (acquire: IO[String], release: String => IO[Unit], f: String => IO[String] /* c1 */ ) /* c2 */ =>
    { /*c3*/
      acquire.bracket(f)(release) <-> Resource.make(acquire)(release).use(f)
    }
  }
}
<<< #448
object Foo {
  code.collect {
    case d: Defn.Def if (d match {
      case _ => false


    }) &&
      d=>
  }
}
>>>
object Foo {
  code.collect {
    case d: Defn.Def
        if (d match {
          case _ => false

        }) &&
          d =>
  }
}
<<< #1485
preset = IntelliJ
maxColumn = 120
===
class A {
  def foo: B =
    a.b() { c =>
        val d = c.add(
          D[E](
            1, {
              case conditionNameShouldLongEnough =>
                foo1(objectNameShouldLongEnough, objectNameShouldLongEnough)
                0
              case conditionNameShouldLongEnough =>
                foo1(objectNameShouldLongEnough, objectNameShouldLongEnough)
                1
            }
          )
        )
      }
      .f("f")
}
>>>
class A {
  def foo: B =
    a.b() { c =>
      val d = c.add(
        D[E](
          1,
          {
            case conditionNameShouldLongEnough =>
              foo1(objectNameShouldLongEnough, objectNameShouldLongEnough)
              0
            case conditionNameShouldLongEnough =>
              foo1(objectNameShouldLongEnough, objectNameShouldLongEnough)
              1
          }
        )
      )
    }.f("f")
}
<<< #1969
object a {
  And("foo") { () =>
    // bar
  }
}
>>>
object a {
  And("foo") { () =>
    // bar
  }
}
