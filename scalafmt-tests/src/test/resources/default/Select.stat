80 columns                                                                     |
<<< basic
a .b .c
>>>
a.b.c
<<< longer
val logger = Logger(this .getClass)
>>>
val logger = Logger(this.getClass)
<<< Break on .
val expire = owner.body.tokens.filterNot(_.isInstanceOf[Whitespace]).lastOption.getOrElse(
            arrow)
>>>
val expire = owner.body.tokens
  .filterNot(_.isInstanceOf[Whitespace])
  .lastOption
  .getOrElse(arrow)
<<< Bind . to closing }
map {
    // foo
} .withIndent
>>>
map {
  // foo
}.withIndent
<<< Break on . 2
Split(NoSplit, 0, policy = SingleLineBlock(owner.thenp.tokens.last)).withIndent(
              StateColumn, close, Left)
>>>
Split(NoSplit, 0, policy = SingleLineBlock(owner.thenp.tokens.last))
  .withIndent(StateColumn, close, Left)
<<< Break on . 3
val expire = owner.tokens.find(_.isInstanceOf[`{`]).getOrElse(owner.tokens.last)
>>>
val expire =
  owner.tokens.find(_.isInstanceOf[`{`]).getOrElse(owner.tokens.last)
<<< state explosion
a.b.c.d.e.f.g.h.i.j.k {
 // Crazy comment =================================================================>
}
>>>
a.b.c.d.e.f.g.h.i.j.k {
  // Crazy comment =================================================================>
}
<<< state explosion 2
a.b(c).d(e).f(g).h(i).j(k) {
 // Crazy comment =================================================================>
}
>>>
a.b(c).d(e).f(g).h(i).j(k) {
  // Crazy comment =================================================================>
}
<<< Crazy comment
val lastToken = owner.body.tokens
    .filter {
        case _: Whitespace | _: Comment => false
        case _ => true
    } // edge case, if body is empty expire on arrow.
    .lastOption.getOrElse(arrow)
>>>
val lastToken = owner.body.tokens.filter {
  case _: Whitespace | _: Comment => false
  case _ => true
} // edge case, if body is empty expire on arrow.
.lastOption.getOrElse(arrow)
<<< apply infix has indent
val expireAAAAAAAAAAAAAAAAAAAAA = owner.tokens.
  find(t => t.isInstanceOf[`=`] && owners(t) == owner)
  .getOrElse(owner.tokens.last)
>>>
val expireAAAAAAAAAAAAAAAAAAAAA = owner.tokens
  .find(t => t.isInstanceOf[`=`] && owners(t) == owner)
  .getOrElse(owner.tokens.last)
<<< preserve chains 0
 a.b(1).c[T].d(f.g).e(2).k(3)
>>>
a.b(1).c[T].d(f.g).e(2).k(3)
<<< preserve chains
  val files = FilesUtil.listFiles(".")
    .filter(_.endsWith(".scala"))
    .filterNot(_.contains("/target/"))
    .filterNot(_.contains("/resources/"))
>>>
val files = FilesUtil
  .listFiles(".")
  .filter(_.endsWith(".scala"))
  .filterNot(_.contains("/target/"))
  .filterNot(_.contains("/resources/"))
<<< rhino superfluous parenthesis

  private def extractRhino(e: js.Dynamic): js.Array[String] = {
    (e.stack.asInstanceOf[js.UndefOr[String]]).getOrElse("")
      .jsReplace("""^\s+at\s+""".re("gm"), "") // remove 'at' and indentation
      .jsReplace("""^(.+?)(?: \((.+)\))?$""".re("gm"), "$2@$1")
      .jsReplace("""\r\n?""".re("gm"), "\n") // Rhino has platform-dependent EOL's
      .jsSplit("\n")
  }
>>>
private def extractRhino(e: js.Dynamic): js.Array[String] = {
  (e.stack
    .asInstanceOf[js.UndefOr[String]])
    .getOrElse("")
    .jsReplace("""^\s+at\s+""".re("gm"), "") // remove 'at' and indentation
    .jsReplace("""^(.+?)(?: \((.+)\))?$""".re("gm"), "$2@$1")
    .jsReplace("""\r\n?""".re("gm"), "\n") // Rhino has platform-dependent EOL's
    .jsSplit("\n")
}
<<< select is cheaper
      new ReflectiveDynamicAccess(classLoader).createInstanceFor[ScalaFmtLike](
          "org.scalafmt.ScalaFmt210", Seq.empty)
>>>
new ReflectiveDynamicAccess(classLoader)
  .createInstanceFor[ScalaFmtLike]("org.scalafmt.ScalaFmt210", Seq.empty)
<<< indent until closing }
abb.b(c).j {
x + 1
}
>>>
abb.b(c).j {
  x + 1
}
<<< Comment indent
lst.map { x =>
    // complicated stuff
}
>>>
lst.map { x =>
  // complicated stuff
}
<<< rightSumming chain conflict
  LookupJoin.rightSumming(TypedPipe.from(in1))
    .map {
      x =>
        x
    }
    .write(TypedTsv[(String, String, String, String)]("output2"))
>>>
LookupJoin
  .rightSumming(TypedPipe.from(in1))
  .map { x =>
    x
  }
  .write(TypedTsv[(String, String, String, String)]("output2"))
<<< scalding discardTestJob

class DiscardTestJob(args: Args) extends Job(args) {
  TextLine(args("in"))
    .map('words -> 'wsize) { word: String => word.length }
    .discard('words)
    .map('* -> 'correct) { te: TupleEntry => te.getFields.contains('words) }
    .write(Tsv(args("out")))
}
>>>
class DiscardTestJob(args: Args) extends Job(args) {
  TextLine(args("in"))
    .map('words -> 'wsize) { word: String =>
      word.length
    }
    .discard('words)
    .map('* -> 'correct) { te: TupleEntry =>
      te.getFields.contains('words)
    }
    .write(Tsv(args("out")))
}
<<< scalding typedthrowserrorsjov
  TypedPipe.from(input)
  .map { trans1 }
  .addTrap
  .addTrap
  .addTrap
  .addTrap
  .addTrap
  .addTrap2(trap2)
>>>
TypedPipe
  .from(input)
  .map { trans1 }
  .addTrap
  .addTrap
  .addTrap
  .addTrap
  .addTrap
  .addTrap2(trap2)
<<< scalding  hashjoin with inline comment
class TypedPipeJoinWithDescriptionJob {
  x.hashJoin() // this triggers an implicit that somehow pushes the line number to the next one
    .withDescription("hashJoin")
    .leftJoin(z)
    .withDescription("leftJoin")
    .values
    .write(TypedTsv[((Int, String), Option[Boolean])]("output"))
}
>>>
class TypedPipeJoinWithDescriptionJob {
  x.hashJoin() // this triggers an implicit that somehow pushes the line number to the next one
    .withDescription("hashJoin")
    .leftJoin(z)
    .withDescription("leftJoin")
    .values
    .write(TypedTsv[((Int, String), Option[Boolean])]("output"))
}
<<< chain indent expire #194
{
 (playerStore
      .updatePlayer(_: String, _: PlayerUpdate))
      .expects("123", PlayerUpdate(active = Some(true)))
      .returning(Future.value(Unit))
    (cache.delete _).expects("123")
  Await.result(service.setActive("123", active = true))
}
>>>
{
  (playerStore
    .updatePlayer(_: String, _: PlayerUpdate))
    .expects("123", PlayerUpdate(active = Some(true)))
    .returning(Future.value(Unit))
  (cache.delete _).expects("123")
  Await.result(service.setActive("123", active = true))
}
<<< indent expire
Seq(
            Split()
              .withIndent(indent, close, Left)
              .withPolicy(penalizeAllNewlines(close, 1))
          )
>>>
Seq(
    Split()
      .withIndent(indent, close, Left)
      .withPolicy(penalizeAllNewlines(close, 1))
)
<<< #197
{{{
      system.actorOf(Props[ThreadNameEcho].withDispatcher("myapp.balancing-dispatcher")) ! "what's the name?"
      }}}
>>>
{
  {
    {
      system.actorOf(
          Props[ThreadNameEcho]
            .withDispatcher("myapp.balancing-dispatcher")) ! "what's the name?"
    }
  }
}
<<< #294
object a {
SparkEnv.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
      readCachedBlock = false
      computeOrReadCheckpoint(partition, context)
    })
}
>>>
object a {
  SparkEnv.get.blockManager
    .getOrElseUpdate(blockId, storageLevel, elementClassTag, () => {
      readCachedBlock = false
      computeOrReadCheckpoint(partition, context)
    })
}
<<< #599
{{
 logger
      .elem(threp1, threp2, threp3, tax.total.value, tax.usedPersonalDiscount)
}}
>>>
{
  {
    logger.elem(threp1,
                threp2,
                threp3,
                tax.total.value,
                tax.usedPersonalDiscount)
  }
}
<<< No args #599
  keys.clear() // we need to remove the selected keys from the set, otherwise they remain selected
>>>
keys.clear() // we need to remove the selected keys from the set, otherwise they remain selected
