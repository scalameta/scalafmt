80 columns                                                                     |
<<< Break before then condition
if (between.lastOption.exists(_.isInstanceOf[`\n`])) List(Split(NoIndentNewline, 0))
else List(Split(Newline, 0))
>>>
if (between.lastOption.exists(_.isInstanceOf[`\n`]))
  List(Split(NoIndentNewline, 0))
else List(Split(Newline, 0))
<<< break by nesting depth
        if (aaaaaaaaaaaadequeOnNewStatements &&
          (depth > 0 || !isInsideNoOptZone(splitToken)) &&
          statementStarts.contains(hash(splitToken.left)) &&
          curr.splits.last.modification.isNewline ) {
          Q.dequeueAll
        }
>>>
if (aaaaaaaaaaaadequeOnNewStatements &&
    (depth > 0 || !isInsideNoOptZone(splitToken)) &&
    statementStarts.contains(hash(splitToken.left)) &&
    curr.splits.last.modification.isNewline) {
  Q.dequeueAll
}
<<< break on &&
if (packageTokensaaaaaa.contains(tok.left) &&
 !packageTokens.contains(tok.right)) true
>>>
if (packageTokensaaaaaa.contains(tok.left) &&
    !packageTokens.contains(tok.right)) true
<<< if space (
def identModification(ident: Ident): Modification =
      if (Character.isLetterOrDigit(ident.code.last)) NoSplit
      else Space
>>>
def identModification(ident: Ident): Modification =
  if (Character.isLetterOrDigit(ident.code.last)) NoSplit
  else Space
<<< thisLocalDef
{
    val newParamDefs = for { _ <- params } yield {
      ParamDef()
      ((name -> localDef), newParamDef)
    }
    val thisLocalDef =
      if (thisType == NoType) None
      else {
        Some("this" -> LocalDef(
            RefinedType(thisType, isExact = false, isNullable = false),
            false, ReplaceWithThis()))
      }
      }
>>>
{
  val newParamDefs = for { _ <- params } yield {
    ParamDef()
    ((name -> localDef), newParamDef)
  }
  val thisLocalDef =
    if (thisType == NoType) None
    else {
      Some(
          "this" -> LocalDef(
              RefinedType(thisType, isExact = false, isNullable = false),
              false,
              ReplaceWithThis()))
    }
}
<<< AST violate
object a {
def toString(): String = {
    (if (isInterface()) "is interface " else
        if (isPrimitive()) "" else "class ")+getName()
  }
  }
>>>
object a {
  def toString(): String = {
    (if (isInterface()) "is interface "
     else if (isPrimitive()) ""
     else "class ") + getName()
  }
}
<<< pruneNonOptimal bug
{{{{{{{{{
                  (if (hasFlag("-")) FormattableFlags.LEFT_JUSTIFY else 0) |
                  (if (hasFlag("#")) FormattableFlags.ALTERNATE else 0) |
                  (if (isConversionUpperCase) FormattableFlags.UPPERCASE else 0)
}}}}}}}}}
>>>
{
  {
    {
      {
        {
          {
            {
              {
                {
                  (if (hasFlag("-")) FormattableFlags.LEFT_JUSTIFY else 0) |
                    (if (hasFlag("#")) FormattableFlags.ALTERNATE else 0) |
                    (if (isConversionUpperCase) FormattableFlags.UPPERCASE
                     else 0)
                }
              }
            }
          }
        }
      }
    }
  }
}
<<< while condition is like if
    while (!hasReachedEof(curr) &&
    !statementStarts.contains(hash(tokens(curr.splits.length).left))) {
      foo
    }
>>>
while (!hasReachedEof(curr) &&
       !statementStarts.contains(hash(tokens(curr.splits.length).left))) {
  foo
}
<<< return
      if (fullInfo)
        return (candidates.toSeq.map(c => forMap(c, withLocalTypeInference = false, checkFast = false)) ++
          candidates.toSeq.map(c => forMap(c, withLocalTypeInference = true, checkFast = false))).
          flatMap(_.toSeq).map(_._1).toSet
>>>
if (fullInfo)
  return (candidates.toSeq.map(c =>
    forMap(c, withLocalTypeInference = false, checkFast = false)) ++
    candidates.toSeq.map(c =>
      forMap(c, withLocalTypeInference = true, checkFast = false)))
    .flatMap(_.toSeq)
    .map(_._1)
    .toSet
