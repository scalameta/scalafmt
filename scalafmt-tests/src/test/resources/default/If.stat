80 columns                                                                     |
<<< Break before then condition
if (between.lastOption.exists(_.isInstanceOf[`\n`])) List(Split(NoIndentNewline, 0))
else List(Split(Newline, 0))
>>>
if (between.lastOption.exists(_.isInstanceOf[`\n`]))
  List(Split(NoIndentNewline, 0))
else List(Split(Newline, 0))
<<< break by nesting depth
        if (aaaaaaaaaaaadequeOnNewStatements &&
          (depth > 0 || !isInsideNoOptZone(splitToken)) &&
          statementStarts.contains(hash(splitToken.left)) &&
          curr.splits.last.modification.isNewline ) {
          Q.dequeueAll
        }
>>>
if (
    aaaaaaaaaaaadequeOnNewStatements &&
    (depth > 0 || !isInsideNoOptZone(splitToken)) &&
    statementStarts.contains(hash(splitToken.left)) &&
    curr.splits.last.modification.isNewline
) {
  Q.dequeueAll
}
<<< break on &&
if (packageTokensaaaaaa.contains(tok.left) &&
 !packageTokens.contains(tok.right)) true
>>>
if (
    packageTokensaaaaaa.contains(tok.left) &&
    !packageTokens.contains(tok.right)
) true
<<< if space (
def identModification(ident: Ident): Modification =
      if (Character.isLetterOrDigit(ident.code.last)) NoSplit
      else Space
>>>
def identModification(ident: Ident): Modification =
  if (Character.isLetterOrDigit(ident.code.last)) NoSplit
  else Space
<<< thisLocalDef
{
    val newParamDefs = for { _ <- params } yield {
      ParamDef()
      ((name -> localDef), newParamDef)
    }
    val thisLocalDef =
      if (thisType == NoType) None
      else {
        Some("this" -> LocalDef(
            RefinedType(thisType, isExact = false, isNullable = false),
            false, ReplaceWithThis()))
      }
      }
>>>
{
  val newParamDefs = for { _ <- params } yield {
    ParamDef()
    ((name -> localDef), newParamDef)
  }
  val thisLocalDef =
    if (thisType == NoType) None
    else {
      Some(
          "this" -> LocalDef(
              RefinedType(thisType, isExact = false, isNullable = false),
              false,
              ReplaceWithThis()))
    }
}
<<< AST violate
object a {
def toString(): String = {
    (if (isInterface()) "is interface " else
        if (isPrimitive()) "" else "class ")+getName()
  }
  }
>>>
object a {
  def toString(): String = {
    (if (isInterface()) "is interface "
     else if (isPrimitive()) ""
     else "class ") + getName()
  }
}
<<< pruneNonOptimal bug
{{{{{{{{{
                  (if (hasFlag("-")) FormattableFlags.LEFT_JUSTIFY else 0) |
                  (if (hasFlag("#")) FormattableFlags.ALTERNATE else 0) |
                  (if (isConversionUpperCase) FormattableFlags.UPPERCASE else 0)
}}}}}}}}}
>>>
{
  {
    {
      {
        {
          {
            {
              {
                {
                  (if (hasFlag("-")) FormattableFlags.LEFT_JUSTIFY else 0) |
                    (if (hasFlag("#")) FormattableFlags.ALTERNATE else 0) |
                    (if (isConversionUpperCase) FormattableFlags.UPPERCASE
                     else 0)
                }
              }
            }
          }
        }
      }
    }
  }
}
<<< while condition is like if
    while (!hasReachedEof(curr) &&
    !statementStarts.contains(hash(tokens(curr.splits.length).left))) {
      foo
    }
>>>
while (
    !hasReachedEof(curr) &&
    !statementStarts.contains(hash(tokens(curr.splits.length).left))
) {
  foo
}
<<< return
      if (fullInfo)
        return (candidates.toSeq.map(c => forMap(c, withLocalTypeInference = false, checkFast = false)) ++
          candidates.toSeq.map(c => forMap(c, withLocalTypeInference = true, checkFast = false))).
          flatMap(_.toSeq).map(_._1).toSet
>>>
if (fullInfo)
  return (candidates.toSeq.map(c =>
    forMap(c, withLocalTypeInference = false, checkFast = false)) ++
    candidates.toSeq.map(c =>
      forMap(c, withLocalTypeInference = true, checkFast = false)))
    .flatMap(_.toSeq)
    .map(_._1)
    .toSet
<<< #1409 yes, it's ugly, but consistent with Scala grammar: {} owns by lambda body
class Sample {
  def mkFunc(flag: Boolean): String => Boolean = {
    if(flag) {
      (v => true)
    } else {
      (v => false)
    }
  }
}
>>>
class Sample {
  def mkFunc(flag: Boolean): String => Boolean = {
    if (flag) { (v =>
      true)
    } else { (v =>
      false)
    }
  }
}

<<< #1413
if (Keys.useCoursier.value)
      Def.task {
        CoursierDependencyResolution(Keys.csrConfiguration.value)
      }
    else
      Def.task {
        IvyDependencyResolution(
          Keys.ivyConfiguration.value,
          CustomHttp.okhttpClient.value
        )
      }
>>>
if (Keys.useCoursier.value)
  Def.task {
    CoursierDependencyResolution(Keys.csrConfiguration.value)
  }
else
  Def.task {
    IvyDependencyResolution(
        Keys.ivyConfiguration.value,
        CustomHttp.okhttpClient.value
    )
  }
<<< #1190 1 if
danglingParentheses.ctrlSite = true
continuationIndent.callSite = 2
maxColumn = 45
===
object a {
  if (numTries > 0 &&
    oldestCompleteTimestampOpt.isDefined &&
    activityCache.nonEmpty) {
      // noop
  }
  if (
      oldestCompleteTimestampOpt.isDefined
  ) {
    // noop
  }
}
>>>
object a {
  if (
    numTries > 0 &&
    oldestCompleteTimestampOpt.isDefined &&
    activityCache.nonEmpty
  ) {
    // noop
  }
  if (oldestCompleteTimestampOpt.isDefined) {
    // noop
  }
}
<<< #1190 2 while
danglingParentheses.ctrlSite = true
continuationIndent.callSite = 2
maxColumn = 45
===
object a {
  while (numTries > 0 &&
    oldestCompleteTimestampOpt.isDefined &&
    activityCache.nonEmpty) {
    // noop
  }
  while (
    oldestCompleteTimestampOpt.isDefined
    ) {
    // noop
  }
}
>>>
object a {
  while (
    numTries > 0 &&
    oldestCompleteTimestampOpt.isDefined &&
    activityCache.nonEmpty
  ) {
    // noop
  }
  while (
    oldestCompleteTimestampOpt.isDefined
  ) {
    // noop
  }
}
<<< if then function 1
if (initStyle.align.multiline)
  (x, isBlankLine) => if (isBlankLine) blocks.get(x) else None
else (_, _) => Some(prevBlock)
>>>
if (initStyle.align.multiline)
  (x, isBlankLine) => if (isBlankLine) blocks.get(x) else None
else (_, _) => Some(prevBlock)
<<< if then function 2
if (initStyle.align.multiline) (_, _) => Some(prevBlock)
else (x, isBlankLine) => if (isBlankLine) blocks.get(x) else None
>>>
if (initStyle.align.multiline) (_, _) => Some(prevBlock)
else (x, isBlankLine) => if (isBlankLine) blocks.get(x) else None
