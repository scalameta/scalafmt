40 columns                              |
<<< keep x to {
lst.map { x =>
      println(x)
  x + 1
}
>>>
lst.map { x =>
  println(x)
  x + 1
}
<<< long argument to lambda {
lst.map { xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =>
      println(x)
  x + 1
}
>>>
lst.map {
  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =>
    println(x)
    x + 1
}
<<< long argument singleline
lst.map { (xxxxxxxxxxxx, yyyyyyyyyyy) =>
      println(x)
  x + 1
}
>>>
lst.map {
  (xxxxxxxxxxxx, yyyyyyyyyyy) =>
    println(x)
    x + 1
}
<<< curried
Thing() { implicit ctx => j =>
      ???
}
>>>
Thing() { implicit ctx => j =>
  ???
}
<<< curried break before first
Thing() { implicit ctx => j => kkkkkkkkkk =>
      ???
}
>>>
Thing() {
  implicit ctx => j => kkkkkkkkkk =>
    ???
}
<<< curried insanity, fit as much on line as possible
Thing() { implicit ctx => j => kkkkkkkkkkkkkkkkkkk => llllllllllll => mmmmmmmmmmmmmmmmmmm =>
      ???
}
>>>
Thing() {
  implicit ctx => j =>
    kkkkkkkkkkkkkkkkkkk =>
      llllllllllll =>
        mmmmmmmmmmmmmmmmmmm =>
          ???
}
<<< curried with ()
Thing(implicit ctx => j =>
      ???
)
>>>
Thing(implicit ctx => j => ???)
<<< long curried with ()
Thing(implicit ctx => j => k => aaaaaaaaaaaaa(bbbbbbbbbbbbbbbbbbb, cccccccccc, ddddddddddddddddddddj)) // coooooooooooooooomment
>>>
Thing(implicit ctx =>
  j =>
    k =>
      aaaaaaaaaaaaa(
          bbbbbbbbbbbbbbbbbbb,
          cccccccccc,
          ddddddddddddddddddddj
      )) // coooooooooooooooomment
<<< single line uncurried
Thing() { implicit ctx =>
      ???
}
>>>
Thing() { implicit ctx =>
  ???
}
<<< ( arg =>
val groupedData = Array(topic1, topic2).flatMap(
        topic =>
          partitionDataFetchResponseMap.map(foobar))
>>>
val groupedData = Array(topic1, topic2)
  .flatMap(topic =>
    partitionDataFetchResponseMap.map(
        foobar))
<<< 1.8 upgrade
val x: Int => Int =  { y =>
  y + 1
}
>>>
val x: Int => Int = { y =>
  y + 1
}
<<< indent
map(() => {
  x =>
    x match {
      case e =>
  }
})
>>>
map(() => {
  x =>
    x match {
      case e =>
    }
})
<<< case
classTag[K] match {
  case ClassTag.Float =>
    (l, x) =>
      util.Arrays(aaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbb)
    case ClassTag.Double =>
    (l, x) =>
      util.Arrays
}
>>>
classTag[K] match {
  case ClassTag.Float =>
    (l, x) =>
      util.Arrays(
          aaaaaaaaaaaaaaaaaaaaa,
          bbbbbbbbbbbbbbbbb)
  case ClassTag.Double =>
    (l, x) => util.Arrays
}
<<< #1171
call(1) { x =>
}
>>>
call(1) { x => }
<<< #1171 comment
call(1) { x => // nothing
}
>>>
call(1) { x => // nothing
}
<<< #2099 beforeCurlyLambdaParams = false
newlines.beforeCurlyLambdaParams = false
===
object a {
  x.map { x => s"${x._1} -> ${x._2}" }
  x.map(x => s"${x._1} -> ${x._2}")
  x.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map { x => s"${x._1} -> ${x._2}" }
  x.zipWithIndex.map(x => s"${x._1} -> ${x._2}")
  x.zipWithIndex.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map { case (c, i) => s"$c -> $i (long comment)" }
  x.zipWithIndex.map { case (c, i) if c != i => s"$c -> $i" }
  x.flatMap(result => for {
      _ <- a
      _ <- b
    } yield ()
  )
}
>>>
object a {
  x.map { x => s"${x._1} -> ${x._2}" }
  x.map(x => s"${x._1} -> ${x._2}")
  x.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map { x =>
    s"${x._1} -> ${x._2}"
  }
  x.zipWithIndex.map(x =>
    s"${x._1} -> ${x._2}")
  x.zipWithIndex.map { case (c, i) =>
    s"$c -> $i"
  }
  x.zipWithIndex.map { case (c, i) =>
    s"$c -> $i (long comment)"
  }
  x.zipWithIndex.map {
    case (c, i) if c != i =>
      s"$c -> $i"
  }
  x.flatMap(result =>
    for {
      _ <- a
      _ <- b
    } yield ())
}
<<< #2099 beforeCurlyLambdaParams = true
newlines.beforeCurlyLambdaParams = true
===
object a {
  x.map { x => s"${x._1} -> ${x._2}" }
  x.map(x => s"${x._1} -> ${x._2}")
  x.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map { x => s"${x._1} -> ${x._2}" }
  x.zipWithIndex.map(x => s"${x._1} -> ${x._2}")
  x.zipWithIndex.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map { case (c, i) => s"$c -> $i (long comment)" }
  x.zipWithIndex.map { case (c, i) if c != i => s"$c -> $i" }
  x.flatMap(result => for {
      _ <- a
      _ <- b
    } yield ()
  )
}
>>>
object a {
  x.map {
    x => s"${x._1} -> ${x._2}"
  }
  x.map(
      x => s"${x._1} -> ${x._2}")
  x.map {
    case (c, i) => s"$c -> $i"
  }
  x.zipWithIndex.map {
    x => s"${x._1} -> ${x._2}"
  }
  x.zipWithIndex.map(
      x => s"${x._1} -> ${x._2}")
  x.zipWithIndex.map {
    case (c, i) => s"$c -> $i"
  }
  x.zipWithIndex.map {
    case (c, i) =>
      s"$c -> $i (long comment)"
  }
  x.zipWithIndex.map {
    case (c, i) if c != i =>
      s"$c -> $i"
  }
  x.flatMap(
      result =>
        for {
          _ <- a
          _ <- b
        } yield ())
}
<<< #2099 beforeCurlyLambdaParams = multilineWithCaseOnly
newlines.beforeCurlyLambdaParams = multilineWithCaseOnly
===
object a {
  x.map { x => s"${x._1} -> ${x._2}" }
  x.map(x => s"${x._1} -> ${x._2}")
  x.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map { x => s"${x._1} -> ${x._2}" }
  x.zipWithIndex.map(x => s"${x._1} -> ${x._2}")
  x.zipWithIndex.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map { case (c, i) => s"$c -> $i (long comment)" }
  x.zipWithIndex.map { case (c, i) if c != i => s"$c -> $i" }
  x.flatMap(result => for {
      _ <- a
      _ <- b
    } yield ()
  )
}
>>>
object a {
  x.map { x => s"${x._1} -> ${x._2}" }
  x.map(x => s"${x._1} -> ${x._2}")
  x.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map { x =>
    s"${x._1} -> ${x._2}"
  }
  x.zipWithIndex.map(x =>
    s"${x._1} -> ${x._2}")
  x.zipWithIndex.map {
    case (c, i) => s"$c -> $i"
  }
  x.zipWithIndex.map {
    case (c, i) =>
      s"$c -> $i (long comment)"
  }
  x.zipWithIndex.map {
    case (c, i) if c != i =>
      s"$c -> $i"
  }
  x.flatMap(result =>
    for {
      _ <- a
      _ <- b
    } yield ())
}
<<< #2099 beforeCurlyLambdaParams = multiline
newlines.beforeCurlyLambdaParams = multiline
===
object a {
  x.map { x => s"${x._1} -> ${x._2}" }
  x.map(x => s"${x._1} -> ${x._2}")
  x.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map { x => s"${x._1} -> ${x._2}" }
  x.zipWithIndex.map(x => s"${x._1} -> ${x._2}")
  x.zipWithIndex.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map { case (c, i) => s"$c -> $i (long comment)" }
  x.zipWithIndex.map { case (c, i) if c != i => s"$c -> $i" }
  x.flatMap(result => for {
      _ <- a
      _ <- b
    } yield ()
  )
}
>>>
object a {
  x.map { x => s"${x._1} -> ${x._2}" }
  x.map(x => s"${x._1} -> ${x._2}")
  x.map { case (c, i) => s"$c -> $i" }
  x.zipWithIndex.map {
    x => s"${x._1} -> ${x._2}"
  }
  x.zipWithIndex.map(
      x => s"${x._1} -> ${x._2}")
  x.zipWithIndex.map {
    case (c, i) => s"$c -> $i"
  }
  x.zipWithIndex.map {
    case (c, i) =>
      s"$c -> $i (long comment)"
  }
  x.zipWithIndex.map {
    case (c, i) if c != i =>
      s"$c -> $i"
  }
  x.flatMap(
      result =>
        for {
          _ <- a
          _ <- b
        } yield ())
}
