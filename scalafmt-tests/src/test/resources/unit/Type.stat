40 columns                              |
<<< abstract defs get newline
type ObjNotifyLike = Any {
        def notify(): Unit
        def notifyAll(): Unit
      }
>>>
type ObjNotifyLike = Any {
  def notify(): Unit
  def notifyAll(): Unit
}
<<< type indent by 2
package object internal {
  /*
    * For convenience when
    */
  type TokenHash = Long
  }
>>>
package object internal {
  /*
   * For convenience when
   */
  type TokenHash = Long
}
<<< variance annotation #98
 trait JSIterator[+A] extends js.Object
>>>
trait JSIterator[+A] extends js.Object
<<< singleton type #104
  lazy val Blob: raw.Blob.type = raw.Blob
>>>
lazy val Blob: raw.Blob.type = raw.Blob
<<< multiple types
type Type = Class[F, E, M] forSome {
    type F
    type M <: ClassificationModel[F, M]
    type E <: Classifier[F, E, M]
  }
>>>
type Type = Class[F, E, M] forSome {
  type F
  type M <: ClassificationModel[F, M]
  type E <: Classifier[F, E, M]
}
<<< no space #165
type Sequence [T] = js.Array[T]
>>>
type Sequence[T] = js.Array[T]
<<< no space before colon #180
def map[T : Class](f: N => T): S[T]
>>>
def map[T: Class](f: N => T): S[T]
<<< no space before colon 2 #180
def orderLaws[A : Eq : Arbitrary] = O
>>>
def orderLaws[A: Eq: Arbitrary] = O
<<< decl.type #288
trait Foo[F[_]] {
  type G [A]
  }
>>>
trait Foo[F[_]] {
  type G[A]
}
<<< #375
  trait TransLift[MT[_[_], _]]
>>>
trait TransLift[MT[_[_], _]]
<<< infix types #500
type Row =
AlertEvent :+:
  InteractionEvent :+:
  HistoryEvent :+:
  PostEvent :+:
  ImageEvent
>>>
type Row =
  AlertEvent :+:
    InteractionEvent :+:
    HistoryEvent :+:
    PostEvent :+:
    ImageEvent
<<< #756
type a = b_! # D
>>>
type a = b_! #D
