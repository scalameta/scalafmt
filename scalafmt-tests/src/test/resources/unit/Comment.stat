40 columns                              |
<<< Inline comment binds left
function(a,// comment
         b)
>>>
function(a, // comment
         b)
<<< Inline comment binds right
function(a,
 // comment
         b)
>>>
function(a,
         // comment
         b)
<<< comment respects 2x newline
{val x = 1

  // Give me 2x newlines!
  val y = 2
}
>>>
{
  val x = 1

  // Give me 2x newlines!
  val y = 2
}
<<< muliline comment gets 2x newline
{val x = 1

  /*
   * I'm so important
   */
  val y = 2
}
>>>
{
  val x = 1

  /*
   * I'm so important
   */
  val y = 2
}
<<< two comments in a row
{
  /*
   * who wrote this?
   */

  /*
   * I'm so important
   */
  val y = 2
}
>>>
{
  /*
   * who wrote this?
   */

  /*
   * I'm so important
   */
  val y = 2
}
<<< commented out code stays to the left
{
//  val x = 1
val y = 2
//  val x = 1
}
>>>
{
//  val x = 1
  val y = 2
//  val x = 1
}
<<< commented out code with 2x newline
{
val x = 1

//  val x = 2
}
>>>
{
  val x = 1

//  val x = 2
}
<<< Offset
{
  val OffsetPrimes = Array(
      null, null, (0, 2), (2, 2), (4, 2), (6, 5), (11, 7),
      (18, 13), (31, 23), (54, 43), (97, 75))

  // All {@code BigInteger} prime numbers with bit length lesser than 8 bits. */
  val x = 1
}
>>>
{
  val OffsetPrimes = Array(null,
                           null,
                           (0, 2),
                           (2, 2),
                           (4, 2),
                           (6, 5),
                           (11, 7),
                           (18, 13),
                           (31, 23),
                           (54, 43),
                           (97, 75))

  // All {@code BigInteger} prime numbers with bit length lesser than 8 bits. */
  val x = 1
}
<<< Offset comment before )
  val OffsetPrimes = Array(null, null, (0, 2), (2, 2), (4, 2), (6, 5), (11, 7),
      (18, 13), (31, 23), (54, 43), (97, 75)
  // All {@code BigInteger} prime numbers with bit length lesser than 8 bits. */
  )
>>>
val OffsetPrimes = Array(null,
                         null,
                         (0, 2),
                         (2, 2),
                         (4, 2),
                         (6, 5),
                         (11, 7),
                         (18, 13),
                         (31, 23),
                         (54, 43),
                         (97, 75)
                         // All {@code BigInteger} prime numbers with bit length lesser than 8 bits. */
)
<<< non comment exceeds line (state explosion).
  val OffsetPrimes = Array(
      null, null, (0, 2), (2, 2), (4, 2), (6, 5), (11, 7),
      (18, 13), (31, 23), (54, 43), (97, 75),
      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      )
>>>
val OffsetPrimes = Array(
    null,
    null,
    (0, 2),
    (2, 2),
    (4, 2),
    (6, 5),
    (11, 7),
    (18, 13),
    (31, 23),
    (54, 43),
    (97, 75),
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
)
<<< flush commented code to left
x match {
case x =>
//     println(x)
  x
// case y => 3
// case y => 3
// case y => 3
case z => 4
}
>>>
x match {
  case x =>
//     println(x)
    x
// case y => 3
// case y => 3
// case y => 3
  case z => 4
}
<<< indent multiline comments
object a {
/*
* This
* is
* multiline
*/
val x = 1
}
>>>
object a {
  /*
   * This
   * is
   * multiline
   */
  val x = 1
}
<<< preserve line #257
object literal extends scala.Dynamic { // scalastyle:ignore
    ???
}
>>>
object literal extends scala.Dynamic { // scalastyle:ignore
  ???
}
<<< #1234 1: single-line
comments.wrap = standalone
===
// A really long comment that scalafmt should break up but does not because this feature is not implemented yet
// short comment
object a {
  // short comment
  // Another long comment demonstrating that wrapped comments will be aligned sensibly
  def a = {}
}
>>>
/* A really long comment that scalafmt
 * should break up but does not because
 * this feature is not implemented yet */
// short comment
object a {
  // short comment
  /* Another long comment demonstrating
   * that wrapped comments will be
   * aligned sensibly */
  def a = {}
}
<<< #1234 2: multi-line
comments.wrap = standalone
===
/* Block-style comments should also be wrapped, because some people like them and we want to be inclusive */
object a {
  /* And block-style comments should also be indented aligned sensibly, because they're just as good as single-line comments */
  def a = {}
}
>>>
/* Block-style comments should also be
 * wrapped, because some people like
 * them and we want to be inclusive */
object a {
  /* And block-style comments should
   * also be indented aligned sensibly,
   * because they're just as good as
   * single-line comments */
  def a = {}
}
<<< #1234 3: both
comments.wrap = standalone
===
// A really long comment that scalafmt should break up but does not because this feature is not implemented yet
// short comment
/* short comment */
/* Block-style comments should also be wrapped, because some people like them and we want to be inclusive */
object a {
  /* And block-style comments should also be indented aligned sensibly, because they're just as good as single-line comments */
  /* long comment, with a nested comment following; shouldn't be rewritten
  /* nested comment
   */ */
  /* section 1
   *
   * section 2


   * section 3:
   * paragraph 3.1.
   * paragraph 3.2!
   * paragraph 3.2?
   *
   * section 4
   * 1. item1
   * 10: item10
   * - item1
   * * item2
     @ item3
   */
  def a = {} /* And block-style comments should also be indented aligned sensibly, because they're just as good as single-line comments */
}
>>>
/* A really long comment that scalafmt
 * should break up but does not because
 * this feature is not implemented yet */
// short comment
/* short comment */
/* Block-style comments should also be
 * wrapped, because some people like
 * them and we want to be inclusive */
object a {
  /* And block-style comments should
   * also be indented aligned sensibly,
   * because they're just as good as
   * single-line comments */
  /* long comment, with a nested comment following; shouldn't be rewritten
  /* nested comment
   */ */
  /* section 1
   *
   * section 2
   *
   * section 3:
   * paragraph 3.1.
   * paragraph 3.2!
   * paragraph 3.2?
   *
   * section 4
   * 1. item1
   * 10: item10
   * - item1
   * * item2
   * @ item3 */
  def a = {} /* And block-style comments should also be indented aligned sensibly, because they're just as good as single-line comments */
}
<<< #1234 4: trailing
comments.wrap = trailing
===
object a {
  def a = {} /* And block-style comments should also be indented aligned sensibly, because they're just as good as single-line comments */
}
>>>
object a {
  def a = {} /* And block-style
   * comments should also be indented
   * aligned sensibly, because they're
   * just as good as single-line
   * comments */
}
<<< #1234 5: trailing
comments.wrap = trailing
===
object a {
  def a = b(c) // A really long comment that scalafmt should break up but does not because this feature is not implemented yet
}
>>>
object a {
  def a = b(c) /* A really long comment
   * that scalafmt should break up but
   * does not because this feature is
   * not implemented yet */
}
<<< #1234 6: trailing
comments.wrap = trailing
===
object a {
  val a = b(c) // A really long comment that scalafmt should break up but does not because this feature is not implemented yet
}
>>>
object a {
  val a = b(c) /* A really long comment
   * that scalafmt should break up but
   * does not because this feature is
   * not implemented yet */
}
<<< #1234 7: trailing, use slc
comments.wrap = trailing
comments.wrapStandaloneSlcAsSlc = true
===
// A really long comment that scalafmt should break up but does not because this feature is not implemented yet
object a {
  val a = b(c) // A really long comment that scalafmt should break up but does not because this feature is not implemented yet
}
>>>
// A really long comment that scalafmt
// should break up but does not because
// this feature is not implemented yet
object a {
  val a = b(c) /* A really long comment
   * that scalafmt should break up but
   * does not because this feature is
   * not implemented yet */
}
<<< wrap with empty first line 1
comments.wrap = trailing
===
object a {
  /*
   * foo bar
   */
}
>>>
object a {
  /* foo bar */
}
<<< wrap with empty first line 2
comments.wrap = trailing
===
object a {
  /*
   * foo bar   */
}
>>>
object a {
  /* foo bar */
}
<<< #2043
object a {
  val
  MON,
  /*
   * Tuesday
   */
  TUE,
  /*
   * Wednesday
   */
  WED = Value
}
>>>
object a {
  val MON,
  /*
   * Tuesday
   */
  TUE,
  /*
   * Wednesday
   */
  WED = Value
}
