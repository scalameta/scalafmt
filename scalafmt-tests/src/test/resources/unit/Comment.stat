
<<< Inline comment binds left
function(a,// comment
         b)
>>>
function(a, // comment
         b)
<<< Inline comment binds right
function(a,
 // comment
         b)
>>>
function(a,
         // comment
         b)
<<< comment respects 2x newline
{val x = 1

  // Give me 2x newlines!
  val y = 2
}
>>>
{
  val x = 1

  // Give me 2x newlines!
  val y = 2
}
<<< multiline comment gets 2x newline
{val x = 1

  /*
   * I'm so important
   */
  val y = 2
}
>>>
{
  val x = 1

  /*
   * I'm so important
   */
  val y = 2
}
<<< two comments in a row
{
  /*
   * who wrote this?
   */

  /*
   * I'm so important
   */
  val y = 2
}
>>>
{
  /*
   * who wrote this?
   */

  /*
   * I'm so important
   */
  val y = 2
}
<<< commented out code stays to the left
{
//  val x = 1
val y = 2
//  val x = 1
}
>>>
{
//  val x = 1
  val y = 2
//  val x = 1
}
<<< commented out code with 2x newline
{
val x = 1

//  val x = 2
}
>>>
{
  val x = 1

//  val x = 2
}
<<< Offset
{
  val OffsetPrimes = Array(
      null, null, (0, 2), (2, 2), (4, 2), (6, 5), (11, 7),
      (18, 13), (31, 23), (54, 43), (97, 75))

  // All {@code BigInteger} prime numbers with bit length lesser than 8 bits. */
  val x = 1
}
>>>
{
  val OffsetPrimes = Array(null,
                           null,
                           (0, 2),
                           (2, 2),
                           (4, 2),
                           (6, 5),
                           (11, 7),
                           (18, 13),
                           (31, 23),
                           (54, 43),
                           (97, 75))

  // All {@code BigInteger} prime numbers with bit length lesser than 8 bits. */
  val x = 1
}
<<< Offset comment before )
  val OffsetPrimes = Array(null, null, (0, 2), (2, 2), (4, 2), (6, 5), (11, 7),
      (18, 13), (31, 23), (54, 43), (97, 75)
  // All {@code BigInteger} prime numbers with bit length lesser than 8 bits. */
  )
>>>
val OffsetPrimes = Array(null,
                         null,
                         (0, 2),
                         (2, 2),
                         (4, 2),
                         (6, 5),
                         (11, 7),
                         (18, 13),
                         (31, 23),
                         (54, 43),
                         (97, 75)
                         // All {@code BigInteger} prime numbers with bit length lesser than 8 bits. */
)
<<< Offset comment before ), align close
align.closeParenSite = true
===
  val OffsetPrimes = Array(null, null, (0, 2), (2, 2), (4, 2), (6, 5), (11, 7),
      (18, 13), (31, 23), (54, 43), (97, 75)
  // All {@code BigInteger} prime numbers with bit length lesser than 8 bits. */
  )
>>>
val OffsetPrimes = Array(null,
                         null,
                         (0, 2),
                         (2, 2),
                         (4, 2),
                         (6, 5),
                         (11, 7),
                         (18, 13),
                         (31, 23),
                         (54, 43),
                         (97, 75)
                         // All {@code BigInteger} prime numbers with bit length lesser than 8 bits. */
                        )
<<< non comment exceeds line (state explosion).
  val OffsetPrimes = Array(
      null, null, (0, 2), (2, 2), (4, 2), (6, 5), (11, 7),
      (18, 13), (31, 23), (54, 43), (97, 75),
      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      )
>>>
val OffsetPrimes = Array(
    null,
    null,
    (0, 2),
    (2, 2),
    (4, 2),
    (6, 5),
    (11, 7),
    (18, 13),
    (31, 23),
    (54, 43),
    (97, 75),
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
)
<<< flush commented code to left
x match {
case x =>
//     println(x)
  x
// case y => 3
// case y => 3
// case y => 3
case z => 4
}
>>>
x match {
  case x =>
//     println(x)
    x
// case y => 3
// case y => 3
// case y => 3
  case z => 4
}
<<< indent multiline comments
object a {
/*
* This
* is
* multiline
*/
val x = 1
}
>>>
object a {
  /*
   * This
   * is
   * multiline
   */
  val x = 1
}
<<< preserve line #257
object literal extends scala.Dynamic { // scalastyle:ignore
    ???
}
>>>
object literal extends scala.Dynamic { // scalastyle:ignore
  ???
}
<<< #1234 1: single-line
comments.wrap = standalone
===
// A really long comment that scalafmt should break up but does not because this feature is not implemented yet
// short comment
object a {
  // short comment
  // Another long comment demonstrating that wrapped comments will be aligned sensibly
  def a = {}
}
>>>
// A really long comment that scalafmt should break up but does not because this feature is not implemented yet
// short comment
object a {
  // short comment
  /* Another long comment demonstrating
   * that wrapped comments will be
   * aligned sensibly */
  def a = {}
}
<<< #1234 2: multi-line
comments.wrap = standalone
===
/* Block-style comments should also be wrapped, because some people like them and we want to be inclusive */
object a {
  /* And block-style comments should also be indented aligned sensibly, because they're just as good as single-line comments */
  def a = {}
}
>>>
/* Block-style comments should also be
 * wrapped, because some people like
 * them and we want to be inclusive */
object a {
  /* And block-style comments should
   * also be indented aligned sensibly,
   * because they're just as good as
   * single-line comments */
  def a = {}
}
<<< #1234 3: both
comments.wrap = standalone
===
// A really long comment that scalafmt should break up but does not because this feature is not implemented yet
// short comment
/* short comment */
/* Block-style comments should also be wrapped, because some people like them and we want to be inclusive */
object a {
  // A really long comment that scalafmt should break up but does not because this feature is not implemented yet
  // short comment
  /* And block-style comments should also be indented aligned sensibly, because they're just as good as single-line comments */
  /* long comment, with a nested comment following; shouldn't be rewritten
  /* nested comment
   */ */
  /* section 1
   *
   * section 2


   * section 3:
   * paragraph 3.1.
   * paragraph 3.2!
   * paragraph 3.2?
   *
   * section 4
   * 1. item1
   * 10: item10
   * - item1
   * * item2
     @ item3
   */
  def a = {} /* And block-style comments should also be indented aligned sensibly, because they're just as good as single-line comments */
}
>>>
// A really long comment that scalafmt should break up but does not because this feature is not implemented yet
// short comment
/* short comment */
/* Block-style comments should also be
 * wrapped, because some people like
 * them and we want to be inclusive */
object a {
  /* A really long comment that
   * scalafmt should break up but does
   * not because this feature is not
   * implemented yet */
  // short comment
  /* And block-style comments should
   * also be indented aligned sensibly,
   * because they're just as good as
   * single-line comments */
  /* long comment, with a nested comment following; shouldn't be rewritten
  /* nested comment
   */ */
  /* section 1
   *
   * section 2
   *
   * section 3:
   * paragraph 3.1.
   * paragraph 3.2!
   * paragraph 3.2?
   *
   * section 4
   * 1. item1
   * 10: item10
   * - item1
   * * item2
   * @ item3 */
  def a = {} /* And block-style comments should also be indented aligned sensibly, because they're just as good as single-line comments */
}
<<< #1234 4: trailing
comments.wrap = trailing
===
object a {
  def a = {} /* And block-style comments should also be indented aligned sensibly, because they're just as good as single-line comments */
}
>>>
object a {
  def a = {} /* And block-style
   * comments should also be indented
   * aligned sensibly, because they're
   * just as good as single-line
   * comments */
}
<<< #1234 5: trailing
comments.wrap = trailing
===
object a {
  def a = b(c) // A really long comment that scalafmt should break up but does not because this feature is not implemented yet
}
>>>
object a {
  def a = b(c) /* A really long comment
   * that scalafmt should break up but
   * does not because this feature is
   * not implemented yet */
}
<<< #1234 6: trailing
comments.wrap = trailing
===
object a {
  val a = b(c) // A really long comment that scalafmt should break up but does not because this feature is not implemented yet
}
>>>
object a {
  val a = b(c) /* A really long comment
   * that scalafmt should break up but
   * does not because this feature is
   * not implemented yet */
}
<<< #1234 7: trailing, use slc
comments.wrap = trailing
comments.wrapStandaloneSlcAsSlc = true
===
// A really long comment that scalafmt should break up but does not because this feature is not implemented yet
object a {
  // A really long comment that scalafmt should break up but does not because this feature is not implemented yet
  val a = b(c) // A really long comment that scalafmt should break up but does not because this feature is not implemented yet
}
>>>
// A really long comment that scalafmt should break up but does not because this feature is not implemented yet
object a {
  // A really long comment that
  // scalafmt should break up but does
  // not because this feature is not
  // implemented yet
  val a = b(c) /* A really long comment
   * that scalafmt should break up but
   * does not because this feature is
   * not implemented yet */
}
<<< wrap with empty first line 1
comments.wrap = trailing
===
object a {
  /*
   * foo bar
   */
}
>>>
object a {
  /* foo bar */
}
<<< wrap with empty first line 1, mlc -> slc
comments.wrap = trailing
comments.wrapSingleLineMlcAsSlc = true
===
object a {
  /* mlc */ /*
   * foo bar
   */
}
>>>
object a {
  /* mlc */ // foo bar
}
<<< wrap with empty first line 2
comments.wrap = trailing
===
object a {
  /*
   * foo bar   */
}
>>>
object a {
  /* foo bar */
}
<<< wrap with empty first line 2, mlc -> slc
comments.wrap = trailing
comments.wrapSingleLineMlcAsSlc = true
===
object a {
  /* mlc */ /*
   * foo bar   */
}
>>>
object a {
  /* mlc */ // foo bar
}
<<< #2043
object a {
  val
  MON,
  /*
   * Tuesday
   */
  TUE,
  /*
   * Wednesday
   */
  WED = Value
}
>>>
object a {
  val MON,
  /*
   * Tuesday
   */
  TUE,
  /*
   * Wednesday
   */
  WED = Value
}
<<< #2137 keep blanks between comma and comment
val a = Seq(
  a,

// b,
  c,

  // comment
  d
)
>>>
val a = Seq(
    a,

// b,
    c,

    // comment
    d
)
<<< #2246 trailing
comments.wrap = trailing
maxColumn = 80
===
private object ClientMetrics {
  ///empty since it is not an adapter call
  private val AdapterCallType = ""//empty since it is not an adapter call
}
>>>
private object ClientMetrics {
  /// empty since it is not an adapter call
  private val AdapterCallType = "" // empty since it is not an adapter call
}
<<< #2246 standalone
comments.wrap = standalone
maxColumn = 80
===
private object ClientMetrics {
  //empty since it is not an adapter call
  private val AdapterCallType = ""//empty since it is not an adapter call
}
>>>
private object ClientMetrics {
  // empty since it is not an adapter call
  private val AdapterCallType = "" // empty since it is not an adapter call
}
<<< #2809 wrapping with commented out
maxColumn = 37
comments.wrap = trailing
===
private object ClientMetrics {
//empty since it is not an adapter call
  private val AdapterCallType = ""//empty since it is not an adapter call
}
>>>
private object ClientMetrics {
//empty since it is not an adapter call
  private val AdapterCallType = "" /*
   * empty since it is not an adapter
   * call */
}
<<< #2809 wrapping with commented out, narrower
maxColumn = 35
comments.wrap = trailing
===
private object ClientMetrics {
//empty since it is not an adapter call
  private val AdapterCallType = ""//empty since it is not an adapter call
}
>>>
private object ClientMetrics {
//empty since it is not an adapter call
  private val AdapterCallType =
    "" /* empty since it is not an
     * adapter call */
}
<<< binpack=oneline, with trailing-wrapped comment
maxColumn = 100
comments.wrap = trailing
binPack.unsafeCallSite = oneline
===
object a {
   val requestedIds = Seq( // First 2 will not be taken into account since this app for 'Do Not Sell' and 'ATT' only
     CcpaRequestIds("luid", "1", None, date, version, RequestType.Delete),
    CcpaRequestIds("hemlmd5", "MD5-1", None, date, version, RequestType.Delete), /* Next 2 will
     * not be taken into account since 'filterDoNotSellBy' is not set */
     CcpaRequestIds("luid", "2", date, None, version, RequestType.DoNotSell),
     CcpaRequestIds("hemlmd5", "MD5-2", date, None, version, RequestType.DoNotSell)
     /* Only last record will be taken into account but not the next one since filtering of 'ATT'
      * IDs is requsted for MD5 and SHA1 and not for LUID */
  )
}
>>>
object a {
  val requestedIds = Seq( /* First 2 will not be taken into account since this app for 'Do Not
       * Sell' and 'ATT' only */
      CcpaRequestIds("luid", "1", None, date, version, RequestType.Delete),
      CcpaRequestIds("hemlmd5", "MD5-1", None, date, version, RequestType.Delete), /* Next 2 will
       * not be taken into account since 'filterDoNotSellBy' is not set */
      CcpaRequestIds("luid", "2", date, None, version, RequestType.DoNotSell),
      CcpaRequestIds("hemlmd5", "MD5-2", date, None, version, RequestType.DoNotSell)
      /* Only last record will be taken into account but not the next one since filtering of 'ATT'
       * IDs is requsted for MD5 and SHA1 and not for LUID */
  )
}
<<< binpack=oneline, with trailing-wrapped comment, narrower
maxColumn = 90
indent.callSite = 2
comments.wrap = trailing
binPack.unsafeCallSite = oneline
===
object a {
  val foo = Seq( // First 2 will not be taken into account since this app for 'Do Not Sell'
     CcpaRequestIds("luid", "1", None, date, version, RequestType.Delete),
    CcpaRequestIds("hemlmd5", "MD5-1", None, date, version, RequestType.Delete), /* Next 2 will
     * not be taken into account since 'filterDoNotSellBy' is not set */
     CcpaRequestIds("luid", "2", date, None, version, RequestType.DoNotSell),
     CcpaRequestIds("hemlmd5", "MD5-2", date, None, version, RequestType.DoNotSell)
     /* Only last record will be taken into account but not the next one since filtering of 'ATT'
      * IDs is requsted for MD5 and SHA1 and not for LUID */
  )
}
>>>
object a {
  val foo = Seq( /* First 2 will not be taken into account since this app for 'Do Not
     * Sell' */
    CcpaRequestIds("luid", "1", None, date, version, RequestType.Delete),
    CcpaRequestIds("hemlmd5", "MD5-1", None, date, version, RequestType.Delete), /* Next 2
     * will not be taken into account since 'filterDoNotSellBy' is not set */
    CcpaRequestIds("luid", "2", date, None, version, RequestType.DoNotSell),
    CcpaRequestIds("hemlmd5", "MD5-2", date, None, version, RequestType.DoNotSell)
    /* Only last record will be taken into account but not the next one since filtering of
     * 'ATT' IDs is requsted for MD5 and SHA1 and not for LUID */
  )
}
<<< binpack=oneline, standalone-wrapped comment, narrower
maxColumn = 90
indent.callSite = 2
comments.wrap = standalone
binPack.unsafeCallSite = oneline
===
object a {
  val foo = Seq( // First 2 will not be taken into account since this app for 'Do Not Sell'
     CcpaRequestIds("luid", "1", None, date, version, RequestType.Delete),
    CcpaRequestIds("hemlmd5", "MD5-1", None, date, version, RequestType.Delete), /* Next 2 will
     * not be taken into account since 'filterDoNotSellBy' is not set */
     CcpaRequestIds("luid", "2", date, None, version, RequestType.DoNotSell),
     CcpaRequestIds("hemlmd5", "MD5-2", date, None, version, RequestType.DoNotSell)
     /* Only last record will be taken into account but not the next one since filtering of 'ATT'
      * IDs is requsted for MD5 and SHA1 and not for LUID */
  )
}
>>>
object a {
  val foo =
    Seq( // First 2 will not be taken into account since this app for 'Do Not Sell'
      CcpaRequestIds("luid", "1", None, date, version, RequestType.Delete),
      CcpaRequestIds("hemlmd5", "MD5-1", None, date, version,
                     RequestType.Delete), /* Next 2 will
       * not be taken into account since 'filterDoNotSellBy' is not set */
      CcpaRequestIds("luid", "2", date, None, version, RequestType.DoNotSell),
      CcpaRequestIds("hemlmd5", "MD5-2", date, None, version, RequestType.DoNotSell)
      /* Only last record will be taken into account but not the next one since filtering
       * of 'ATT' IDs is requsted for MD5 and SHA1 and not for LUID */
    )
}
<<< binpack=oneline, no comment wrapping, narrower
maxColumn = 90
indent.callSite = 2
binPack.unsafeCallSite = oneline
===
object a {
  val foo = Seq( // First 2 will not be taken into account since this app for 'Do Not Sell'
     CcpaRequestIds("luid", "1", None, date, version, RequestType.Delete),
    CcpaRequestIds("hemlmd5", "MD5-1", None, date, version, RequestType.Delete), /* Next 2 will
     * not be taken into account since 'filterDoNotSellBy' is not set */
     CcpaRequestIds("luid", "2", date, None, version, RequestType.DoNotSell),
     CcpaRequestIds("hemlmd5", "MD5-2", date, None, version, RequestType.DoNotSell)
     /* Only last record will be taken into account but not the next one since filtering of 'ATT'
      * IDs is requsted for MD5 and SHA1 and not for LUID */
  )
}
>>>
object a {
  val foo =
    Seq( // First 2 will not be taken into account since this app for 'Do Not Sell'
      CcpaRequestIds("luid", "1", None, date, version, RequestType.Delete),
      CcpaRequestIds("hemlmd5", "MD5-1", None, date, version,
                     RequestType.Delete), /* Next 2 will
       * not be taken into account since 'filterDoNotSellBy' is not set */
      CcpaRequestIds("luid", "2", date, None, version, RequestType.DoNotSell),
      CcpaRequestIds("hemlmd5", "MD5-2", date, None, version, RequestType.DoNotSell)
      /* Only last record will be taken into account but not the next one since filtering of 'ATT'
       * IDs is requsted for MD5 and SHA1 and not for LUID */
    )
}
<<< binpack=oneline, defn, with trailing-wrapped comment, narrower
maxColumn = 51
indent.callSite = 2
align.preset = none
comments.wrap = trailing
binPack.unsafeDefnSite = oneline
newlines.configStyleDefnSite.prefer = false
===
object a {
   def foo( // First 2 will not be taken into account
     foo1: Int,
     foo2: String, /* Next 2 will
     * not be taken into account since 'filterDoNotSellBy' is not set */
     foo3: Map[Int, Int],
     foo4: Set[Int]
     /* Only last record will be taken into account but not the next one since filtering of 'ATT'
      * IDs is requsted for MD5 and SHA1 and not for LUID */
  ) = ???
}
>>>
object a {
  def foo( /* First 2 will not be taken into
       * account */
      foo1: Int, foo2: String, /* Next 2 will not
       * be taken into account since
       * 'filterDoNotSellBy' is not set */
      foo3: Map[Int, Int], foo4: Set[Int]
      /* Only last record will be taken into
       * account but not the next one since
       * filtering of 'ATT' IDs is requsted for MD5
       * and SHA1 and not for LUID */
  ) = ???
}
<<< binpack=oneline, defn, with standalone-wrapped comment, narrower
maxColumn = 51
indent.callSite = 2
align.preset = none
comments.wrap = standalone
binPack.unsafeDefnSite = oneline
newlines.configStyleDefnSite.prefer = false
===
object a {
   def foo( // First 2 will not be taken into account
     foo1: Int,
     foo2: String, /* Next 2 will
     * not be taken into account since 'filterDoNotSellBy' is not set */
     foo3: Map[Int, Int],
     foo4: Set[Int]
     /* Only last record will be taken into account but not the next one since filtering of 'ATT'
      * IDs is requsted for MD5 and SHA1 and not for LUID */
  ) = ???
}
>>>
object a {
  def foo( // First 2 will not be taken into account
      foo1: Int, foo2: String, /* Next 2 will
       * not be taken into account since 'filterDoNotSellBy' is not set */
      foo3: Map[Int, Int], foo4: Set[Int]
      /* Only last record will be taken into
       * account but not the next one since
       * filtering of 'ATT' IDs is requsted for MD5
       * and SHA1 and not for LUID */
  ) = ???
}
<<< binpack=oneline, defn, no comment wrapping, narrower
maxColumn = 51
indent.callSite = 2
align.preset = none
binPack.unsafeDefnSite = oneline
newlines.configStyleDefnSite.prefer = false
===
object a {
   def foo( // First 2 will not be taken into account
     foo1: Int,
     foo2: String, /* Next 2 will
     * not be taken into account since 'filterDoNotSellBy' is not set */
     foo3: Map[Int, Int],
     foo4: Set[Int]
     /* Only last record will be taken into account but not the next one since filtering of 'ATT'
      * IDs is requsted for MD5 and SHA1 and not for LUID */
  ) = ???
}
>>>
object a {
  def foo( // First 2 will not be taken into account
      foo1: Int, foo2: String, /* Next 2 will
       * not be taken into account since 'filterDoNotSellBy' is not set */
      foo3: Map[Int, Int], foo4: Set[Int]
      /* Only last record will be taken into account but not the next one since filtering of 'ATT'
       * IDs is requsted for MD5 and SHA1 and not for LUID */
  ) = ???
}
<<< overflow, comma, attached mlc then another arg after break
maxColumn = 10
===
foo(
  barBarBar, /* comment */
  qux
)
>>>
foo(
    barBarBar, /* comment */
    qux
)
<<< overflow, comma, attached mlc then another arg after space
maxColumn = 10
===
foo(
  barBarBar, /* comment */
  bazBazBaz, /* comment */ qux
)
>>>
foo(
    barBarBar, /* comment */
    bazBazBaz,
    /* comment */ qux
)
<<< overflow, comma, attached mlc, binpack
maxColumn = 30
indent.callSite = 2
align.preset = none
binPack.preset = true
optIn.configStyleArguments = false
===
foo(barBarBarBar, /* c1 */ baz, /* c2 */ qux)
>>>
foo(barBarBarBar,
  /* c1 */ baz, /* c2 */ qux)
<<< overflow, comma, attached mlc, binpack, fold
maxColumn = 30
indent.callSite = 2
align.preset = none
binPack.preset = true
optIn.configStyleArguments = false
newlines.source = fold
includeCurlyBraceInSelectChains = true
===
foo(barBarBarBar, /* c1 */ baz, /* c2 */ qux)
>>>
foo(barBarBarBar,
  /* c1 */ baz, /* c2 */ qux)
<<< comma after mlc
foo(
  bar /* c1 */
  ,
  baz /* c2 */
  ,
)
>>>
foo(
    bar /* c1 */
    ,
    baz /* c2 */
)
<<< comma after mlc, binpack
binPack.preset = true
===
foo(
  bar /* c1 */
  ,
  baz /* c2 */
  ,
)
>>>
foo(
    bar /* c1 */
    ,
    baz /* c2 */
)
<<< for-yield with match and wrapped slc, fold
maxColumn = 95
align.preset = none
newlines.source = fold
comments.wrap = trailing
includeCurlyBraceInSelectChains = true
===
for {
  foo <- bar match {
    case Right(None) => FC.raiseError(UnexpectedEnd) // UnexpectedEnd from doobie error if not found
    case Left(error) => FC.raiseError(error)
  }
} yield foo
>>>
for {
  foo <- bar match {
    case Right(None) => FC.raiseError(UnexpectedEnd) /* UnexpectedEnd from doobie error if not
       * found */
    case Left(error) => FC.raiseError(error)
  }
} yield foo
<<< for-yield with match and wrapped mlc, fold
maxColumn = 95
align.preset = none
newlines.source = fold
comments.wrap = trailing
includeCurlyBraceInSelectChains = true
===
for {
  foo <- bar match {
    case Right(None) => FC.raiseError(UnexpectedEnd) /* UnexpectedEnd from doobie error if not
       * found */
    case Left(error) => FC.raiseError(error)
  }
} yield foo
>>>
for {
  foo <- bar match {
    case Right(None) => FC.raiseError(UnexpectedEnd) /* UnexpectedEnd from doobie error if not
       * found */
    case Left(error) => FC.raiseError(error)
  }
} yield foo
<<< wrapping in optional braces 1
maxColumn = 20
runner.dialect = scala3
indent.callSite = 2
align.preset = none
comments.wrap = trailing
===
object a:
  def foo =
    bar
    baz /* comment1 comment2
     * comment3 */
  val qux = foo
>>>
object a:
  def foo =
    bar
    baz /* comment1
     * comment2
     * comment3 */
  val qux = foo
<<< wrapping in optional braces 2
maxColumn = 20
runner.dialect = scala3
indent.callSite = 2
align.preset = none
comments.wrap = trailing
===
object a:
  def foo =
    bar
    baz /* comment1 comment2
     * comment3 */
>>>
object a:
  def foo =
    bar
    baz /* comment1
     * comment2
     * comment3 */
<<< trailing-wrapped comments with fold, binpack(lots) and dangling
maxColumn = 100
indent.callSite = 2
align.preset = none
newlines.source = fold
includeCurlyBraceInSelectChains = true
comments.wrap = trailing
danglingParentheses.preset = true
binPack {
  unsafeDefnSite = oneline
  unsafeCallSite = oneline
  literalArgumentLists = true
  literalsExclude = []
  literalsIncludeSimpleExpr = true
}
===
object a {
  private def salesActivity(
      user_id: String,
      dept_id: Option[Int],
      catg_grp_id: Option[Int], // for store only
      catg_id: Option[Int],
      subcatg_id: Option[Int],
      brand_id: Option[Int],
      order_date: String,
      item_id: Long
  ) = SalesUserActivity(
    user_id,
    dept_id,
    catg_grp_id,
    catg_id,
    subcatg_id,
    brand_id,
    Some(dummyBrand),
    1f,
    1f,
    item_id,
    tenant,
    inid,
    catalog,
    channel,
    order_date.split("-")(0).toInt,
    order_date.split("-")(1).toInt,
    "v1",
    order_date
  )
}
>>>
object a {
  private def salesActivity(
      user_id: String, dept_id: Option[Int], catg_grp_id: Option[Int], // for store only
      catg_id: Option[Int], subcatg_id: Option[Int], brand_id: Option[Int], order_date: String,
      item_id: Long
  ) = SalesUserActivity(user_id, dept_id, catg_grp_id, catg_id, subcatg_id, brand_id,
    Some(dummyBrand), 1f, 1f, item_id, tenant, inid, catalog, channel,
    order_date.split("-")(0).toInt, order_date.split("-")(1).toInt, "v1", order_date)
}
<<< trailing-wrapped comments with fold, binpack(lots) and dangling
maxColumn = 100
indent.callSite = 2
align.preset = none
newlines.source = fold
includeCurlyBraceInSelectChains = true
comments.wrap = trailing
danglingParentheses.preset = true
binPack {
  unsafeCallSite = oneline
  literalArgumentLists = true
  literalsExclude = []
  literalsIncludeSimpleExpr = true
}
===
object a {
  private val impressionUniqueMetricsData = Seq(
    // out of range
    ImpUnique("2018-01-02", 102, Some("444"), Some(1), Some(2), Some(1), None, None, 2018, 1, ver), /*
     * aggimp3 */
  )
}
>>>
object a {
  private val impressionUniqueMetricsData = Seq(
    // out of range
    ImpUnique("2018-01-02", 102, Some("444"), Some(1), Some(2), Some(1), None, None, 2018, 1,
      ver) /* aggimp3 */
  )
}
<<< trailing-wrapped comments with fold, binpack=oneline
maxColumn = 29
indent.callSite = 2
align.preset = none
newlines.source = fold
includeCurlyBraceInSelectChains = true
comments.wrap = trailing
binPack.unsafeCallSite = oneline
===
object a {
  private val foo = Seq(
    // out of range
    Bar("2018-01-02", 1, ver), /*
     * baz */
  )
}
>>>
object a {
  private val foo = Seq(
    // out of range
    Bar("2018-01-02", 1,
      ver) /* baz */
  )
}
<<< wrapSingleLineMlcAsSlc, trailing
maxColumn = 41
comments.wrap = trailing
comments.wrapSingleLineMlcAsSlc = true
===
object a {
  // https://developers.google.com/foo/bar
  /*
   * https://developers.google.com/foo/bar */
}
>>>
object a {
  // https://developers.google.com/foo/bar
  // https://developers.google.com/foo/bar
}
<<< wrapSingleLineMlcAsSlc, standalone
maxColumn = 41
comments.wrap = standalone
comments.wrapSingleLineMlcAsSlc = true
===
object a {
  // https://developers.google.com/foo/bar
  /*
   * https://developers.google.com/foo/bar */
}
>>>
object a {
  // https://developers.google.com/foo/bar
  // https://developers.google.com/foo/bar
}
<<< trailing multiline comment indent
maxColumn = 45
comments.wrap = trailing
===
object a {
  case object Foo extends Bar("baz") /* qux =
   * xyz */
}
>>>
object a {
  case object Foo extends Bar("baz") /* qux =
   * xyz */
}
<<< #3493
object a {
  // Note: '\u000A' = '\n'
}
>>>
object a {
  // Note: '\u000A' = '\n'
}
