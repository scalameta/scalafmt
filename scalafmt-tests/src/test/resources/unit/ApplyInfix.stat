40 columns                              |
<<< no newline after binding (
js.Return(!(!({
genIsScalaJSObject(obj) &&
(( obj DOT "$classData") === depth) &&
genIsClassNameInAncestors(
    className,
    obj DOT "$classData")
})))
>>>
js.Return(!(!({
  genIsScalaJSObject(obj) &&
  ((obj DOT "$classData") === depth) &&
  genIsClassNameInAncestors(
      className,
      obj DOT "$classData")
})))
<<< force space on infix application arguments
opt[(Int, Int)]("range") hidden() action {}
>>>
opt[(Int, Int)](
    "range") hidden () action {}
<<< string concatenation
logger.warning("foooooooooooooo" +
"baaaaaaaaaaaaaar")
>>>
logger.warning(
    "foooooooooooooo" +
      "baaaaaaaaaaaaaar")
<<< string concatenation 2
logger.warning(a, "foooooooooooooo" +
           "baaaaaaaaaaaaaar")
>>>
logger.warning(a,
               "foooooooooooooo" +
                 "baaaaaaaaaaaaaar")
<<< bool and
logger.warning(a, "foooooooooooooo" &&
           "baaaaaaaaaaaaaar")
>>>
logger.warning(a,
               "foooooooooooooo" &&
                 "baaaaaaaaaaaaaar")
<<< and single arg
logger.warning("foooooooooooooo" &&
           "baaaaaaaaaaaaaar")
>>>
logger.warning(
    "foooooooooooooo" &&
      "baaaaaaaaaaaaaar")
<<< too many pluses + (state explosion)
a + b + c + d + e + f + g + h + i + j +
j + j + j + j + j + j + j + j   + j + j + j
>>>
a + b + c + d + e + f + g + h + i + j +
  j + j + j + j + j + j + j + j + j + j + j
<<< += sh"aa"
{
buf +=
  sh"${foo} aa"
  }
>>>
{
  buf +=
    sh"${foo} aa"
}
<<< &&
{
  buf &&
bb
}
>>>
{
  buf &&
  bb
}
<<< #701 infix indent
val x = project(
  version = 2
) settings (
  sharedSettings,
  foo := {
    bar.value
  },
  base

)
>>>
val x = project(
    version = 2
) settings (
    sharedSettings,
    foo := {
      bar.value
    },
    base
)
<<< #990 if/else indent
ctx.replace(
  additionalImports =
    "" ::
      (if (true) x
     else y)
)
>>>
ctx.replace(
    additionalImports = "" ::
      (if (true) x
       else y)
)
<<< #990 if/else indent 2
ctx.replace(
  additionalImports =
    "" ::
      foo.map { x =>
      x + 1
      }
)
>>>
ctx.replace(
    additionalImports = "" ::
      foo.map { x =>
        x + 1
      }
)
<<< right assoc
x ::
  y.map {x =>
  x + 1
   } ::
  z
>>>
x ::
  y.map { x =>
    x + 1
  } ::
  z
<<< simple expr
x ::
  y ::
  z
>>>
x ::
  y ::
  z
<<< start line
(x
 :: y
 :: z
)
>>>
(x
  :: y
  :: z)
<<< start line 2
(x :: x
 :: y :: y
 :: z
)
>>>
(x :: x
  :: y :: y
  :: z)
<<< pattern start line
1 match {
case x :: x
 :: y :: y
 :: z :: z =>
}
>>>
1 match {
  case x :: x
      :: y :: y
      :: z :: z =>
}
<<< type.apply start line
type x = (X
  :: Y
  :: Z)
>>>
type x = (X
  :: Y
  :: Z)
