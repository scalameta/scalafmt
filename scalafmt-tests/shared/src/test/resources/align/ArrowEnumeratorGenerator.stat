align.arrowEnumeratorGenerator = true
maxColumn = 38
<<< alignByArrowEnumeratorGenerator
for {
  x <- new Integer {
  def value = 2
  }
  y <- Int(2)
} yield x + y
>>>
for {
  x <- new Integer {
         def value = 2
       }
  y <- Int(2)
} yield x + y
<<< split long lines, with breaks
for {
  variable <-
    record.field.field1.map(_.toString)
  cond <-
    if (variable) doSomething
    else doAnything
} yield cond
>>>
for {
  variable <-
    record.field.field1.map(
      _.toString
    )
  cond <-
    if (variable) doSomething
    else doAnything
} yield cond
<<< split long lines, without breaks
for {
  variable <- record.field.field1.map(_.toString)
  cond <- if (variable) doSomething
    else doAnything
} yield cond
>>>
for {
  variable <- record.field.field1.map(
                _.toString
              )
  cond <- if (variable) doSomething
          else doAnything
} yield cond
<<< insert newlines to for if no newlines origin
for {
  variable <- record.field.field1.map(_.toString)
  cond <- if (variable) doSomething else doAnything
} yield cond
>>>
for {
  variable <- record.field.field1.map(
                _.toString
              )
  cond <- if (variable) doSomething
          else doAnything
} yield cond
<<< keep oneliners if they fits maxColumn
for {
  variable <- record.field
  cond <- doSomething
} yield cond
>>>
for {
  variable <- record.field
  cond <- doSomething
} yield cond
<<< insert newlines also for values
for {
  variable <- record.field.field1.map(_.toString)
  cond = if (variable) doSomething else doAnything
} yield cond
>>>
for {
  variable <- record.field.field1.map(
                _.toString
              )
  cond = if (variable) doSomething
         else doAnything
} yield cond
<<< body in braces on right side
for {
  x <- { if (condition) doSomething else doOtherThing }
} yield x
>>>
for {
  x <- {
    if (condition) doSomething
    else doOtherThing
  }
} yield x
<<< unicode
for {
  x ← new Integer {
  def value = 2
  }
  y ← Int(2)
  cond ← if (variable) doSomething else doAnything
} yield x + y
>>>
for {
  x ← new Integer {
        def value = 2
      }
  y ← Int(2)
  cond ← if (variable) doSomething
         else doAnything
} yield x + y
<<< fold
newlines.source=fold
align.arrowEnumeratorGenerator = true
===
for {
  x <- new Integer {
  def value = 2
  }
  y <- Int(2)
  cond <- if (variable) doSomething else doAnything
} yield x + y
>>>
for {
  x <- new Integer {
         def value = 2
       }
  y <- Int(2)
  cond <- if (variable) doSomething
          else doAnything
} yield x + y
<<< keep
newlines.source=keep
align.arrowEnumeratorGenerator = true
===
for {
  x <- new Integer {
  def value = 2
  }
  y <- Int(2)
  cond <- if (variable) doSomething else doAnything
} yield x + y
>>>
for {
  x <- new Integer {
         def value = 2
       }
  y <- Int(2)
  cond <- if (variable) doSomething
          else doAnything
} yield x + y
<<< keep with break
newlines.source=keep
align.arrowEnumeratorGenerator = true
===
for {
  cond <-
  if (variable) doSomething
  else doAnything
} yield x + y
>>>
for {
  cond <-
    if (variable) doSomething
    else doAnything
} yield x + y
<<< keep try without break
newlines.source=keep
align.arrowEnumeratorGenerator = true
===
for {
  cond <- try { Some(x) } catch { case _ => None }
  cond = try { Some(x) } catch { case _ => None }
} yield x + y
>>>
for {
  cond <- try { Some(x) }
          catch { case _ => None }
  cond = try { Some(x) }
         catch { case _ => None }
} yield x + y
<<< keep try with break
newlines.source=keep
align.arrowEnumeratorGenerator = true
===
for {
  cond <-
    try { Some(x) } catch { case _ => None }
  cond =
    try { Some(x) } catch { case _ => None }
} yield x + y
>>>
for {
  cond <-
    try { Some(x) }
    catch { case _ => None }
  cond =
    try { Some(x) }
    catch { case _ => None }
} yield x + y
<<< fold try without break
newlines.source=fold
align.arrowEnumeratorGenerator = true
===
for {
  cond <- try { Some(x) } catch { case _ => None }
  cond = try { Some(x) } catch { case _ => None }
} yield x + y
>>>
for {
  cond <- try { Some(x) }
          catch { case _ => None }
  cond = try { Some(x) }
         catch { case _ => None }
} yield x + y
<<< fold try with break
newlines.source=fold
align.arrowEnumeratorGenerator = true
===
for {
  cond <-
    try { Some(x) } catch { case _ => None }
  cond =
    try { Some(x) } catch { case _ => None }
} yield x + y
>>>
for {
  cond <- try { Some(x) }
          catch { case _ => None }
  cond = try { Some(x) }
         catch { case _ => None }
} yield x + y
<<< #5010 nested for
runner.dialect = scala3
indent.significant = 3
===
@main def main(): Unit =
  for
    _ <- Option(1)
    _ = for
      c <- Option(2)
      d <- Option(3)
    yield c + d
  yield ()
>>>
@main def main(): Unit =
  for
     _ <- Option(1)
     _ = for
            c <- Option(2)
            d <- Option(3)
         yield c + d
  yield ()
<<< #5010 nested try
runner.dialect = scala3
indent.significant = 3
===
@main def main(): Unit =
  for
    _ <- Option(1)
    _ = try
      Option(2)
    catch
      case _ => Option(3)
  yield ()
>>>
@main def main(): Unit =
  for
     _ <- Option(1)
     _ = try Option(2)
         catch case _ => Option(3)
  yield ()
<<< #5010 nested if
runner.dialect = scala3
indent.significant = 3
===
@main def main(): Unit =
  for
    _ <- Option(1)
    _ = if true then
      Option(2)
    else
      Option(3)
  yield ()
>>>
@main def main(): Unit =
  for
     _ <- Option(1)
     _ = if true then Option(2)
         else Option(3)
  yield ()
