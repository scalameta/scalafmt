maxColumn = 200 #to not disturb the output too much
rewrite {
  rules = [SortModifiers]
}
runner.dialect = Scala3
<<< default formatting of ADT
package test

sealed private[test] trait Test {
  protected def name: String
}

final private[test] object Tests {

  private final type T1 = Int
  final private type T2 = String

  final private implicit case object Test1 extends Test { def name: String = "Test1" }
  implicit private final case object Test2 extends Test { def name: String = "Test2" }
  final implicit private case object Test3 extends Test { def name: String = "Test3" }

  sealed abstract class TestSup(protected override val name: String) extends Test

  final class Test4(implicit final private val impl: String) extends Test {
    final protected implicit override lazy val name: String = impl
  }
}
>>>
package test

sealed private[test] trait Test {
  protected def name: String
}

final private[test] object Tests {

  final private type T1 = Int
  final private type T2 = String

  implicit final private case object Test1 extends Test { def name: String = "Test1" }
  implicit final private case object Test2 extends Test { def name: String = "Test2" }
  implicit final private case object Test3 extends Test { def name: String = "Test3" }

  sealed abstract class TestSup(override protected val name: String) extends Test

  final class Test4(implicit final private val impl: String) extends Test {
    implicit final override protected lazy val name: String = impl
  }
}
<<< default formatting of ADT â€” no changes
package test

sealed private[test] trait Test {
  protected def name: String
}

final private[test] object Tests {

  final private type T1 = Int
  final private type T2 = String

  implicit final private case object Test1 extends Test { def name: String = "Test1" }
  implicit final private case object Test2 extends Test { def name: String = "Test2" }
  implicit final private case object Test3 extends Test { def name: String = "Test3" }

  sealed abstract class TestSup(override protected val name: String) extends Test

  final class Test4(implicit final private val impl: String) extends Test {
    implicit final override protected lazy val name: String = impl
  }
}
>>>
package test

sealed private[test] trait Test {
  protected def name: String
}

final private[test] object Tests {

  final private type T1 = Int
  final private type T2 = String

  implicit final private case object Test1 extends Test { def name: String = "Test1" }
  implicit final private case object Test2 extends Test { def name: String = "Test2" }
  implicit final private case object Test3 extends Test { def name: String = "Test3" }

  sealed abstract class TestSup(override protected val name: String) extends Test

  final class Test4(implicit final private val impl: String) extends Test {
    implicit final override protected lazy val name: String = impl
  }
}
<<< open default
open implicit class Test()
>>>
implicit open class Test()
<<< transparent inline method
transparent inline def choose(b: Boolean): A = {
  if (b) { new A }
  else { new B }
}
>>>
transparent inline def choose(b: Boolean): A = {
  if (b) { new A }
  else { new B }
}
<<< infix method
override infix protected def choose(b: Boolean): A = new A
>>>
override protected infix def choose(b: Boolean): A = new A
