preset = default
newlines.afterCurlyLambda = keep

<<< Preserve newline in lambda call
def f = {
  something.call { x =>

    g(x)
  }
}
>>>
def f = {
  something.call { x =>

    g(x)
  }
}

<<< Preserve no newline in lambda call
def f = {
  something.call { x =>    g(x)
  }
}
>>>
def f = {
  something.call { x => g(x) }
}
<<< Preserve no empty line in lambda call
def f = {
  something.call { x =>
    g(x)
  }
}
>>>
def f = {
  something.call { x =>
    g(x)
  }
}

<<< Replace multiple newlines with a single newline when preserving
def f = {
  something.call { x =>


    g(x)
  }
}
>>>
def f = {
  something.call { x =>

    g(x)
  }
}
<<< #2822 keep with unfold
newlines.source=unfold
===
object O {
  something.map { x =>

    f(x)
  }

  something.map { x =>
    f(x)
  }

  something.map { x => f(x) }
}
>>>
object O {
  something.map { x =>

    f(x)
  }

  something.map { x =>
    f(x)
  }

  something.map { x =>
    f(x)
  }
}
<<< #2822 keep with fold
newlines.source=fold
===
object O {
  something.map { x =>

    f(x)
  }

  something.map { x =>
    f(x)
  }

  something.map { x => f(x) }
}
>>>
object O {
  something.map { x =>

    f(x)
  }

  something.map { x => f(x) }

  something.map { x => f(x) }
}
