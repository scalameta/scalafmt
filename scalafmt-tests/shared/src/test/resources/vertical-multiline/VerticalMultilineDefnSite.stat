maxColumn = 80
verticalMultiline = {
    atDefnSite = true
}
indent.defnSite = 2
<<< Work with indent.defnSite = 2
def format_![T <: Tree](code: String, foo: Int)(f: A => B, k: D)(implicit ev: Parse[T], ev2: EC): String
>>>
def format_![T <: Tree](
  code: String,
  foo: Int
)(f: A => B,
  k: D
)(implicit
  ev: Parse[T],
  ev2: EC
): String
<<< #1462
maxColumn = 91
===
object Test {

  def create(
    somethingInfo: foo.T = Something("my-something", Some("test-something"), "something", Some(Format("something", "something")),
      Some(something.Something("something", "something", "something", "something")))
  ): Unit = {
    w(foo)
  }

}
>>>
object Test {

  def create(
    somethingInfo: foo.T = Something(
      "my-something",
      Some("test-something"),
      "something",
      Some(Format("something", "something")),
      Some(something.Something("something", "something", "something", "something"))
    )
  ): Unit = {
    w(foo)
  }

}
<<< #2044
danglingParentheses.exclude = []
===
object a {
  final class Dummy[F[+_, +_]: BIOMonad: BIOPrimitives: Clock2](
    log: LogBIO[F]
  ) extends DIResource.LiftF(
    F.mkRef(Map.empty[Key, Item]).map(new Dummy.Impl(_))
  )
}
>>>
object a {
  final class Dummy[F[+_, +_]: BIOMonad: BIOPrimitives: Clock2](
    log: LogBIO[F]
  ) extends DIResource.LiftF(
        F.mkRef(Map.empty[Key, Item]).map(new Dummy.Impl(_))
      )
}
<<< #3509 1
verticalMultiline.arityThreshold = 5
verticalMultiline.newlineAfterOpenParen = true
===
object Log {
  def redactIds(s: String): String = s.replaceAll("\\d{5,}", "<redacted>")
}
>>>
object Log {
  def redactIds(s: String): String = s.replaceAll("\\d{5,}", "<redacted>")
}
<<< #3509 2
verticalMultiline.arityThreshold = 5
verticalMultiline.newlineAfterOpenParen = false
===
object Log {
  def redactIds(s: String): String = s.replaceAll("\\d{5,}", "<redacted>")
}
>>>
object Log {
  def redactIds(s: String): String = s.replaceAll("\\d{5,}", "<redacted>")
}
