
<<< One per line
import foo.bar

import kaz.bar
object a
>>>
import foo.bar

import kaz.bar
object a
<<< One per line, with docstring
import foo.bar
import kaz.bar
/**
 * Docstring
 */
object a
>>>
import foo.bar
import kaz.bar

/** Docstring
  */
object a
<<< Rename
import org.{A    => B}
object a
>>>
import org.{A => B}
object a
<<< scalajs imports
import scala.language.implicitConversions

import scala.collection.mutable

import java.{util => ju}

import org.scalajs.core.tools.sem._
import org.scalajs.core.tools.javascript._
import org.scalajs.core.tools.optimizer._
>>>
import scala.language.implicitConversions

import scala.collection.mutable

import java.{util => ju}

import org.scalajs.core.tools.sem._
import org.scalajs.core.tools.javascript._
import org.scalajs.core.tools.optimizer._
<<< import block
object a {
  import LowPrioGenBCodeCompat.genBCode._
  {
  initializeCoreBTypes()
  }
}
>>>
object a {
  import LowPrioGenBCodeCompat.genBCode._
  {
    initializeCoreBTypes()
  }
}
<<< break #101
import org.scalajs.dom.experimental.serviceworkers.{ServiceWorkerGlobalScope, ServiceWorkerRegistration}
>>>
import org.scalajs.dom.experimental.serviceworkers.{
  ServiceWorkerGlobalScope,
  ServiceWorkerRegistration
}
<<< break #101 short
import org.{Aaaaaa, GlobalScope, Registration}
>>>
import org.{
  Aaaaaa,
  GlobalScope,
  Registration
}
<<< break #101 short 2
import org.{Aaaa, Bbbbb, C, D, E, F, G, H, I, J, K, L}
>>>
import org.{
  Aaaa,
  Bbbbb,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L
}
<<< docstring: line after but not before [force]
docstrings.forceBlankLineBefore = true
===
package a.b.c
/**
 * docstring
 */

import d.e.f
>>>
package a.b.c

/** docstring
  */

import d.e.f
<<< docstring: line after but not before [no force]
docstrings.forceBlankLineBefore = false
===
package a.b.c
/**
 * docstring
 */

import d.e.f
>>>
package a.b.c
/** docstring
  */

import d.e.f
<<< rename/unimport (partial format:off 1)
indent.main = 4
===
object blah {
  // format: off
  import a.{
    // format: on
    foo => bar,
    zzzz => _,
    baz
  }
  // format is not off
  import a.{
    // format is not on
    foo => bar,
    zzzz => _,
    baz
  }
}
>>>
object blah {
  // format: off
  import a.{
    // format: on
        foo => bar,
        zzzz => _,
        baz
    }
    // format is not off
    import a.{
        // format is not on
        foo => bar,
        zzzz => _,
        baz
    }
}
<<< rename/unimport (partial format:off 2)
indent.main = 4
===
object blah {
  import a.{
    // format: off
    foo => bar,
    zzzz => _,
    // format: on
    baz
  }
  import a.{
    // format is not off
    foo => bar,
    zzzz => _,
    // format is not on
    baz
  }
}
>>>
object blah {
    import a.{
    // format: off
    foo => bar,
    zzzz => _,
    // format: on
        baz
    }
    import a.{
        // format is not off
        foo => bar,
        zzzz => _,
        // format is not on
        baz
    }
}
<<< long import, spans multiple lines
import scala.collection.BitSet, scala.collection.mutable.DefaultEntry, mutable.bt.SourceInside
import collection.mutable.ArrayBuffer, mutable.bt.SourceInside1
import collection.mutable.{
  ArrayBuffer,
  ListBuffer
}
>>>
import scala.collection.BitSet,
  scala.collection.mutable.DefaultEntry,
  mutable.bt.SourceInside
import collection.mutable.ArrayBuffer,
  mutable.bt.SourceInside1
import collection.mutable.{
  ArrayBuffer,
  ListBuffer
}
