
<<< Break first after =
object a {
  val A__________________a: Int = 123456789
}
>>>
object a {
  val A__________________a: Int =
    123456789
}
<<< Unindent after leaving statement
object a {
  val A__________________a: Int = 123456789
  val B__________________b: Int = 123456789
}
>>>
object a {
  val A__________________a: Int =
    123456789
  val B__________________b: Int =
    123456789
}
<<< indent at =
Split(
      ignoreIf =
      !fitsOnOneLine || isConfigStyle
      )
>>>
Split(
    ignoreIf =
      !fitsOnOneLine || isConfigStyle
)
<<< single line, exclude {} blocks
val fill = x match {
case ctx => 1
}
>>>
val fill = x match {
  case ctx => 1
}
<<< space before this, #175
val global: NirCodeGen. this.global.type
>>>
val global: NirCodeGen.this.global.type
<<< annot single line
@JSName("0") val _1: T1 = native
>>>
@JSName("0") val _1: T1 = native
<<< #356
val x: Int =
    1
>>>
val x: Int =
  1
<<< #506
val m.Term.New(
m.Template(Nil,
           Seq(mparent, bbbbb, cccccccdddsssssddddd),
           None)) =
  lapply.toMtree[m.Term.New]
>>>
val m.Term.New(
    m.Template(
        Nil,
        Seq(mparent,
            bbbbb,
            cccccccdddsssssddddd),
        None)) =
  lapply.toMtree[m.Term.New]
<<< deconstruct
val q"${t22: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int)}" =
  q"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)"
>>>
val q"${t22: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int)}" =
  q"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)"
<<< #941
val aaaaaaa, bbbbbbbb, cccccc, dddddddd, eeeeeeeee =
  1
>>>
val aaaaaaa, bbbbbbbb, cccccc,
    dddddddd, eeeeeeeee =
  1
<<< #941 you deserve bad indent
val aaaaaaa, bbbbbbbb, cccccc(
  1, 2, 3
  ), dddddddd(aaaaaa, bbbbbbb), eeeeeeeee =
  1
>>>
val aaaaaaa, bbbbbbbb, cccccc(
    1,
    2,
    3
), dddddddd(aaaaaa, bbbbbbb),
    eeeeeeeee =
  1
