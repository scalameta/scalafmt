maxColumn = 80
verticalMultilineAtDefinitionSite = true
continuationIndent.defnSite = 2
continuationIndent.extendSite = 0
newlines.afterImplicitKWInVerticalMultiline = true
newlines.beforeImplicitKWInVerticalMultiline = true

<<< should add a newline after implicit keyword in function definitions
def format_![T <: Tree](code: String, foo: Int)(f: A => B, k: D)(implicit ev: Parse[T], ev2: EC): String
>>>
def format_![T <: Tree](
  code: String,
  foo: Int
)(f: A => B,
  k: D
)(
  implicit
  ev: Parse[T],
  ev2: EC
): String

<<< should add a newline after implicit keyword in class definitions
final class UserProfile(name: String, age: Int, address: Address, profession: Profesion, school: School)(
  implicit ctx: Context, ec: Executor)
  extends Profile with UserSettings with SomethingElse
>>>
final class UserProfile(
  name: String,
  age: Int,
  address: Address,
  profession: Profesion,
  school: School
)(
  implicit
  ctx: Context,
  ec: Executor)
extends Profile
with UserSettings
with SomethingElse
  
<<< should work with an empty first param group
override def load()(implicit taskCtx: Context,
      ec: ExecutionContext
    ): Future[Seq[A] Or B]
>>>
override def load(
)(
  implicit
  taskCtx: Context,
  ec: ExecutionContext
): Future[Seq[A] Or B]

<<< should work with an empty non-first param group
override def load(code: String)()(implicit taskCtx: Context,
      ec: ExecutionContext
    ): Future[Seq[A] Or B]
>>>
override def load(
  code: String
)(
)(
  implicit
  taskCtx: Context,
  ec: ExecutionContext
): Future[Seq[A] Or B]

<<< should work without explicit parameter groups
implicit def pairEncoder[A, B](implicit aEncoder: CsvEncoder[A],
    bEncoder: CsvEncoder[B]
): CsvEncoder[(A, B)]
>>>
implicit def pairEncoder[A, B](
  implicit
  aEncoder: CsvEncoder[A],
  bEncoder: CsvEncoder[B]
): CsvEncoder[(A, B)]