rewrite.rules = [RedundantBraces]
rewrite.redundantBraces.maxLines = 1
rewrite.redundantBraces.stringInterpolation = true
<<< basic
object a {
  def x(i: Int): Int = {
    2
  }

  def y(i: Int): Int = {
    3
  }
  def z(i: Int): Int = {
    4
  }
}
>>>
object a {
  def x(i: Int): Int =
    2

  def y(i: Int): Int =
    3
  def z(i: Int): Int =
    4
}
<<< respect max lines
object a {
  def x(i: Int): Int = {
    List.filter { x =>
      x > 1
    }
  }
}
>>>
object a {
  def x(i: Int): Int = {
    List.filter { x =>
      x > 1
    }
  }
}
<<< single line block
object a {
  def x(i: Int): Int = { 2 }
  def y(i: Int): Int = { 3 }
}
>>>
object a {
  def x(i: Int): Int = 2
  def y(i: Int): Int = 3
}
<<< empty expression
object a {
  def x: Unit = { }
}
>>>
object a {
  def x: Unit = {}
}
<<< right brace on same line as expression
object a {
  def x(i: Int): Int = {
    2 }
  def y(i: Int): Int = { 3 }
}
>>>
object a {
  def x(i: Int): Int =
    2
  def y(i: Int): Int = 3
}
<<< has comment
object a {
  def x(i: Int): Int = { // comment
    2
  }
}
>>>
object a {
  def x(i: Int): Int = // comment
    2
}
<<< has comment 2
object a {
  def x(i: Int): Int = {
    // comment
    2
  }
}
>>>
object a {
  def x(i: Int): Int =
    // comment
    2
}
<<< multiple stats
object a {
  def x(i: Int) = {
    2
    2
  }
}
>>>
object a {
  def x(i: Int) = {
    2
    2
  }
}
<<< procedure syntax
object a {
  def main(args: Seq[Int]) {
    2
  }
}
>>>
object a {
  def main(args: Seq[Int]) {
    2
  }
}
<<< procedure syntax 2
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
>>>
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
<<< no return type
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
>>>
object a {
  def main(args: Seq[Int] = 2) {
    2
  }
}
<<< fix your own nested blox
object a {
  def x: Int = {
    { // comment
      2
    } // end
  }
}
>>>
object a {
  def x: Int = {
    { // comment
      2
    } // end
  }
}
<<< redundant enclosing braces in str interpolation
object a {
  s"Hello ${value}"
}
>>>
object a {
  s"Hello $value"
}
<<< not redundant enclosing braces in str interpolation
s"Hello ${foo}bar"
>>>
s"Hello ${foo}bar"
<<< enclosing braces in str interpolation
s"Hello ${d.toString}"
>>>
s"Hello ${d.toString}"
<<< empty str interpolation
s""
>>>
s""
<<< no braces in str interpolation
s"$a"
>>>
s"$a"
<<< two args no braces in str interpolation
s"$a$b"
>>>
s"$a$b"
<<< spaces before and after arg no braces in str interpolation
s" $a "
>>>
s" $a "
<<< special symbol after arg no braces in str interpolation
s"$a-"
>>>
s"$a-"
<<< number after arg in str interpolation
{
  s"${a} 1"
}
>>>
{
  s"${a} 1"
}
<<< underscore and number after arg in str interpolation
s"${a}_2"
>>>
s"${a}_2"