40 columns                              |
<<< With curly
if (true) {
      println(aaaaaaaaaaaaaaaaaaaaaaaaaa)
}
>>>
if (true) {
  println(aaaaaaaaaaaaaaaaaaaaaaaaaa)
}
<<< Long if condition
if (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &&
bbbbbbbbbbbbbbbbbb)
  println("a")
>>>
if (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &&
    bbbbbbbbbbbbbbbbbb)
  println("a")
<<< Long if condition with inline comment
if (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &&
      bbbbbbbbbbbbbbbbbb) // comment
  println("a")
>>>
if (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &&
    bbbbbbbbbbbbbbbbbb) // comment
  println("a")
<<< If assignment
val newColumn = if(split == Newline) newIndent
                else column + split.length
>>>
val newColumn =
  if (split == Newline) newIndent
  else column + split.length
<<< Egyptian curlies
if (optimalAt.contains(tok.left)) {
println("hello") }
>>>
if (optimalAt.contains(tok.left)) {
  println("hello")
}
<<< No-Egyptian curlies
if (optimalAt.contains(tok.left))
{
println("hello") }
>>>
if (optimalAt.contains(tok.left)) {
  println("hello")
}
<<< if else throw
if (result.isEmpty) true else throw new TestFailedException("")
>>>
if (result.isEmpty) true
else throw new TestFailedException("")
<<< assignment with paren
val newColumn = tok.length + (
if(split == Newline) newIndent
else column + split.length
)
>>>
val newColumn = tok.length + (
    if (split == Newline) newIndent
    else column + split.length
)
<<< no newline
val policy =
 if (right) SingleLineBlock(close)
 else   NoPolicy
>>>
val policy =
  if (right) SingleLineBlock(close)
  else NoPolicy
<<< bang ! binds to right
if ((gets2x(tok) ||
lines(tok.between) > 1) &&
     !(isDocstring(left) && between)) 1
>>>
if ((gets2x(tok) ||
    lines(tok.between) > 1) &&
    !(isDocstring(left) && between)) 1
<<< == unary nosplit literal, scalameta/scalameta#344
if   (firstNewline == -1) tokLength
>>>
if (firstNewline == -1) tokLength
<<< Gimme newline
  if (isBracket)   Constants.BracketPenalty
  else 0
>>>
if (isBracket) Constants.BracketPenalty
else 0
<<< Tuple body is OK
if (left.is[Interpolation.Start])
  (StateColumn,
  matchingParentheses())
>>>
if (left.is[Interpolation.Start])
  (StateColumn, matchingParentheses())
<<< single line
if (true) 1  else 2
>>>
if (true) 1 else 2
<<< no single line
if (true) 1
  else 2
>>>
if (true) 1
else 2
<<< if/else
object Bar {
  if (cond) a else {
    // body
  }
}
>>>
object Bar {
  if (cond) a
  else {
    // body
  }
}
