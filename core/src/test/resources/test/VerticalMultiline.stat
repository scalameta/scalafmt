verticalMultilineAtDefinitionSite = true
maxColumn = 80
continuationIndent.extendSite = 2
<<< curried function over maxColumn
def format_![T <: Tree](code: String, foo: Int)(f: A => B, k: D)(implicit ev: Parse[T], ev2: EC): String
>>>
def format_![T <: Tree](
    code: String,
    foo: Int
  )(f: A => B,
    k: D
  )(implicit ev: Parse[T],
    ev2: EC
  ): String

<<< curried function under maxColumn
def format_![T <: Tree](code: String)(f: A => B)(implicit ev: Parse[T]): String
>>>
def format_![T <: Tree](code: String)(f: A => B)(implicit ev: Parse[T]): String

<<< small multi-line functions should fit in one line
def format_![T <: Tree](
    code: String)(
    f: A => B)
    (implicit ev: Parse[T]): String
>>>
def format_![T <: Tree](code: String)(f: A => B)(implicit ev: Parse[T]): String

<<< curried function mixed style 1
def format_![T <: Tree](
    code: String,
    code2: String
  )(implicit ev: Parse[T], ex: D): String = 1
>>>
def format_![T <: Tree](
    code: String,
    code2: String
  )(implicit ev: Parse[T],
    ex: D
  ): String = 1

<<< curried function mixed style 2
def format_![T <: Tree](code: String, foo: Int)(
  f: A => B
  )(implicit ev: Parse[T],
  ev2: EC)
  : String
>>>
def format_![T <: Tree](
    code: String,
    foo: Int
  )(f: A => B
  )(implicit ev: Parse[T],
    ev2: EC
  ): String

<<< should work with comments
def format_![T <: Tree](
    code: String, // The code!
    code2: String
  )(implicit ev: Parse[T], // The Parser!!! Some very long comment that goes over limit
  ex: D): String = 1
>>>
def format_![T <: Tree](
    code: String, // The code!
    code2: String
  )(implicit ev: Parse[T], // The Parser!!! Some very long comment that goes over limit
    ex: D
  ): String = 1

<<< should not modify into single line if it has comments
def format_!(
    code: String, // The code!
    code2: String
  ): String = 1
>>>
def format_!(
    code: String, // The code!
    code2: String
  ): String = 1

<<< should work with defaulted method
def format_![T <: Tree](
  name: Name,
  code: String = Defaults.code, updatedAt: Instant = Instant.now(),
  user: User = new User { def someFunc(): RT = () },
  createdAt: Instant = Default.getInstant(a)(b))
  (implicit ev: Parse[T],
  ev2: EC)
  : String
>>>
def format_![T <: Tree](
    name: Name,
    code: String = Defaults.code,
    updatedAt: Instant = Instant.now(),
    user: User = new User { def someFunc(): RT = () },
    createdAt: Instant = Default.getInstant(a)(b)
  )(implicit ev: Parse[T],
    ev2: EC
  ): String

<<< should affect classes
final class UserProfile(name: String, age: Int, address: Address, profession: Profesion, school: School)(
  implicit ctx: Context, ec: Executor)
  extends Profile with UserSettings with SomethingElse
>>>
final class UserProfile(
    name: String,
    age: Int,
    address: Address,
    profession: Profesion,
    school: School
  )(implicit ctx: Context,
    ec: Executor)
  extends Profile
  with UserSettings
  with SomethingElse

<<< should work with an empty first param group
override def load()(implicit taskCtx: Context,
      ec: ExecutionContext
    ): Future[Seq[A] Or B]
>>>
override def load(
  )(implicit taskCtx: Context,
    ec: ExecutionContext
  ): Future[Seq[A] Or B]

<<< should work with an empty non-first param group
override def load(code: String)()(implicit taskCtx: Context,
      ec: ExecutionContext
    ): Future[Seq[A] Or B]
>>>
override def load(
    code: String
  )(
  )(implicit taskCtx: Context,
    ec: ExecutionContext
  ): Future[Seq[A] Or B]
