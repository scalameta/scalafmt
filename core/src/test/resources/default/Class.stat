80 columns                                                                     |
<<< Long line
class Formatter(style: ScalaStyle, tree: Tree, toks: Array[FormatToken], statementStarts: Set[Token], owners: Map[Token, Tree])
>>>
class Formatter(style: ScalaStyle,
                tree: Tree,
                toks: Array[FormatToken],
                statementStarts: Set[Token],
                owners: Map[Token, Tree])
<<< Really really long.
case class State(
    cost: Int,
    policy: Decision => Decision,
    splits: Vector[Split],
    indentation: Int,
    indents: Vector[Push],
    column: Int) extends Ordered[State] with ScalaFmtLogger
>>>
case class State(cost: Int,
                 policy: Decision => Decision,
                 splits: Vector[Split],
                 indentation: Int,
                 indents: Vector[Push],
                 column: Int)
    extends Ordered[State]
    with ScalaFmtLogger
<<< With targs
case class Indent[ T <: Length] (length: T, expire: Token, expiresAt: ExpiresOn)
>>>
case class Indent[T <: Length](length: T, expire: Token, expiresAt: ExpiresOn)
<<< newline extends is cheapest
case class CaseMissingArrow(tree: Case) extends Error(
      s"Missing => in case: \n$tree")
>>>
case class CaseMissingArrow(tree: Case)
    extends Error(s"Missing => in case: \n$tree")
<<< newline extends is cheapest 2
class BestFirstSearch(style: ScalaStyle, tree: Tree, range: Set[Range])
        extends ScalaFmtLogger
>>>
class BestFirstSearch(style: ScalaStyle, tree: Tree, range: Set[Range])
    extends ScalaFmtLogger
<<< curried defn.class
class Fmt[T <: Tree](code: String, a: Int, bbbbbbbbbbbbbbbbbbbbbbbbbbb: Int)(implicit ev: Parse[T])
>>>
class Fmt[T <: Tree](code: String, a: Int, bbbbbbbbbbbbbbbbbbbbbbbbbbb: Int)(
    implicit ev: Parse[T])
<<< type params
final class TypedArrayBufferOps[ // scalastyle:ignore
        TypedArrayType <: TypedArray[_, TypedArrayType]](
    val buffer: Buffer) extends AnyVal
>>>
final class TypedArrayBufferOps[ // scalastyle:ignore
    TypedArrayType <: TypedArray[_, TypedArrayType]](val buffer: Buffer)
    extends AnyVal
<<< template curly #100
class MediaStream() extends EventTarget {

  /**
    */
  val ended: Boolean = js.native
}
>>>
class MediaStream() extends EventTarget {

  /**
    */
  val ended: Boolean = js.native
}
<<< secondary constructor #110
class ClipboardEvent(`type`: String) extends Event {
  @deprecated("Use the overload with a ClipboardEventInit instead.", "0.8.1")
  def this(`type`: String) = this(`type`)
  }
>>>
class ClipboardEvent(`type`: String) extends Event {
  @deprecated("Use the overload with a ClipboardEventInit instead.", "0.8.1")
  def this(`type`: String) = this(`type`)
}
<<< visibility modifier and ctor params #106
 class WebGLFramebuffer private () extends js.Object
>>>
class WebGLFramebuffer private () extends js.Object
<<< Type.Apply is regular application #111
@js.native
class MutationObserver(callback: js.Function2[js.Array[MutationRecord], MutationObserver, _])  extends js.Object
>>>
@js.native
class MutationObserver(
    callback: js.Function2[js.Array[MutationRecord], MutationObserver, _])
    extends js.Object
<<< [] is expensive #96
object RsaHashedImportParams {
  @inline
  def apply(name: String, hash: HashAlgorithmIdentifier): RsaHashedImportParams =
    js.Dynamic.literal(name = name, hash = hash.asInstanceOf[js.Any]).asInstanceOf[RsaHashed]
}
>>>
object RsaHashedImportParams {
  @inline
  def apply(name: String,
            hash: HashAlgorithmIdentifier): RsaHashedImportParams =
    js.Dynamic
      .literal(name = name, hash = hash.asInstanceOf[js.Any])
      .asInstanceOf[RsaHashed]
}
<<< no 2x newlines unless necessary
object Result {
      case object Foo extends C
      case object Bar extends C
      case object Kaz extends C
}
>>>
object Result {
  case object Foo extends C
  case object Bar extends C
  case object Kaz extends C
}
<<< force newline before extends #163
class NumberFormat(locales: String | js.Array[String],
                   options: js.UndefOr[NumberFormatOptions]) extends Object {
     val x = 1
     }
>>>
class NumberFormat(locales: String | js.Array[String],
                   options: js.UndefOr[NumberFormatOptions])
    extends Object {
  val x = 1
}
<<< extends floating #276
final case class Manifest(
    name: String,
    schemaVersion: Int = 1
)
    extends SchemaManifest
>>>
final case class Manifest(
    name: String,
    schemaVersion: Int = 1
) extends SchemaManifest
<<< space after scope #262
final class Using[A] private[js](val x: A) extends AnyVal
>>>
final class Using[A] private[js] (val x: A) extends AnyVal
<<< space after protected scope #262
final class Using[A] protected[js](val x: A) extends AnyVal
>>>
final class Using[A] protected[js] (val x: A) extends AnyVal
<<< comment inside middle of type parameter #264
final class TypedArrayBufferOps[ // scalastyle:ignore
    TypedArrayType <: TypedArray[_, TypedArrayType]](
   val buffer: Buffer) extends AnyVal {
???
   }
>>>
final class TypedArrayBufferOps[ // scalastyle:ignore
    TypedArrayType <: TypedArray[_, TypedArrayType]](val buffer: Buffer)
    extends AnyVal {
  ???
}
