80 columns                                                                     |
<<< resolveLocalDef
    def withDedicatedVar: Unit = {
      def doBuildInner = {
        buildInner({ tinner =>
            tinner match {
              case _ =>
                rhsSideEfs match {
                  case _ =>  cont(PbreTransBlock(rhsSideEffects :: Nil, tinner))
                }
              }
        })
      }
    }
>>>
def withDedicatedVar: Unit = {
  def doBuildInner = {
    buildInner({ tinner =>
      tinner match {
        case _ =>
          rhsSideEfs match {
            case _ => cont(PbreTransBlock(rhsSideEffects :: Nil, tinner))
          }
      }
    })
  }
}
<<< missing 2 indent #209
{{ {
 preloads.foreach{p =>
      cache.getOrElseUpdate(p,
        futureStreams.map{r => r.streams.get(p)})
    }
    }}}
>>>
{
  {
    {
      preloads.foreach { p =>
        cache.getOrElseUpdate(p, futureStreams.map { r =>
          r.streams.get(p)
        })
      }
    }
  }
}
<<< nested lambdas #195
(excty, { focus: Focus =>
      val enter = symopt.map { sym =>
        val cast = focus withOp Op.As(excty, exc.value)
        curEnv.enter(sym, cast.value)
        cast
      }.getOrElse(focus)
      val begin = enter withOp Nrt.call(Nrt.begin_catch, excwrap.value)
      val res   = genExpr(body, begin)
      val end   = res withOp Nrt.call(Nrt.end_catch)
      end withValue res.value
    })
>>>
(excty, { focus: Focus =>
  val enter = symopt.map { sym =>
    val cast = focus withOp Op.As(excty, exc.value)
    curEnv.enter(sym, cast.value)
    cast
  }.getOrElse(focus)
  val begin = enter withOp Nrt.call(Nrt.begin_catch, excwrap.value)
  val res = genExpr(body, begin)
  val end = res withOp Nrt.call(Nrt.end_catch)
  end withValue res.value
})
<<< SKIP intellij bug
class ScProjectionType private () {
  def isAliasTypeInner = {
      x match {
        case ta: ScTypeAlias => //higher kind case
            typesCallSubstitutor(
            ta.typeParameters.map(tp => (tp.name, ScalaPsiUtil.getPsiElementId(tp))),
            ta.typeParameters.map(tp => {
              args = ScExistentialArgument()
              ScTypeVariable(name)
            }))
      }
    }
  }

>>>
class ScProjectionType private () {
  def isAliasTypeInner = {
    x match {
      case ta: ScTypeAlias => //higher kind case
        typesCallSubstitutor(
            ta.typeParameters.map(tp =>
                  (tp.name, ScalaPsiUtil.getPsiElementId(tp))),
            ta.typeParameters.map(tp => {
              args += new ScExistentialArgument()
              ScTypeVariable(name)
            }))
    }
  }
}
<<< SKIP #357 single line lambda
def foo(x: Int) = x match {
    case 1 => (y: Int) => y
    case _ => (y: Int) => -y
  }
>>>
def foo(x: Int) = x match {
  case 1 => (y: Int) => y
  case _ => (y: Int) => -y
}
<<< #357 break lambda
def foo(x: Int) = x match {
    case 1 =>
    (y: Int) => y
    case _ =>
    (y: Int) => -y
  }
>>>
def foo(x: Int) = x match {
  case 1 =>
    (y: Int) =>
      y
  case _ =>
    (y: Int) =>
      -y
}
<<< ugly but you gotta fix your DSL yourself.
{
rule {
    capture((1 to 11).times(DIGIT)) ~>(s =>
           math.min(s.toLong, Int.MaxValue)) ~ zeroOrMore(DIGIT) ~ OWS
 }
 }
>>>
{
  rule {
    capture((1 to 11).times(DIGIT)) ~> (s =>
                                          math.min(s.toLong, Int.MaxValue)) ~ zeroOrMore(
        DIGIT) ~ OWS
  }
}
<<< SKIP y u break line? Answer: Because optimizer.recurseOnBlocks
{
  def foo =
    T({ a =>
      valueSort.map {
        vs =>
          vs match {
            case ordser: OrderedSerialization[V1] =>
              Grouped.getBoxFnAndOrder[V1](ordser, fd)
              val valueF = new Fields("value")
              val ts2 = tupleSetter
                .asInstanceOf[TupleSetter[(K, Boxed[V1])]]
                .contraMap { kv1: (K, V1) =>
                  (kv1._1, boxfn(kv1._2))
                }
              (Some(valueF), ts2)
          }
      }
    })
}
>>>
{
}
