style = intellij
maxColumn = 40
continuationIndent.callSite = 4
<<< single line still works
function(aaaaaaaa, bbbbbbbb)
>>>
function(aaaaaaaa, bbbbbbbb)
<<< gimme dangling
function(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
         bbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaa)
>>>
function(
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
    bbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaa
)
<<< one arg per lin
object Object {
  val x = function(
      a1234567,
      b1234567,
      c1234567,
      d1234567)
  val y = 2 // indented correctly
}
>>>
object Object {
  val x = function(
      a1234567,
      b1234567,
      c1234567,
      d1234567
  )
  val y = 2 // indented correctly
}
<<< double nest
object a {
  function( function( aaaaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaaaaaaaaaa ), aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa )
}
>>>
object a {
  function(
      function(
          aaaaaaaaaaaaaaaaaaaaaa,
          aaaaaaaaaaaaaaaaaaaaaa
      ),
      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  )
}
<<< compiler
new Compiler(
    primitives.opti___________ons.has( "primitives" ),
    minify.options.has("minify"),
    preserve.options.has("preserve"),
    liveAnalysis.check( options.has("live"), options.has("analysis") ),
    multi.options.has("multi"),
    sourceMap.options.hasNot( "source-map" )
);
>>>
new Compiler(
    primitives.opti___________ons
      .has("primitives"),
    minify.options.has("minify"),
    preserve.options.has("preserve"),
    liveAnalysis.check(
        options.has("live"),
        options.has("analysis")
    ),
    multi.options.has("multi"),
    sourceMap.options.hasNot(
        "source-map"
    )
);
<<< must not use formatter 2
val result = service
  .something( param1, param2, param3, param4 )
  .map(transform)
>>>
val result = service
  .something(
      param1,
      param2,
      param3,
      param4
  )
  .map(transform)
<<< mix kebab
object a {
  function( function( function(a, b), function(c, d) ) )
}
>>>
object a {
  function(
      function(
          function(a, b),
          function(c, d)
      )
  )
}
<<< No config style
function(
  a,
  b
)
>>>
function(a, b)
<<< #285 single arg
{{{
      mediator.expectMsg(PubSubMediator.Publish(
              className[FlowEvent],
              FlowAdded(FlowDescriptor("akka", "Akka"))
          ))
}}}
>>>
{
  {
    {
      mediator.expectMsg(
          PubSubMediator.Publish(
              className[FlowEvent],
              FlowAdded(
                  FlowDescriptor(
                      "akka",
                      "Akka"
                  )
              )
          )
      )
    }
  }
}
<<< #325
mediator.expectMsg(PubSubMediator.Publish(
  className[MessageEvent],
  MessageAdded(`flowName`, Message("Akka!", time))
))
>>>
mediator.expectMsg(
    PubSubMediator.Publish(
        className[MessageEvent],
        MessageAdded(
            `flowName`,
            Message("Akka!", time)
        )
    )
)
<<< #325 exclude blocks
    Props(new Actor {
      context.stop(self)
      def receive = Actor.emptyBehavior
    })
>>>
Props(new Actor {
  context.stop(self)
  def receive = Actor.emptyBehavior
})
<<< #325 exclude blocks 2
    Props(new Actor {
      context.stop(self)
      def receive = Actor.emptyBehavior
    }, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(bb, c))
>>>
Props(
    new Actor {
      context.stop(self)
      def receive = Actor.emptyBehavior
    },
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(
        bb,
        c
    )
)
