80 columns                                                                     |
<<< scalajs 1
private def genApplyForSym(minArgc: Int, hasRestParam: Boolean,
    sym: Symbol): js.Tree = {
  if (isScalaJSDefinedJSClass(currentClassSym) &&
      sym.owner != currentClassSym.get) {
    genApplyForSymJSSuperCall(minArgc, hasRestParam, sym)
  } else {
    genApplyForSymNonJSSuperCall(minArgc, sym)
  }
}
>>>
private def genApplyForSym(minArgc: Int, hasRestParam: Boolean,
    sym: Symbol): js.Tree = {
  if (isScalaJSDefinedJSClass(currentClassSym) &&
      sym.owner != currentClassSym.get) {
    genApplyForSymJSSuperCall(minArgc, hasRestParam, sym)
  } else {
    genApplyForSymNonJSSuperCall(minArgc, sym)
  }
}
<<< js emitter
val createAsStat = if (semantics.asInstanceOfs == Unchecked) {
        js.Skip()
      } else {
        envFieldDef("as", className,
          js.Function(List(objParam), js.Return(className match {
            case Definitions.ObjectClass =>
              obj
            case _ =>
              val throwError = {
                genCallHelper("throwClassCastException",
                    obj, js.StringLiteral(displayName))
              }
              if (className == RuntimeNothingClass) {
                // Always throw for .asInstanceOf[Nothing], even for null
                throwError
              } else {
                js.If(js.Apply(envField("is", className), List(obj)) ||
                    (obj === js.Null()), {
                  obj
                }, {
                  throwError
                })
              }
        })))
      }
>>>
val createAsStat =
  if (semantics.asInstanceOfs == Unchecked) {
    js.Skip()
  } else {
    envFieldDef("as",
                className,
                js.Function(List(objParam), js.Return(className match {
                  case Definitions.ObjectClass => obj
                  case _ =>
                    val throwError = {
                      genCallHelper("throwClassCastException",
                                    obj,
                                    js.StringLiteral(displayName))
                    }
                    if (className == RuntimeNothingClass) {
                      // Always throw for .asInstanceOf[Nothing], even for null
                      throwError
                    } else {
                      js.If(js.Apply(envField("is", className), List(obj)) || (
                              obj === js.Null()), {
                              obj
                            }, {
                              throwError
                            })
                    }
                })))
  }
<<< processOptions
  def processOptions(): Unit = {
      if (option.startsWith("relSourceMap:")) {
        val uriStr = option.stripPrefix("relSourceMap:")
        try { relSourceMap = Some(new URI(uriStr)) }
        catch {
          case e: URISyntaxException => error(s"$uriStr is not a valid URI")
        }
      } else {
        error("Option not understood: " + option)
      }
  }
>>>
def processOptions(): Unit = {
  if (option.startsWith("relSourceMap:")) {
    val uriStr = option.stripPrefix("relSourceMap:")
    try { relSourceMap = Some(new URI(uriStr)) } catch {
      case e: URISyntaxException => error(s"$uriStr is not a valid URI")
    }
  } else {
    error("Option not understood: " + option)
  }
}
<<< js plugin
  private def scalaJSStageSettings = Seq(
      usesScalaJSLinkerTag in key := {
        Tags
      },

      // Prevent this linker from being used concurrently
      concurrentRestrictions in Global +=
        Tags.limit((usesScalaJSLinkerTag in key).value, 1)

)
>>>
private def scalaJSStageSettings =
  Seq(usesScalaJSLinkerTag in key := {
        Tags
      },
      // Prevent this linker from being used concurrently
      concurrentRestrictions in Global += Tags.limit((
        usesScalaJSLinkerTag in key).value, 1))
<<< testFilter
  val testFilter: String => Boolean = {
    options.testFilter match {
      case UnknownTests => { absPath =>
        !blacklistedTestFileNames.contains(absPath) &&
        !whitelistedTestFileNames.contains(absPath) &&
        !buglistedTestFileNames.contains(absPath)
      }
    }
  }
>>>
val testFilter: String => Boolean = {
  options.testFilter match {
    case UnknownTests => { absPath =>
        !blacklistedTestFileNames.contains(absPath) &&
        !whitelistedTestFileNames.contains(absPath) && !buglistedTestFileNames
          .contains(absPath)
      }
  }
}
<<< testFilter inline comment
  options.testFilter match {
    case UnknownTests => // inline comment
        !blacklistedTestFileNames.contains(absPath) &&
        !whitelistedTestFileNames.contains(absPath) && !buglistedTestFileNames
          .contains(absPath)
  }
>>>
options.testFilter match {
  case UnknownTests => // inline comment
    !blacklistedTestFileNames.contains(absPath) && !whitelistedTestFileNames
      .contains(absPath) && !buglistedTestFileNames.contains(absPath)
}
<<< callStatement genjscode
          callStatement = js.If(genIsInstanceOf(callTrg, rtClass.tpe), {
            if (implMethodSym.owner == ObjectClass) {
              // If the method is defined on Object, we can call it normally.
              genApplyMethod(callTrg, implMethodSym, arguments)
            } else {
              if (rtClass == StringClass) {
                val (rtModuleClass, methodIdent) =
                  encodeRTStringMethodSym(implMethodSym)
                val retTpe = implMethodSym.tpe.resultType
                val castCallTrg = fromAny(callTrg, StringClass.toTypeConstructor)
                val rawApply = genApplyMethod(
                    genLoadModule(rtModuleClass),
                    methodIdent,
                    castCallTrg :: arguments,
                    toIRType(retTpe))
                // Box the result of the implementing method if required
                if (isPrimitiveValueType(retTpe))
                  makePrimitiveBox(rawApply, retTpe)
                else
                  rawApply
              } else {
                val reflBoxClassPatched = {
                  def isIntOrLongKind(kind: TypeKind) = kind match {
                    case _:INT | LONG => true
                    case _            => false
                  }
                  if (rtClass == BoxedDoubleClass &&
                      toTypeKind(implMethodSym.tpe.resultType) == DoubleKind &&
                      isIntOrLongKind(toTypeKind(sym.tpe.resultType))) {
                    // This must be an Int, and not a Double
                    IntegerReflectiveCallClass
                  } else {
                    reflBoxClass
                  }
                }
                val castCallTrg =
                  fromAny(callTrg,
                      reflBoxClassPatched.primaryConstructor.tpe.params.head.tpe)
                val reflBox = genNew(reflBoxClassPatched,
                    reflBoxClassPatched.primaryConstructor, List(castCallTrg))
                genApplyMethod(
                    reflBox,
                    proxyIdent,
                    arguments,
                    jstpe.AnyType)
              }
            }
          }, { // else
            callStatement
          })(jstpe.AnyType)
>>>
callStatement = js.If(genIsInstanceOf(callTrg, rtClass.tpe), {
  if (implMethodSym.owner == ObjectClass) {
    // If the method is defined on Object, we can call it normally.
    genApplyMethod(callTrg, implMethodSym, arguments)
  } else {
    if (rtClass == StringClass) {
      val (rtModuleClass, methodIdent) = encodeRTStringMethodSym(implMethodSym)
      val retTpe = implMethodSym.tpe.resultType
      val castCallTrg = fromAny(callTrg, StringClass.toTypeConstructor)
      val rawApply = genApplyMethod(genLoadModule(rtModuleClass),
                                    methodIdent,
                                    castCallTrg :: arguments,
                                    toIRType(retTpe))
      // Box the result of the implementing method if required
      if (isPrimitiveValueType(retTpe))
        makePrimitiveBox(rawApply, retTpe)
      else rawApply
    } else {
      val reflBoxClassPatched = {

        def isIntOrLongKind(kind: TypeKind) =
          kind match {
            case _: INT | LONG => true
            case _ => false
          }
        if (rtClass == BoxedDoubleClass &&
            toTypeKind(implMethodSym.tpe.resultType) == DoubleKind &&
            isIntOrLongKind(toTypeKind(sym.tpe.resultType))) {
          // This must be an Int, and not a Double
          IntegerReflectiveCallClass
        } else {
          reflBoxClass
        }
      }
      val castCallTrg =
        fromAny(callTrg,
                reflBoxClassPatched.primaryConstructor.tpe.params.head.tpe)
      val reflBox = genNew(reflBoxClassPatched,
                           reflBoxClassPatched.primaryConstructor,
                           List(castCallTrg))
      genApplyMethod(reflBox,
                     proxyIdent,
                     arguments,
                     jstpe.AnyType)
    }
  }
}, {
  // else
  callStatement
})(jstpe.AnyType)
<<< Infinite recursion?
        val ctorParamDefs = usedCtorParams map { p =>
          // in the apply method's context
          js.ParamDef(encodeLocalSym(p)(p.pos), toIRType(p.tpe),
              mutable = false, rest = false)(p.pos)
        }
>>>
val ctorParamDefs =
  usedCtorParams map { p =>
  // in the apply method's context
  js.ParamDef(encodeLocalSym(p)(p.pos),
              toIRType(p.tpe),
              mutable = false,
              rest = false)(p.pos)
  }
<<< single arg block
      withNewLocalNameScope {
          if (isThisFunction) {
            val thisParam :: actualParams = patchedParams
            js.Closure(
                ctorParamDefs,
                actualParams,
                js.Block(
                    js.VarDef(thisParam.name, thisParam.ptpe, mutable = false,
                        js.This()(thisParam.ptpe)(thisParam.pos))(thisParam.pos),
                    patchedBody),
                capturedArgs)
          } else {
            js.Closure(ctorParamDefs, patchedParams, patchedBody, capturedArgs)
          }
        }
>>>
withNewLocalNameScope {
  if (isThisFunction) {
    val thisParam :: actualParams = patchedParams
    js.Closure(
        ctorParamDefs,
        actualParams,
        js.Block(
            js.VarDef(thisParam.name,
                      thisParam.ptpe,
                      mutable = false,
                      js.This()(thisParam.ptpe)(thisParam.pos))(thisParam.pos),
            patchedBody),
        capturedArgs)
  } else {
    js.Closure(ctorParamDefs, patchedParams, patchedBody, capturedArgs)
  }
}
<<< SKIP instance_of_?
  object MaybeAsInstanceOf {

      def unapply(tree: Tree): Some[Tree] =
        tree match {
          case Apply(TypeApply(asInstanceOf_?@Select(base, _), _), _)
              if asInstanceOf_?.symbol == Object_asInstanceOf =>
            Some(base)
          case _ => Some(tree)
        }
    }
>>>
object MaybeAsInstanceOf {

  def unapply(tree: Tree): Some[Tree] =
    tree match {
      case Apply(TypeApply(asInstanceOf_?@Select(base, _), _), _)
          if asInstanceOf_?.symbol == Object_asInstanceOf =>
        Some(base)
      case _ => Some(tree)
    }
}
<<< double args infinte loop?
  private def withNewLocalDefs(bindings: List[Binding])(
      buildInner: (List[LocalDef], PreTransCont) => TailRec[Tree])(
      cont: PreTransCont): TailRec[Tree] = {
    bindings match {
      case first :: rest =>
        withNewLocalDef(first) { (firstLocalDef, cont1) =>
          withNewLocalDefs(rest) { (restLocalDefs, cont2) =>
            buildInner(firstLocalDef :: restLocalDefs, cont2)
          } (cont1)
        } (cont)

      case Nil =>
        buildInner(Nil, cont)
    }
  }
>>>
private def withNewLocalDefs(bindings: List[Binding]) (buildInner:(List[
        LocalDef],
    PreTransCont) => TailRec[Tree]) (cont: PreTransCont): TailRec[Tree] = {
  bindings match {
    case first :: rest =>
      withNewLocalDef(first) { (firstLocalDef, cont1) =>
        withNewLocalDefs(rest) { (restLocalDefs, cont2) =>
          buildInner(firstLocalDef :: restLocalDefs, cont2)
        }(cont1)
      }(cont)

    case Nil => buildInner(Nil, cont)
  }
}
<<< genArrayInstanceTests
  val createIsArrayOfStat = {
    envFieldDef(
        "isArrayOf",
        className,
        js.Function(List(objParam, depthParam), className match {
          case Definitions.ObjectClass =>
            val dataVarDef = genLet(Ident("data"), mutable = false, {
              obj && (obj DOT "$classData")
            })
            val data = dataVarDef.ref
            js.Block(dataVarDef, js.If(!data, {
              js.Return(js.BooleanLiteral(false))
            }, {
              val arrayDepthVarDef =
                genLet(Ident("arrayDepth"), mutable = false, {
                  (data DOT "arrayDepth") || js.IntLiteral(0)
                })
              val arrayDepth = arrayDepthVarDef.ref
              js.Block(arrayDepthVarDef, js.Return {
                // Array[A] </: Array[Array[A]]
                !js.BinaryOp(JSBinaryOp.<, arrayDepth, depth) &&
                (// Array[Array[A]] <: Array[Object]
                  js.BinaryOp(JSBinaryOp.>, arrayDepth, depth) ||
                  // Array[Int] </: Array[Object]
                  !genIdentBracketSelect(data DOT "arrayBase", "isPrimitive"))
              })
            }))

          case _ =>
            js.Return(! (! ({
              genIsScalaJSObject(obj) && ((
                obj DOT "$classData" DOT "arrayDepth") === depth) &&
              genIsClassNameInAncestors(
                  className,
                  obj DOT "$classData" DOT "arrayBase" DOT "ancestors")
            })))
        }))
  }
>>>
val createIsArrayOfStat = {
  envFieldDef(
      "isArrayOf",
      className,
      js.Function(List(objParam, depthParam), className match {
        case Definitions.ObjectClass =>
          val dataVarDef = genLet(Ident("data"), mutable = false, {
            obj && (obj DOT "$classData")
          })
          val data = dataVarDef.ref
          js.Block(dataVarDef, js.If(!data, {
            js.Return(js.BooleanLiteral(false))
          }, {
            val arrayDepthVarDef =
              genLet(Ident("arrayDepth"), mutable = false, {
                (data DOT "arrayDepth") || js.IntLiteral(0)
              })
            val arrayDepth = arrayDepthVarDef.ref
            js.Block(arrayDepthVarDef, js.Return {
              // Array[A] </: Array[Array[A]]
              !js.BinaryOp(JSBinaryOp.<, arrayDepth, depth) &&
              (// Array[Array[A]] <: Array[Object]
                js.BinaryOp(JSBinaryOp.>, arrayDepth, depth) ||
                // Array[Int] </: Array[Object]
                !genIdentBracketSelect(data DOT "arrayBase", "isPrimitive"))
            })
          }))

        case _ =>
          js.Return(! (! ({
            genIsScalaJSObject(obj) && ((
              obj DOT "$classData" DOT "arrayDepth") === depth) &&
            genIsClassNameInAncestors(
                className,
                obj DOT "$classData" DOT "arrayBase" DOT "ancestors")
          })))
      }))
}
<<< js.Return
                js.Block(
                  arrayDepthVarDef,
                  js.Return {
                    // Array[A] </: Array[Array[A]]
                    !js.BinaryOp(JSBinaryOp.<, arrayDepth, depth) && (
                      // Array[Array[A]] <: Array[Object]
                      js.BinaryOp(JSBinaryOp.>, arrayDepth, depth) ||
                      // Array[Int] </: Array[Object]
                      !genIdentBracketSelect(data DOT "arrayBase", "isPrimitive")
                    )
                  })

>>>
js.Block(arrayDepthVarDef, js.Return {
  // Array[A] </: Array[Array[A]]
  !js.BinaryOp(JSBinaryOp.<, arrayDepth, depth) &&
  (// Array[Array[A]] <: Array[Object]
    js.BinaryOp(JSBinaryOp.>, arrayDepth, depth) ||
    // Array[Int] </: Array[Object]
    !genIdentBracketSelect(data DOT "arrayBase", "isPrimitive"))
})
<<< Js.Function
js.Function(List(objParam, depthParam), js.Return {
                    js.If(
                    js.Apply(envField("isArrayOf", className), List(obj, depth)) || (obj === js.Null()), {
                      obj
                    }, {
                      genCallHelper("throwArrayCastException",
                                    obj,
                                    js.StringLiteral("L" + displayName + ";"),
                                    depth)
                    })
                  })
>>>
js.Function(List(objParam, depthParam), js.Return {
  js.If(js.Apply(envField("isArrayOf", className), List(obj, depth)) || (
          obj === js.Null()), {
          obj
        }, {
          genCallHelper("throwArrayCastException",
                        obj,
                        js.StringLiteral("L" + displayName + ";"),
                        depth)
        })
})
<<< SKIP dequeue on new stat (state explosion)
{
  Array((1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2))

  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
}
>>>
x
