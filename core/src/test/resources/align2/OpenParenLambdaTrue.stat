binPack.lambdaParameter = true
<<< gitter
{{
Ok(
        req.as[Guess](fromB64[Guess]) >>= ((guess: Guess) =>
                                             Database.checkGuess(guess).task))
}}
>>>
{
  {
    Ok(req.as[Guess](fromB64[Guess]) >>= ((guess: Guess) =>
                                            Database.checkGuess(guess).task))
  }
}
<<< ugly but you gotta fix your DSL yourself.
{
rule {
    capture((1 to 11).times(DIGIT)) ~>(s =>
           math.min(s.toLong, Int.MaxValue, AAAAAAAAAAAAAAAAAAAA))
 }
 }
>>>
{
  rule {
    capture((1 to 11).times(DIGIT)) ~> (s =>
                                          math.min(s.toLong,
                                                   Int.MaxValue,
                                                   AAAAAAAAAAAAAAAAAAAA))
  }
}
<<< tuples in spark
private[ml] class IterativelyReweightedLeastSquares(
    val reweightFunc: (Instance, WeightedLeastSquaresModel, DDDDDDDDDDD, EEEEEEEEEEE) => (Double, Double),
    val tol: Double)
>>>
private[ml] class IterativelyReweightedLeastSquares(
    val reweightFunc: (Instance, WeightedLeastSquaresModel, DDDDDDDDDDD,
                       EEEEEEEEEEE) => (Double, Double),
    val tol: Double)

<<< Any foo
{{
val func = function.asInstanceOf[
          (Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any) => Any]
}}
>>>
{
  {
    val func = function.asInstanceOf[(Any, Any, Any, Any, Any, Any, Any, Any,
                                      Any, Any, Any) => Any]
  }
}
